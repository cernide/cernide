/**
 * Copyright 2018-2020 Polyaxon, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

syntax = "proto3";

package v1;

import "google/protobuf/any.proto";

message KV {
    string key = 1;
    google.protobuf.Any value = 2;
}

// Request data with user namespace
message UserResourceRequest {
    // User
    string user = 1;
}

// Request data with owner namespace
message OwnerResourceRequest {
    // Owner of the namespace
    string owner = 1;

    // Owner usage query param
    string usage = 2;
}

message UuidResourceRequest {
  // UUid of the namespace
  string uuid = 1;
}

// Request data to get/delete entity
message OwnerEntityResourceRequestByUid {
    // Owner of the namespace
    string owner = 1;

    // Uuid identifier of the entity
    string uuid = 2;
}

// Request data with owner/entity namespace
message OwnerEntityResourceRequestByName {
  // Owner of the namespace
  string owner = 1;

  // Component under namesapce
  string name = 2;
}

// Request data to get/delete sub-entity
message OwnerSubEntityResourceRequestByUid {
  // Owner of the namespace
  string owner = 1;

  // Owner of the namespace
  string entity = 2;

  // Uuid identifier of the entity
  string uuid = 3;
}

// Request data with owner/entity/sub-entity namespace
message OwnerSubEntityResourceRequestByName {
  // Owner of the namespace
  string owner = 1;

  // Owner of the namespace
  string entity = 2;

  // Component under namesapce
  string name = 3;
}

// Request data with owner/team/member namespace
message TeamMemeberResourceRequest {
    // Owner of the namespace
    string owner = 1;

    // Team under namesapce
    string team = 2;

    // Member under team
    string user = 3;
}

message Uuids {
    repeated string uuids = 1;
}

message EntitiesTags {
    repeated string uuids = 1;
    repeated string tags = 2;
}

// Request to act on multiple entities under project
message ProjectResourceUuidsBodyRequest {
    // Owner of the namespace
    string owner = 1;

    // Project under namesapce
    string project = 2;

    // Uuids of the entities
    Uuids uuids = 3;
}

// Request to tag multiple entities under project
message ProjectTagResourceUuidsBodyRequest {
    // Owner of the namespace
    string owner = 1;

    // Project under namesapce
    string project = 2;

    // Data
    EntitiesTags data = 3;
}

// Request list data
message ResourceListRequest {
  // Pagination offset
  int32 offset = 1;

  // Limit size
  int32 limit = 2;

  // Sort to order the search
  string sort = 3;

  // Query filter the search search
  string query = 4;
}

// Request list data with user namespace
message UserResourceListRequest {
    // User
    string user = 1;

    // Pagination offset
    int32 offset = 2;

    // Limit size
    int32 limit = 3;

    // Sort to order the search
    string sort = 4;

    // Query filter the search search
    string query = 5;
}

// Request list data with owner namespace
message OwnerResourceListRequest {
    // Owner of the namespace
    string owner = 1;

    // Pagination offset
    int32 offset = 2;

    // Limit size
    int32 limit = 3;

    // Sort to order the search
    string sort = 4;

    // Query filter the search search
    string query = 5;
}

// Request list data with owner/agent namespace
message OwnerEntityResourceListRequestByName {
    // Owner of the namespace
    string owner = 1;

    // Entity managing the resource
    string name = 2;

    // Pagination offset
    int32 offset = 3;

    // Limit size
    int32 limit = 4;

     // Sort to order the search
    string sort = 5;

     // Query filter the search search
    string query = 6;
}

// Request list data with owner/project/entity namespace
message OwnerSubEntityResourceListRequestByUid {
    // Owner of the namespace
    string owner = 1;

    // Entity name under namesapce
    string entity = 2;

    // SubEntity uuid
    string uuid = 3;

    // Pagination offset
    int32 offset = 4;

    // Limit size
    int32 limit = 5;

     // Sort to order the search
    string sort = 6;

     // Query filter the search search
    string query = 7;
}

// Request list data with owner/project/entity namespace
message OwnerSubEntityResourceListRequestByName {
  // Owner of the namespace
  string owner = 1;

  // Entity name under namesapce
  string entity = 2;

  // SubEntity name
  string name = 3;

  // Pagination offset
  int32 offset = 4;

  // Limit size
  int32 limit = 5;

   // Sort to order the search
  string sort = 6;

   // Query filter the search search
  string query = 7;
}

// Artifact tree response
message ArtifactTree {
    map<string, int64> files = 1;
    repeated string dirs = 2;
    bool is_done = 3;
}
