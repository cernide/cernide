// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
 * Polyaxon SDKs and REST API specification.
 * Polyaxon SDKs and REST API specification.
 *
 * OpenAPI spec version: 1.0.5
 * Contact: contact@polyaxon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PolyaxonSdk);
  }
}(this, function(expect, PolyaxonSdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PolyaxonSdk.SchemasV1Api();
  });

  describe('(package)', function() {
    describe('SchemasV1Api', function() {
      describe('noOp', function() {
        it('should call noOp successfully', function(done) {
          // TODO: uncomment noOp call and complete the assertions
          /*

          instance.noOp(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Schemas);
            expect(data.operation_cond).to.be.a(PolyaxonSdk.V1OperationCond);
                  expect(data.operation_cond.io_conidtion).to.be.a(PolyaxonSdk.V1IoCond);
                    expect(data.operation_cond.io_conidtion.kind).to.be.a('string');
                expect(data.operation_cond.io_conidtion.kind).to.be("");
                expect(data.operation_cond.io_conidtion.param).to.be.a('string');
                expect(data.operation_cond.io_conidtion.param).to.be("");
                expect(data.operation_cond.io_conidtion.trigger).to.be.a('string');
                expect(data.operation_cond.io_conidtion.trigger).to.be("");
              expect(data.operation_cond.status_condition).to.be.a(PolyaxonSdk.V1StatusCond);
                    expect(data.operation_cond.status_condition.kind).to.be.a('string');
                expect(data.operation_cond.status_condition.kind).to.be("");
                expect(data.operation_cond.status_condition.operation).to.be.a('string');
                expect(data.operation_cond.status_condition.operation).to.be("");
                expect(data.operation_cond.status_condition.trigger).to.be.a('string');
                expect(data.operation_cond.status_condition.trigger).to.be("");
            expect(data.early_stopping).to.be.a(PolyaxonSdk.V1EarlyStopping);
                  expect(data.early_stopping.median).to.be.a(PolyaxonSdk.V1MedianStoppingPolicy);
                    expect(data.early_stopping.median.kind).to.be.a('string');
                expect(data.early_stopping.median.kind).to.be("");
                expect(data.early_stopping.median.evaluation_interval).to.be.a('number');
                expect(data.early_stopping.median.evaluation_interval).to.be(0);
                expect(data.early_stopping.median.min_interval).to.be.a('number');
                expect(data.early_stopping.median.min_interval).to.be(0);
                expect(data.early_stopping.median.min_samples).to.be.a('number');
                expect(data.early_stopping.median.min_samples).to.be(0);
              expect(data.early_stopping.diff).to.be.a(PolyaxonSdk.V1DiffStoppingPolicy);
                    expect(data.early_stopping.diff.kind).to.be.a('string');
                expect(data.early_stopping.diff.kind).to.be("");
                expect(data.early_stopping.diff.percent).to.be.a('number');
                expect(data.early_stopping.diff.percent).to.be(0.0);
                expect(data.early_stopping.diff.evaluation_interval).to.be.a('number');
                expect(data.early_stopping.diff.evaluation_interval).to.be(0);
                expect(data.early_stopping.diff.min_interval).to.be.a('number');
                expect(data.early_stopping.diff.min_interval).to.be(0);
                expect(data.early_stopping.diff.min_samples).to.be.a('number');
                expect(data.early_stopping.diff.min_samples).to.be(0);
              expect(data.early_stopping.truncation).to.be.a(PolyaxonSdk.V1TruncationStoppingPolicy);
                    expect(data.early_stopping.truncation.kind).to.be.a('string');
                expect(data.early_stopping.truncation.kind).to.be("");
                expect(data.early_stopping.truncation.percent).to.be.a('number');
                expect(data.early_stopping.truncation.percent).to.be(0);
                expect(data.early_stopping.truncation.evaluation_interval).to.be.a('number');
                expect(data.early_stopping.truncation.evaluation_interval).to.be(0);
                expect(data.early_stopping.truncation.min_interval).to.be.a('number');
                expect(data.early_stopping.truncation.min_interval).to.be(0);
                expect(data.early_stopping.truncation.min_samples).to.be.a('number');
                expect(data.early_stopping.truncation.min_samples).to.be(0);
                expect(data.early_stopping.truncation.include_succeeded).to.be.a('boolean');
                expect(data.early_stopping.truncation.include_succeeded).to.be(false);
              expect(data.early_stopping.metric).to.be.a(PolyaxonSdk.V1MetricEarlyStopping);
                    expect(data.early_stopping.metric.kind).to.be.a('string');
                expect(data.early_stopping.metric.kind).to.be("");
                expect(data.early_stopping.metric.metric).to.be.a('string');
                expect(data.early_stopping.metric.metric).to.be("");
                expect(data.early_stopping.metric.value).to.be.a('string');
                expect(data.early_stopping.metric.value).to.be("");
                expect(data.early_stopping.metric.optimization).to.be.a(PolyaxonSdk.V1Optimization);
                    expect(data.early_stopping.metric.policy).to.be.a(Object);
                expect(data.early_stopping.metric.policy).to.be();
              expect(data.early_stopping.failure).to.be.a(PolyaxonSdk.V1FailureEarlyStopping);
                    expect(data.early_stopping.failure.kind).to.be.a('string');
                expect(data.early_stopping.failure.kind).to.be("");
                expect(data.early_stopping.failure.percent).to.be.a('number');
                expect(data.early_stopping.failure.percent).to.be(0);
                expect(data.early_stopping.failure.evaluation_interval).to.be.a('string');
                expect(data.early_stopping.failure.evaluation_interval).to.be("");
            expect(data.parallel).to.be.a(PolyaxonSdk.V1Parallel);
                  expect(data.parallel.random).to.be.a(PolyaxonSdk.V1RandomSearch);
                    expect(data.parallel.random.kind).to.be.a('string');
                expect(data.parallel.random.kind).to.be("");
                {
                  let dataCtr = data.parallel.random.params;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Object);
                    expect(data).to.be();
                  }
                }
                expect(data.parallel.random.num_runs).to.be.a('number');
                expect(data.parallel.random.num_runs).to.be(0);
                expect(data.parallel.random.seed).to.be.a('number');
                expect(data.parallel.random.seed).to.be(0);
                expect(data.parallel.random.concurrency).to.be.a('number');
                expect(data.parallel.random.concurrency).to.be(0);
                {
                  let dataCtr = data.parallel.random.early_stopping;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Object);
                    expect(data).to.be();
                  }
                }
              expect(data.parallel.grid).to.be.a(PolyaxonSdk.V1GridSearch);
                    expect(data.parallel.grid.kind).to.be.a('string');
                expect(data.parallel.grid.kind).to.be("");
                {
                  let dataCtr = data.parallel.grid.params;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Object);
                    expect(data).to.be();
                  }
                }
                expect(data.parallel.grid.num_runs).to.be.a('number');
                expect(data.parallel.grid.num_runs).to.be(0);
                expect(data.parallel.grid.seed).to.be.a('number');
                expect(data.parallel.grid.seed).to.be(0);
                expect(data.parallel.grid.concurrency).to.be.a('number');
                expect(data.parallel.grid.concurrency).to.be(0);
                {
                  let dataCtr = data.parallel.grid.early_stopping;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Object);
                    expect(data).to.be();
                  }
                }
              expect(data.parallel.hyperband).to.be.a(PolyaxonSdk.V1Hyperband);
                    expect(data.parallel.hyperband.kind).to.be.a('string');
                expect(data.parallel.hyperband.kind).to.be("");
                {
                  let dataCtr = data.parallel.hyperband.params;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Object);
                    expect(data).to.be();
                  }
                }
                expect(data.parallel.hyperband.max_iterations).to.be.a('number');
                expect(data.parallel.hyperband.max_iterations).to.be(0);
                expect(data.parallel.hyperband.eta).to.be.a('number');
                expect(data.parallel.hyperband.eta).to.be(0);
                expect(data.parallel.hyperband.resource).to.be.a(PolyaxonSdk.V1OptimizationResource);
                      expect(data.parallel.hyperband.resource.name).to.be.a('string');
                  expect(data.parallel.hyperband.resource.name).to.be("");
                  expect(data.parallel.hyperband.resource.type).to.be.a(PolyaxonSdk.V1ResourceType);
          
                expect(data.parallel.hyperband.metric).to.be.a(PolyaxonSdk.V1OptimizationMetric);
                      expect(data.parallel.hyperband.metric.name).to.be.a('string');
                  expect(data.parallel.hyperband.metric.name).to.be("");
                  expect(data.parallel.hyperband.metric.optimization).to.be.a(PolyaxonSdk.V1Optimization);
          
                expect(data.parallel.hyperband.resume).to.be.a('boolean');
                expect(data.parallel.hyperband.resume).to.be(false);
                expect(data.parallel.hyperband.seed).to.be.a('number');
                expect(data.parallel.hyperband.seed).to.be(0);
                expect(data.parallel.hyperband.concurrency).to.be.a('number');
                expect(data.parallel.hyperband.concurrency).to.be(0);
                {
                  let dataCtr = data.parallel.hyperband.early_stopping;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Object);
                    expect(data).to.be();
                  }
                }
              expect(data.parallel.bayes).to.be.a(PolyaxonSdk.V1Bayes);
                    expect(data.parallel.bayes.kind).to.be.a('string');
                expect(data.parallel.bayes.kind).to.be("");
                {
                  let dataCtr = data.parallel.bayes.params;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Object);
                    expect(data).to.be();
                  }
                }
                expect(data.parallel.bayes.num_initial_runs).to.be.a('number');
                expect(data.parallel.bayes.num_initial_runs).to.be(0);
                expect(data.parallel.bayes.num_iterations).to.be.a('number');
                expect(data.parallel.bayes.num_iterations).to.be(0);
                expect(data.parallel.bayes.utility_function).to.be.a(Object);
                expect(data.parallel.bayes.utility_function).to.be();
                expect(data.parallel.bayes.metric).to.be.a(PolyaxonSdk.V1OptimizationMetric);
                      expect(data.parallel.bayes.metric.name).to.be.a('string');
                  expect(data.parallel.bayes.metric.name).to.be("");
                  expect(data.parallel.bayes.metric.optimization).to.be.a(PolyaxonSdk.V1Optimization);
          
                expect(data.parallel.bayes.seed).to.be.a('number');
                expect(data.parallel.bayes.seed).to.be(0);
                expect(data.parallel.bayes.concurrency).to.be.a('number');
                expect(data.parallel.bayes.concurrency).to.be(0);
                {
                  let dataCtr = data.parallel.bayes.early_stopping;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Object);
                    expect(data).to.be();
                  }
                }
              expect(data.parallel.hyperopt).to.be.a(PolyaxonSdk.V1Hyperopt);
                    expect(data.parallel.hyperopt.kind).to.be.a('string');
                expect(data.parallel.hyperopt.kind).to.be("");
                expect(data.parallel.hyperopt.algorithm).to.be.a(PolyaxonSdk.V1HyperoptAlgorithms);
                    {
                  let dataCtr = data.parallel.hyperopt.params;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Object);
                    expect(data).to.be();
                  }
                }
                expect(data.parallel.hyperopt.num_runs).to.be.a('number');
                expect(data.parallel.hyperopt.num_runs).to.be(0);
                expect(data.parallel.hyperopt.seed).to.be.a('number');
                expect(data.parallel.hyperopt.seed).to.be(0);
                expect(data.parallel.hyperopt.concurrency).to.be.a('number');
                expect(data.parallel.hyperopt.concurrency).to.be(0);
                {
                  let dataCtr = data.parallel.hyperopt.early_stopping;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Object);
                    expect(data).to.be();
                  }
                }
              expect(data.parallel.iterative).to.be.a(PolyaxonSdk.V1Iterative);
                    expect(data.parallel.iterative.kind).to.be.a('string');
                expect(data.parallel.iterative.kind).to.be("");
                {
                  let dataCtr = data.parallel.iterative.params;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Object);
                    expect(data).to.be();
                  }
                }
                expect(data.parallel.iterative.num_iterations).to.be.a('number');
                expect(data.parallel.iterative.num_iterations).to.be(0);
                expect(data.parallel.iterative.container).to.be.a(PolyaxonSdk.V1Container);
                    expect(data.parallel.iterative.seed).to.be.a('number');
                expect(data.parallel.iterative.seed).to.be(0);
                expect(data.parallel.iterative.concurrency).to.be.a('number');
                expect(data.parallel.iterative.concurrency).to.be(0);
                {
                  let dataCtr = data.parallel.iterative.early_stopping;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Object);
                    expect(data).to.be();
                  }
                }
              expect(data.parallel.mapping).to.be.a(PolyaxonSdk.V1Mapping);
                    expect(data.parallel.mapping.kind).to.be.a('string');
                expect(data.parallel.mapping.kind).to.be("");
                expect(data.parallel.mapping.values).to.be.a('string');
                expect(data.parallel.mapping.values).to.be("");
                expect(data.parallel.mapping.concurrency).to.be.a('number');
                expect(data.parallel.mapping.concurrency).to.be(0);
                {
                  let dataCtr = data.parallel.mapping.early_stopping;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Object);
                    expect(data).to.be();
                  }
                }
            expect(data.run).to.be.a(PolyaxonSdk.V1RunSchema);
                  expect(data.run.job).to.be.a(PolyaxonSdk.V1Job);
                    expect(data.run.job.kind).to.be.a('string');
                expect(data.run.job.kind).to.be("");
                expect(data.run.job.environment).to.be.a(PolyaxonSdk.V1Environment);
                      {
                    let dataCtr = data.run.job.environment.labels;
                    expect(dataCtr).to.be.an(Object);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.run.job.environment.annotations;
                    expect(dataCtr).to.be.an(Object);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.run.job.environment.node_selector;
                    expect(dataCtr).to.be.an(Object);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.run.job.environment.affinity).to.be.a(PolyaxonSdk.V1Affinity);
                      {
                    let dataCtr = data.run.job.environment.tolerations;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1Toleration);
                    }
                  }
                  expect(data.run.job.environment.node_name).to.be.a('string');
                  expect(data.run.job.environment.node_name).to.be("");
                  expect(data.run.job.environment.service_account_name).to.be.a('string');
                  expect(data.run.job.environment.service_account_name).to.be("");
                  {
                    let dataCtr = data.run.job.environment.host_aliases;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1HostAlias);
                    }
                  }
                  expect(data.run.job.environment.security_context).to.be.a(PolyaxonSdk.V1PodSecurityContext);
                      {
                    let dataCtr = data.run.job.environment.image_pull_secrets;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.run.job.environment.host_network).to.be.a('boolean');
                  expect(data.run.job.environment.host_network).to.be(false);
                  expect(data.run.job.environment.dns_policy).to.be.a('string');
                  expect(data.run.job.environment.dns_policy).to.be("");
                  expect(data.run.job.environment.dns_config).to.be.a(PolyaxonSdk.V1PodDNSConfig);
                      expect(data.run.job.environment.scheduler_name).to.be.a('string');
                  expect(data.run.job.environment.scheduler_name).to.be("");
                  expect(data.run.job.environment.priority_class_name).to.be.a('string');
                  expect(data.run.job.environment.priority_class_name).to.be("");
                  expect(data.run.job.environment.priority).to.be.a('number');
                  expect(data.run.job.environment.priority).to.be(0);
                  expect(data.run.job.environment.restart_policy).to.be.a('string');
                  expect(data.run.job.environment.restart_policy).to.be("");
                {
                  let dataCtr = data.run.job.connections;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.run.job.volumes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PolyaxonSdk.V1Volume);
                  }
                }
                {
                  let dataCtr = data.run.job.init;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PolyaxonSdk.V1Init);
                    expect(data.artifacts).to.be.a(PolyaxonSdk.V1ArtifactsType);
                          expect(data.artifacts.connection).to.be.a('string');
                      expect(data.artifacts.connection).to.be("");
                      {
                        let dataCtr = data.artifacts.files;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                      {
                        let dataCtr = data.artifacts.dirs;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                      expect(data.artifacts.init).to.be.a('boolean');
                      expect(data.artifacts.init).to.be(false);
                      expect(data.artifacts.workers).to.be.a('number');
                      expect(data.artifacts.workers).to.be(0);
                    expect(data.git).to.be.a(PolyaxonSdk.V1GitType);
                          expect(data.git.url).to.be.a('string');
                      expect(data.git.url).to.be("");
                      expect(data.git.revision).to.be.a('boolean');
                      expect(data.git.revision).to.be(false);
                      expect(data.git.connection).to.be.a('string');
                      expect(data.git.connection).to.be("");
                      expect(data.git.init).to.be.a('boolean');
                      expect(data.git.init).to.be(false);
                    expect(data.dockerfile).to.be.a(PolyaxonSdk.V1DockerfileType);
                          expect(data.dockerfile.image).to.be.a('string');
                      expect(data.dockerfile.image).to.be("");
                      {
                        let dataCtr = data.dockerfile.env;
                        expect(dataCtr).to.be.an(Object);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                      {
                        let dataCtr = data.dockerfile.path;
                        expect(dataCtr).to.be.an(Object);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                      {
                        let dataCtr = data.dockerfile.copy;
                        expect(dataCtr).to.be.an(Object);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                      {
                        let dataCtr = data.dockerfile.run;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                      expect(data.dockerfile.lang_env).to.be.a('string');
                      expect(data.dockerfile.lang_env).to.be("");
                      expect(data.dockerfile.uid).to.be.a('number');
                      expect(data.dockerfile.uid).to.be(0);
                      expect(data.dockerfile.gid).to.be.a('number');
                      expect(data.dockerfile.gid).to.be(0);
                      expect(data.dockerfile.filename).to.be.a('string');
                      expect(data.dockerfile.filename).to.be("");
                      expect(data.dockerfile.workdir).to.be.a('string');
                      expect(data.dockerfile.workdir).to.be("");
                      expect(data.dockerfile.workdir_path).to.be.a('string');
                      expect(data.dockerfile.workdir_path).to.be("");
                      expect(data.dockerfile.shell).to.be.a('string');
                      expect(data.dockerfile.shell).to.be("");
                    expect(data.connection).to.be.a('string');
                    expect(data.connection).to.be("");
                    expect(data.path).to.be.a('string');
                    expect(data.path).to.be("");
                    expect(data.container).to.be.a(PolyaxonSdk.V1Container);
            
                  }
                }
                {
                  let dataCtr = data.run.job.sidecars;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PolyaxonSdk.V1Container);
                  }
                }
                expect(data.run.job.container).to.be.a(PolyaxonSdk.V1Container);
        
              expect(data.run.service).to.be.a(PolyaxonSdk.V1Service);
                    expect(data.run.service.kind).to.be.a('string');
                expect(data.run.service.kind).to.be("");
                expect(data.run.service.environment).to.be.a(PolyaxonSdk.V1Environment);
                      {
                    let dataCtr = data.run.service.environment.labels;
                    expect(dataCtr).to.be.an(Object);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.run.service.environment.annotations;
                    expect(dataCtr).to.be.an(Object);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.run.service.environment.node_selector;
                    expect(dataCtr).to.be.an(Object);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.run.service.environment.affinity).to.be.a(PolyaxonSdk.V1Affinity);
                      {
                    let dataCtr = data.run.service.environment.tolerations;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1Toleration);
                    }
                  }
                  expect(data.run.service.environment.node_name).to.be.a('string');
                  expect(data.run.service.environment.node_name).to.be("");
                  expect(data.run.service.environment.service_account_name).to.be.a('string');
                  expect(data.run.service.environment.service_account_name).to.be("");
                  {
                    let dataCtr = data.run.service.environment.host_aliases;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1HostAlias);
                    }
                  }
                  expect(data.run.service.environment.security_context).to.be.a(PolyaxonSdk.V1PodSecurityContext);
                      {
                    let dataCtr = data.run.service.environment.image_pull_secrets;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.run.service.environment.host_network).to.be.a('boolean');
                  expect(data.run.service.environment.host_network).to.be(false);
                  expect(data.run.service.environment.dns_policy).to.be.a('string');
                  expect(data.run.service.environment.dns_policy).to.be("");
                  expect(data.run.service.environment.dns_config).to.be.a(PolyaxonSdk.V1PodDNSConfig);
                      expect(data.run.service.environment.scheduler_name).to.be.a('string');
                  expect(data.run.service.environment.scheduler_name).to.be("");
                  expect(data.run.service.environment.priority_class_name).to.be.a('string');
                  expect(data.run.service.environment.priority_class_name).to.be("");
                  expect(data.run.service.environment.priority).to.be.a('number');
                  expect(data.run.service.environment.priority).to.be(0);
                  expect(data.run.service.environment.restart_policy).to.be.a('string');
                  expect(data.run.service.environment.restart_policy).to.be("");
                {
                  let dataCtr = data.run.service.connections;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.run.service.volumes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PolyaxonSdk.V1Volume);
                  }
                }
                {
                  let dataCtr = data.run.service.init;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PolyaxonSdk.V1Init);
                    expect(data.artifacts).to.be.a(PolyaxonSdk.V1ArtifactsType);
                          expect(data.artifacts.connection).to.be.a('string');
                      expect(data.artifacts.connection).to.be("");
                      {
                        let dataCtr = data.artifacts.files;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                      {
                        let dataCtr = data.artifacts.dirs;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                      expect(data.artifacts.init).to.be.a('boolean');
                      expect(data.artifacts.init).to.be(false);
                      expect(data.artifacts.workers).to.be.a('number');
                      expect(data.artifacts.workers).to.be(0);
                    expect(data.git).to.be.a(PolyaxonSdk.V1GitType);
                          expect(data.git.url).to.be.a('string');
                      expect(data.git.url).to.be("");
                      expect(data.git.revision).to.be.a('boolean');
                      expect(data.git.revision).to.be(false);
                      expect(data.git.connection).to.be.a('string');
                      expect(data.git.connection).to.be("");
                      expect(data.git.init).to.be.a('boolean');
                      expect(data.git.init).to.be(false);
                    expect(data.dockerfile).to.be.a(PolyaxonSdk.V1DockerfileType);
                          expect(data.dockerfile.image).to.be.a('string');
                      expect(data.dockerfile.image).to.be("");
                      {
                        let dataCtr = data.dockerfile.env;
                        expect(dataCtr).to.be.an(Object);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                      {
                        let dataCtr = data.dockerfile.path;
                        expect(dataCtr).to.be.an(Object);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                      {
                        let dataCtr = data.dockerfile.copy;
                        expect(dataCtr).to.be.an(Object);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                      {
                        let dataCtr = data.dockerfile.run;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                      expect(data.dockerfile.lang_env).to.be.a('string');
                      expect(data.dockerfile.lang_env).to.be("");
                      expect(data.dockerfile.uid).to.be.a('number');
                      expect(data.dockerfile.uid).to.be(0);
                      expect(data.dockerfile.gid).to.be.a('number');
                      expect(data.dockerfile.gid).to.be(0);
                      expect(data.dockerfile.filename).to.be.a('string');
                      expect(data.dockerfile.filename).to.be("");
                      expect(data.dockerfile.workdir).to.be.a('string');
                      expect(data.dockerfile.workdir).to.be("");
                      expect(data.dockerfile.workdir_path).to.be.a('string');
                      expect(data.dockerfile.workdir_path).to.be("");
                      expect(data.dockerfile.shell).to.be.a('string');
                      expect(data.dockerfile.shell).to.be("");
                    expect(data.connection).to.be.a('string');
                    expect(data.connection).to.be("");
                    expect(data.path).to.be.a('string');
                    expect(data.path).to.be("");
                    expect(data.container).to.be.a(PolyaxonSdk.V1Container);
            
                  }
                }
                {
                  let dataCtr = data.run.service.sidecars;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PolyaxonSdk.V1Container);
                  }
                }
                expect(data.run.service.container).to.be.a(PolyaxonSdk.V1Container);
                    {
                  let dataCtr = data.run.service.ports;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('number');
                    expect(data).to.be(0);
                  }
                }
                expect(data.run.service.rewritePath).to.be.a('boolean');
                expect(data.run.service.rewritePath).to.be(false);
              expect(data.run.dag).to.be.a(PolyaxonSdk.V1Dag);
                    expect(data.run.dag.kind).to.be.a('string');
                expect(data.run.dag.kind).to.be("");
                {
                  let dataCtr = data.run.dag.operations;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PolyaxonSdk.V1Operation);
                    expect(data.version).to.be.a('number');
                    expect(data.version).to.be(0.0);
                    expect(data.kind).to.be.a('string');
                    expect(data.kind).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.tag).to.be.a('string');
                    expect(data.tag).to.be("");
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
                    {
                      let dataCtr = data.tags;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.profile).to.be.a('string');
                    expect(data.profile).to.be("");
                    expect(data.queue).to.be.a('string');
                    expect(data.queue).to.be("");
                    expect(data.cache).to.be.a(PolyaxonSdk.V1Cache);
                          expect(data.cache.disable).to.be.a('boolean');
                      expect(data.cache.disable).to.be(false);
                      expect(data.cache.ttl).to.be.a('number');
                      expect(data.cache.ttl).to.be(0);
                      {
                        let dataCtr = data.cache.inputs;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                    expect(data.schedule).to.be.a(Object);
                    expect(data.schedule).to.be();
                    expect(data.parallel).to.be.a(Object);
                    expect(data.parallel).to.be();
                    {
                      let dataCtr = data.dependencies;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.trigger).to.be.a(PolyaxonSdk.V1TriggerPolicy);
                        {
                      let dataCtr = data.conditions;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Object);
                        expect(data).to.be();
                      }
                    }
                    expect(data.skip_on_upstream_skip).to.be.a('boolean');
                    expect(data.skip_on_upstream_skip).to.be(false);
                    expect(data.termination).to.be.a(PolyaxonSdk.V1Termination);
                          expect(data.termination.max_retries).to.be.a('number');
                      expect(data.termination.max_retries).to.be(0);
                      expect(data.termination.ttl).to.be.a('number');
                      expect(data.termination.ttl).to.be(0);
                      expect(data.termination.timeout).to.be.a('number');
                      expect(data.termination.timeout).to.be(0);
                    expect(data.plugins).to.be.a(PolyaxonSdk.V1Plugins);
                          expect(data.plugins.auth).to.be.a('boolean');
                      expect(data.plugins.auth).to.be(false);
                      expect(data.plugins.docker).to.be.a('boolean');
                      expect(data.plugins.docker).to.be(false);
                      expect(data.plugins.shm).to.be.a('boolean');
                      expect(data.plugins.shm).to.be(false);
                      expect(data.plugins.collect_artifacts).to.be.a('boolean');
                      expect(data.plugins.collect_artifacts).to.be(false);
                      expect(data.plugins.collect_logs).to.be.a('boolean');
                      expect(data.plugins.collect_logs).to.be(false);
                      expect(data.plugins.collect_resources).to.be.a('string');
                      expect(data.plugins.collect_resources).to.be("");
                      expect(data.plugins.sync_statuses).to.be.a('boolean');
                      expect(data.plugins.sync_statuses).to.be(false);
                      expect(data.plugins.log_level).to.be.a('string');
                      expect(data.plugins.log_level).to.be("");
                      {
                        let dataCtr = data.plugins.notifications;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(PolyaxonSdk.V1Notification);
                          expect(data.connection).to.be.a('string');
                          expect(data.connection).to.be("");
                          expect(data.trigger).to.be.a(PolyaxonSdk.NotificationTrigger);
                  
                        }
                      }
                    {
                      let dataCtr = data.params;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1Param);
                        expect(data.value).to.be.a(Object);
                        expect(data.value).to.be();
                        expect(data.ref).to.be.a('string');
                        expect(data.ref).to.be("");
                        expect(data.search).to.be.a(PolyaxonSdk.V1ParamSearch);
                              expect(data.search.query).to.be.a('string');
                          expect(data.search.query).to.be("");
                          expect(data.search.sort).to.be.a('string');
                          expect(data.search.sort).to.be("");
                          expect(data.search.limit).to.be.a('string');
                          expect(data.search.limit).to.be("");
                      }
                    }
                    expect(data.run_patch).to.be.a(Object);
                    expect(data.run_patch).to.be();
                    expect(data.dag_ref).to.be.a('string');
                    expect(data.dag_ref).to.be("");
                    expect(data.url_ref).to.be.a('string');
                    expect(data.url_ref).to.be("");
                    expect(data.path_ref).to.be.a('string');
                    expect(data.path_ref).to.be("");
                    expect(data.hub_ref).to.be.a('string');
                    expect(data.hub_ref).to.be("");
                    expect(data.component).to.be.a(PolyaxonSdk.V1Component);
                          expect(data.component.version).to.be.a('number');
                      expect(data.component.version).to.be(0.0);
                      expect(data.component.kind).to.be.a('string');
                      expect(data.component.kind).to.be("");
                      expect(data.component.name).to.be.a('string');
                      expect(data.component.name).to.be("");
                      expect(data.component.tag).to.be.a('string');
                      expect(data.component.tag).to.be("");
                      expect(data.component.description).to.be.a('string');
                      expect(data.component.description).to.be("");
                      {
                        let dataCtr = data.component.tags;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                      expect(data.component.profile).to.be.a('string');
                      expect(data.component.profile).to.be("");
                      expect(data.component.queue).to.be.a('string');
                      expect(data.component.queue).to.be("");
                      expect(data.component.cache).to.be.a(PolyaxonSdk.V1Cache);
                            expect(data.component.cache.disable).to.be.a('boolean');
                        expect(data.component.cache.disable).to.be(false);
                        expect(data.component.cache.ttl).to.be.a('number');
                        expect(data.component.cache.ttl).to.be(0);
                        {
                          let dataCtr = data.component.cache.inputs;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                      expect(data.component.termination).to.be.a(PolyaxonSdk.V1Termination);
                            expect(data.component.termination.max_retries).to.be.a('number');
                        expect(data.component.termination.max_retries).to.be(0);
                        expect(data.component.termination.ttl).to.be.a('number');
                        expect(data.component.termination.ttl).to.be(0);
                        expect(data.component.termination.timeout).to.be.a('number');
                        expect(data.component.termination.timeout).to.be(0);
                      expect(data.component.plugins).to.be.a(PolyaxonSdk.V1Plugins);
                            expect(data.component.plugins.auth).to.be.a('boolean');
                        expect(data.component.plugins.auth).to.be(false);
                        expect(data.component.plugins.docker).to.be.a('boolean');
                        expect(data.component.plugins.docker).to.be(false);
                        expect(data.component.plugins.shm).to.be.a('boolean');
                        expect(data.component.plugins.shm).to.be(false);
                        expect(data.component.plugins.collect_artifacts).to.be.a('boolean');
                        expect(data.component.plugins.collect_artifacts).to.be(false);
                        expect(data.component.plugins.collect_logs).to.be.a('boolean');
                        expect(data.component.plugins.collect_logs).to.be(false);
                        expect(data.component.plugins.collect_resources).to.be.a('string');
                        expect(data.component.plugins.collect_resources).to.be("");
                        expect(data.component.plugins.sync_statuses).to.be.a('boolean');
                        expect(data.component.plugins.sync_statuses).to.be(false);
                        expect(data.component.plugins.log_level).to.be.a('string');
                        expect(data.component.plugins.log_level).to.be("");
                        {
                          let dataCtr = data.component.plugins.notifications;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(PolyaxonSdk.V1Notification);
                            expect(data.connection).to.be.a('string');
                            expect(data.connection).to.be("");
                            expect(data.trigger).to.be.a(PolyaxonSdk.NotificationTrigger);
                    
                          }
                        }
                      {
                        let dataCtr = data.component.inputs;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(PolyaxonSdk.V1IO);
                          expect(data.name).to.be.a('string');
                          expect(data.name).to.be("");
                          expect(data.description).to.be.a('string');
                          expect(data.description).to.be("");
                          expect(data.iotype).to.be.a('string');
                          expect(data.iotype).to.be("");
                          expect(data.value).to.be.a(Object);
                          expect(data.value).to.be();
                          expect(data.is_optional).to.be.a('boolean');
                          expect(data.is_optional).to.be(false);
                          expect(data.is_list).to.be.a('boolean');
                          expect(data.is_list).to.be(false);
                          expect(data.is_flag).to.be.a('boolean');
                          expect(data.is_flag).to.be(false);
                          expect(data.delay_validation).to.be.a('boolean');
                          expect(data.delay_validation).to.be(false);
                          {
                            let dataCtr = data.options;
                            expect(dataCtr).to.be.an(Array);
                            expect(dataCtr).to.not.be.empty();
                            for (let p in dataCtr) {
                              let data = dataCtr[p];
                              expect(data).to.be.a(Object);
                              expect(data).to.be();
                            }
                          }
                        }
                      }
                      {
                        let dataCtr = data.component.outputs;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(PolyaxonSdk.V1IO);
                          expect(data.name).to.be.a('string');
                          expect(data.name).to.be("");
                          expect(data.description).to.be.a('string');
                          expect(data.description).to.be("");
                          expect(data.iotype).to.be.a('string');
                          expect(data.iotype).to.be("");
                          expect(data.value).to.be.a(Object);
                          expect(data.value).to.be();
                          expect(data.is_optional).to.be.a('boolean');
                          expect(data.is_optional).to.be(false);
                          expect(data.is_list).to.be.a('boolean');
                          expect(data.is_list).to.be(false);
                          expect(data.is_flag).to.be.a('boolean');
                          expect(data.is_flag).to.be(false);
                          expect(data.delay_validation).to.be.a('boolean');
                          expect(data.delay_validation).to.be(false);
                          {
                            let dataCtr = data.options;
                            expect(dataCtr).to.be.an(Array);
                            expect(dataCtr).to.not.be.empty();
                            for (let p in dataCtr) {
                              let data = dataCtr[p];
                              expect(data).to.be.a(Object);
                              expect(data).to.be();
                            }
                          }
                        }
                      }
                      expect(data.component.run).to.be.a(Object);
                      expect(data.component.run).to.be();
                  }
                }
                {
                  let dataCtr = data.run.dag.components;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PolyaxonSdk.V1Component);
                    expect(data.version).to.be.a('number');
                    expect(data.version).to.be(0.0);
                    expect(data.kind).to.be.a('string');
                    expect(data.kind).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.tag).to.be.a('string');
                    expect(data.tag).to.be("");
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
                    {
                      let dataCtr = data.tags;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.profile).to.be.a('string');
                    expect(data.profile).to.be("");
                    expect(data.queue).to.be.a('string');
                    expect(data.queue).to.be("");
                    expect(data.cache).to.be.a(PolyaxonSdk.V1Cache);
                          expect(data.cache.disable).to.be.a('boolean');
                      expect(data.cache.disable).to.be(false);
                      expect(data.cache.ttl).to.be.a('number');
                      expect(data.cache.ttl).to.be(0);
                      {
                        let dataCtr = data.cache.inputs;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                    expect(data.termination).to.be.a(PolyaxonSdk.V1Termination);
                          expect(data.termination.max_retries).to.be.a('number');
                      expect(data.termination.max_retries).to.be(0);
                      expect(data.termination.ttl).to.be.a('number');
                      expect(data.termination.ttl).to.be(0);
                      expect(data.termination.timeout).to.be.a('number');
                      expect(data.termination.timeout).to.be(0);
                    expect(data.plugins).to.be.a(PolyaxonSdk.V1Plugins);
                          expect(data.plugins.auth).to.be.a('boolean');
                      expect(data.plugins.auth).to.be(false);
                      expect(data.plugins.docker).to.be.a('boolean');
                      expect(data.plugins.docker).to.be(false);
                      expect(data.plugins.shm).to.be.a('boolean');
                      expect(data.plugins.shm).to.be(false);
                      expect(data.plugins.collect_artifacts).to.be.a('boolean');
                      expect(data.plugins.collect_artifacts).to.be(false);
                      expect(data.plugins.collect_logs).to.be.a('boolean');
                      expect(data.plugins.collect_logs).to.be(false);
                      expect(data.plugins.collect_resources).to.be.a('string');
                      expect(data.plugins.collect_resources).to.be("");
                      expect(data.plugins.sync_statuses).to.be.a('boolean');
                      expect(data.plugins.sync_statuses).to.be(false);
                      expect(data.plugins.log_level).to.be.a('string');
                      expect(data.plugins.log_level).to.be("");
                      {
                        let dataCtr = data.plugins.notifications;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(PolyaxonSdk.V1Notification);
                          expect(data.connection).to.be.a('string');
                          expect(data.connection).to.be("");
                          expect(data.trigger).to.be.a(PolyaxonSdk.NotificationTrigger);
                  
                        }
                      }
                    {
                      let dataCtr = data.inputs;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1IO);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        expect(data.description).to.be.a('string');
                        expect(data.description).to.be("");
                        expect(data.iotype).to.be.a('string');
                        expect(data.iotype).to.be("");
                        expect(data.value).to.be.a(Object);
                        expect(data.value).to.be();
                        expect(data.is_optional).to.be.a('boolean');
                        expect(data.is_optional).to.be(false);
                        expect(data.is_list).to.be.a('boolean');
                        expect(data.is_list).to.be(false);
                        expect(data.is_flag).to.be.a('boolean');
                        expect(data.is_flag).to.be(false);
                        expect(data.delay_validation).to.be.a('boolean');
                        expect(data.delay_validation).to.be(false);
                        {
                          let dataCtr = data.options;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(Object);
                            expect(data).to.be();
                          }
                        }
                      }
                    }
                    {
                      let dataCtr = data.outputs;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1IO);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        expect(data.description).to.be.a('string');
                        expect(data.description).to.be("");
                        expect(data.iotype).to.be.a('string');
                        expect(data.iotype).to.be("");
                        expect(data.value).to.be.a(Object);
                        expect(data.value).to.be();
                        expect(data.is_optional).to.be.a('boolean');
                        expect(data.is_optional).to.be(false);
                        expect(data.is_list).to.be.a('boolean');
                        expect(data.is_list).to.be(false);
                        expect(data.is_flag).to.be.a('boolean');
                        expect(data.is_flag).to.be(false);
                        expect(data.delay_validation).to.be.a('boolean');
                        expect(data.delay_validation).to.be(false);
                        {
                          let dataCtr = data.options;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(Object);
                            expect(data).to.be();
                          }
                        }
                      }
                    }
                    expect(data.run).to.be.a(Object);
                    expect(data.run).to.be();
                  }
                }
                expect(data.run.dag.concurrency).to.be.a('number');
                expect(data.run.dag.concurrency).to.be(0);
                {
                  let dataCtr = data.run.dag.early_stopping;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Object);
                    expect(data).to.be();
                  }
                }
                expect(data.run.dag.environment).to.be.a(PolyaxonSdk.V1Environment);
                      {
                    let dataCtr = data.run.dag.environment.labels;
                    expect(dataCtr).to.be.an(Object);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.run.dag.environment.annotations;
                    expect(dataCtr).to.be.an(Object);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.run.dag.environment.node_selector;
                    expect(dataCtr).to.be.an(Object);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.run.dag.environment.affinity).to.be.a(PolyaxonSdk.V1Affinity);
                      {
                    let dataCtr = data.run.dag.environment.tolerations;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1Toleration);
                    }
                  }
                  expect(data.run.dag.environment.node_name).to.be.a('string');
                  expect(data.run.dag.environment.node_name).to.be("");
                  expect(data.run.dag.environment.service_account_name).to.be.a('string');
                  expect(data.run.dag.environment.service_account_name).to.be("");
                  {
                    let dataCtr = data.run.dag.environment.host_aliases;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1HostAlias);
                    }
                  }
                  expect(data.run.dag.environment.security_context).to.be.a(PolyaxonSdk.V1PodSecurityContext);
                      {
                    let dataCtr = data.run.dag.environment.image_pull_secrets;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.run.dag.environment.host_network).to.be.a('boolean');
                  expect(data.run.dag.environment.host_network).to.be(false);
                  expect(data.run.dag.environment.dns_policy).to.be.a('string');
                  expect(data.run.dag.environment.dns_policy).to.be("");
                  expect(data.run.dag.environment.dns_config).to.be.a(PolyaxonSdk.V1PodDNSConfig);
                      expect(data.run.dag.environment.scheduler_name).to.be.a('string');
                  expect(data.run.dag.environment.scheduler_name).to.be("");
                  expect(data.run.dag.environment.priority_class_name).to.be.a('string');
                  expect(data.run.dag.environment.priority_class_name).to.be("");
                  expect(data.run.dag.environment.priority).to.be.a('number');
                  expect(data.run.dag.environment.priority).to.be(0);
                  expect(data.run.dag.environment.restart_policy).to.be.a('string');
                  expect(data.run.dag.environment.restart_policy).to.be("");
                {
                  let dataCtr = data.run.dag.connections;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.run.dag.volumes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PolyaxonSdk.V1Volume);
                  }
                }
              expect(data.run.tf_job).to.be.a(PolyaxonSdk.V1TFJob);
                    expect(data.run.tf_job.kind).to.be.a('string');
                expect(data.run.tf_job.kind).to.be("");
                expect(data.run.tf_job.cleanPodPolicy).to.be.a(PolyaxonSdk.V1CleanPodPolicy);
                    expect(data.run.tf_job.chief).to.be.a(PolyaxonSdk.V1KFReplica);
                      expect(data.run.tf_job.chief.replicas).to.be.a('number');
                  expect(data.run.tf_job.chief.replicas).to.be(0);
                  expect(data.run.tf_job.chief.environment).to.be.a(PolyaxonSdk.V1Environment);
                        {
                      let dataCtr = data.run.tf_job.chief.environment.labels;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.tf_job.chief.environment.annotations;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.tf_job.chief.environment.node_selector;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.run.tf_job.chief.environment.affinity).to.be.a(PolyaxonSdk.V1Affinity);
                        {
                      let dataCtr = data.run.tf_job.chief.environment.tolerations;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1Toleration);
                      }
                    }
                    expect(data.run.tf_job.chief.environment.node_name).to.be.a('string');
                    expect(data.run.tf_job.chief.environment.node_name).to.be("");
                    expect(data.run.tf_job.chief.environment.service_account_name).to.be.a('string');
                    expect(data.run.tf_job.chief.environment.service_account_name).to.be("");
                    {
                      let dataCtr = data.run.tf_job.chief.environment.host_aliases;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1HostAlias);
                      }
                    }
                    expect(data.run.tf_job.chief.environment.security_context).to.be.a(PolyaxonSdk.V1PodSecurityContext);
                        {
                      let dataCtr = data.run.tf_job.chief.environment.image_pull_secrets;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.run.tf_job.chief.environment.host_network).to.be.a('boolean');
                    expect(data.run.tf_job.chief.environment.host_network).to.be(false);
                    expect(data.run.tf_job.chief.environment.dns_policy).to.be.a('string');
                    expect(data.run.tf_job.chief.environment.dns_policy).to.be("");
                    expect(data.run.tf_job.chief.environment.dns_config).to.be.a(PolyaxonSdk.V1PodDNSConfig);
                        expect(data.run.tf_job.chief.environment.scheduler_name).to.be.a('string');
                    expect(data.run.tf_job.chief.environment.scheduler_name).to.be("");
                    expect(data.run.tf_job.chief.environment.priority_class_name).to.be.a('string');
                    expect(data.run.tf_job.chief.environment.priority_class_name).to.be("");
                    expect(data.run.tf_job.chief.environment.priority).to.be.a('number');
                    expect(data.run.tf_job.chief.environment.priority).to.be(0);
                    expect(data.run.tf_job.chief.environment.restart_policy).to.be.a('string');
                    expect(data.run.tf_job.chief.environment.restart_policy).to.be("");
                  {
                    let dataCtr = data.run.tf_job.chief.connections;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.run.tf_job.chief.volumes;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1Volume);
                    }
                  }
                  {
                    let dataCtr = data.run.tf_job.chief.init;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1Init);
                      expect(data.artifacts).to.be.a(PolyaxonSdk.V1ArtifactsType);
                            expect(data.artifacts.connection).to.be.a('string');
                        expect(data.artifacts.connection).to.be("");
                        {
                          let dataCtr = data.artifacts.files;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.artifacts.dirs;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        expect(data.artifacts.init).to.be.a('boolean');
                        expect(data.artifacts.init).to.be(false);
                        expect(data.artifacts.workers).to.be.a('number');
                        expect(data.artifacts.workers).to.be(0);
                      expect(data.git).to.be.a(PolyaxonSdk.V1GitType);
                            expect(data.git.url).to.be.a('string');
                        expect(data.git.url).to.be("");
                        expect(data.git.revision).to.be.a('boolean');
                        expect(data.git.revision).to.be(false);
                        expect(data.git.connection).to.be.a('string');
                        expect(data.git.connection).to.be("");
                        expect(data.git.init).to.be.a('boolean');
                        expect(data.git.init).to.be(false);
                      expect(data.dockerfile).to.be.a(PolyaxonSdk.V1DockerfileType);
                            expect(data.dockerfile.image).to.be.a('string');
                        expect(data.dockerfile.image).to.be("");
                        {
                          let dataCtr = data.dockerfile.env;
                          expect(dataCtr).to.be.an(Object);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.dockerfile.path;
                          expect(dataCtr).to.be.an(Object);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.dockerfile.copy;
                          expect(dataCtr).to.be.an(Object);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.dockerfile.run;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        expect(data.dockerfile.lang_env).to.be.a('string');
                        expect(data.dockerfile.lang_env).to.be("");
                        expect(data.dockerfile.uid).to.be.a('number');
                        expect(data.dockerfile.uid).to.be(0);
                        expect(data.dockerfile.gid).to.be.a('number');
                        expect(data.dockerfile.gid).to.be(0);
                        expect(data.dockerfile.filename).to.be.a('string');
                        expect(data.dockerfile.filename).to.be("");
                        expect(data.dockerfile.workdir).to.be.a('string');
                        expect(data.dockerfile.workdir).to.be("");
                        expect(data.dockerfile.workdir_path).to.be.a('string');
                        expect(data.dockerfile.workdir_path).to.be("");
                        expect(data.dockerfile.shell).to.be.a('string');
                        expect(data.dockerfile.shell).to.be("");
                      expect(data.connection).to.be.a('string');
                      expect(data.connection).to.be("");
                      expect(data.path).to.be.a('string');
                      expect(data.path).to.be("");
                      expect(data.container).to.be.a(PolyaxonSdk.V1Container);
              
                    }
                  }
                  {
                    let dataCtr = data.run.tf_job.chief.sidecars;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1Container);
                    }
                  }
                  expect(data.run.tf_job.chief.container).to.be.a(PolyaxonSdk.V1Container);
          
                expect(data.run.tf_job.ps).to.be.a(PolyaxonSdk.V1KFReplica);
                      expect(data.run.tf_job.ps.replicas).to.be.a('number');
                  expect(data.run.tf_job.ps.replicas).to.be(0);
                  expect(data.run.tf_job.ps.environment).to.be.a(PolyaxonSdk.V1Environment);
                        {
                      let dataCtr = data.run.tf_job.ps.environment.labels;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.tf_job.ps.environment.annotations;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.tf_job.ps.environment.node_selector;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.run.tf_job.ps.environment.affinity).to.be.a(PolyaxonSdk.V1Affinity);
                        {
                      let dataCtr = data.run.tf_job.ps.environment.tolerations;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1Toleration);
                      }
                    }
                    expect(data.run.tf_job.ps.environment.node_name).to.be.a('string');
                    expect(data.run.tf_job.ps.environment.node_name).to.be("");
                    expect(data.run.tf_job.ps.environment.service_account_name).to.be.a('string');
                    expect(data.run.tf_job.ps.environment.service_account_name).to.be("");
                    {
                      let dataCtr = data.run.tf_job.ps.environment.host_aliases;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1HostAlias);
                      }
                    }
                    expect(data.run.tf_job.ps.environment.security_context).to.be.a(PolyaxonSdk.V1PodSecurityContext);
                        {
                      let dataCtr = data.run.tf_job.ps.environment.image_pull_secrets;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.run.tf_job.ps.environment.host_network).to.be.a('boolean');
                    expect(data.run.tf_job.ps.environment.host_network).to.be(false);
                    expect(data.run.tf_job.ps.environment.dns_policy).to.be.a('string');
                    expect(data.run.tf_job.ps.environment.dns_policy).to.be("");
                    expect(data.run.tf_job.ps.environment.dns_config).to.be.a(PolyaxonSdk.V1PodDNSConfig);
                        expect(data.run.tf_job.ps.environment.scheduler_name).to.be.a('string');
                    expect(data.run.tf_job.ps.environment.scheduler_name).to.be("");
                    expect(data.run.tf_job.ps.environment.priority_class_name).to.be.a('string');
                    expect(data.run.tf_job.ps.environment.priority_class_name).to.be("");
                    expect(data.run.tf_job.ps.environment.priority).to.be.a('number');
                    expect(data.run.tf_job.ps.environment.priority).to.be(0);
                    expect(data.run.tf_job.ps.environment.restart_policy).to.be.a('string');
                    expect(data.run.tf_job.ps.environment.restart_policy).to.be("");
                  {
                    let dataCtr = data.run.tf_job.ps.connections;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.run.tf_job.ps.volumes;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1Volume);
                    }
                  }
                  {
                    let dataCtr = data.run.tf_job.ps.init;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1Init);
                      expect(data.artifacts).to.be.a(PolyaxonSdk.V1ArtifactsType);
                            expect(data.artifacts.connection).to.be.a('string');
                        expect(data.artifacts.connection).to.be("");
                        {
                          let dataCtr = data.artifacts.files;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.artifacts.dirs;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        expect(data.artifacts.init).to.be.a('boolean');
                        expect(data.artifacts.init).to.be(false);
                        expect(data.artifacts.workers).to.be.a('number');
                        expect(data.artifacts.workers).to.be(0);
                      expect(data.git).to.be.a(PolyaxonSdk.V1GitType);
                            expect(data.git.url).to.be.a('string');
                        expect(data.git.url).to.be("");
                        expect(data.git.revision).to.be.a('boolean');
                        expect(data.git.revision).to.be(false);
                        expect(data.git.connection).to.be.a('string');
                        expect(data.git.connection).to.be("");
                        expect(data.git.init).to.be.a('boolean');
                        expect(data.git.init).to.be(false);
                      expect(data.dockerfile).to.be.a(PolyaxonSdk.V1DockerfileType);
                            expect(data.dockerfile.image).to.be.a('string');
                        expect(data.dockerfile.image).to.be("");
                        {
                          let dataCtr = data.dockerfile.env;
                          expect(dataCtr).to.be.an(Object);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.dockerfile.path;
                          expect(dataCtr).to.be.an(Object);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.dockerfile.copy;
                          expect(dataCtr).to.be.an(Object);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.dockerfile.run;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        expect(data.dockerfile.lang_env).to.be.a('string');
                        expect(data.dockerfile.lang_env).to.be("");
                        expect(data.dockerfile.uid).to.be.a('number');
                        expect(data.dockerfile.uid).to.be(0);
                        expect(data.dockerfile.gid).to.be.a('number');
                        expect(data.dockerfile.gid).to.be(0);
                        expect(data.dockerfile.filename).to.be.a('string');
                        expect(data.dockerfile.filename).to.be("");
                        expect(data.dockerfile.workdir).to.be.a('string');
                        expect(data.dockerfile.workdir).to.be("");
                        expect(data.dockerfile.workdir_path).to.be.a('string');
                        expect(data.dockerfile.workdir_path).to.be("");
                        expect(data.dockerfile.shell).to.be.a('string');
                        expect(data.dockerfile.shell).to.be("");
                      expect(data.connection).to.be.a('string');
                      expect(data.connection).to.be("");
                      expect(data.path).to.be.a('string');
                      expect(data.path).to.be("");
                      expect(data.container).to.be.a(PolyaxonSdk.V1Container);
              
                    }
                  }
                  {
                    let dataCtr = data.run.tf_job.ps.sidecars;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1Container);
                    }
                  }
                  expect(data.run.tf_job.ps.container).to.be.a(PolyaxonSdk.V1Container);
          
                expect(data.run.tf_job.worker).to.be.a(PolyaxonSdk.V1KFReplica);
                      expect(data.run.tf_job.worker.replicas).to.be.a('number');
                  expect(data.run.tf_job.worker.replicas).to.be(0);
                  expect(data.run.tf_job.worker.environment).to.be.a(PolyaxonSdk.V1Environment);
                        {
                      let dataCtr = data.run.tf_job.worker.environment.labels;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.tf_job.worker.environment.annotations;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.tf_job.worker.environment.node_selector;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.run.tf_job.worker.environment.affinity).to.be.a(PolyaxonSdk.V1Affinity);
                        {
                      let dataCtr = data.run.tf_job.worker.environment.tolerations;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1Toleration);
                      }
                    }
                    expect(data.run.tf_job.worker.environment.node_name).to.be.a('string');
                    expect(data.run.tf_job.worker.environment.node_name).to.be("");
                    expect(data.run.tf_job.worker.environment.service_account_name).to.be.a('string');
                    expect(data.run.tf_job.worker.environment.service_account_name).to.be("");
                    {
                      let dataCtr = data.run.tf_job.worker.environment.host_aliases;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1HostAlias);
                      }
                    }
                    expect(data.run.tf_job.worker.environment.security_context).to.be.a(PolyaxonSdk.V1PodSecurityContext);
                        {
                      let dataCtr = data.run.tf_job.worker.environment.image_pull_secrets;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.run.tf_job.worker.environment.host_network).to.be.a('boolean');
                    expect(data.run.tf_job.worker.environment.host_network).to.be(false);
                    expect(data.run.tf_job.worker.environment.dns_policy).to.be.a('string');
                    expect(data.run.tf_job.worker.environment.dns_policy).to.be("");
                    expect(data.run.tf_job.worker.environment.dns_config).to.be.a(PolyaxonSdk.V1PodDNSConfig);
                        expect(data.run.tf_job.worker.environment.scheduler_name).to.be.a('string');
                    expect(data.run.tf_job.worker.environment.scheduler_name).to.be("");
                    expect(data.run.tf_job.worker.environment.priority_class_name).to.be.a('string');
                    expect(data.run.tf_job.worker.environment.priority_class_name).to.be("");
                    expect(data.run.tf_job.worker.environment.priority).to.be.a('number');
                    expect(data.run.tf_job.worker.environment.priority).to.be(0);
                    expect(data.run.tf_job.worker.environment.restart_policy).to.be.a('string');
                    expect(data.run.tf_job.worker.environment.restart_policy).to.be("");
                  {
                    let dataCtr = data.run.tf_job.worker.connections;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.run.tf_job.worker.volumes;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1Volume);
                    }
                  }
                  {
                    let dataCtr = data.run.tf_job.worker.init;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1Init);
                      expect(data.artifacts).to.be.a(PolyaxonSdk.V1ArtifactsType);
                            expect(data.artifacts.connection).to.be.a('string');
                        expect(data.artifacts.connection).to.be("");
                        {
                          let dataCtr = data.artifacts.files;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.artifacts.dirs;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        expect(data.artifacts.init).to.be.a('boolean');
                        expect(data.artifacts.init).to.be(false);
                        expect(data.artifacts.workers).to.be.a('number');
                        expect(data.artifacts.workers).to.be(0);
                      expect(data.git).to.be.a(PolyaxonSdk.V1GitType);
                            expect(data.git.url).to.be.a('string');
                        expect(data.git.url).to.be("");
                        expect(data.git.revision).to.be.a('boolean');
                        expect(data.git.revision).to.be(false);
                        expect(data.git.connection).to.be.a('string');
                        expect(data.git.connection).to.be("");
                        expect(data.git.init).to.be.a('boolean');
                        expect(data.git.init).to.be(false);
                      expect(data.dockerfile).to.be.a(PolyaxonSdk.V1DockerfileType);
                            expect(data.dockerfile.image).to.be.a('string');
                        expect(data.dockerfile.image).to.be("");
                        {
                          let dataCtr = data.dockerfile.env;
                          expect(dataCtr).to.be.an(Object);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.dockerfile.path;
                          expect(dataCtr).to.be.an(Object);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.dockerfile.copy;
                          expect(dataCtr).to.be.an(Object);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.dockerfile.run;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        expect(data.dockerfile.lang_env).to.be.a('string');
                        expect(data.dockerfile.lang_env).to.be("");
                        expect(data.dockerfile.uid).to.be.a('number');
                        expect(data.dockerfile.uid).to.be(0);
                        expect(data.dockerfile.gid).to.be.a('number');
                        expect(data.dockerfile.gid).to.be(0);
                        expect(data.dockerfile.filename).to.be.a('string');
                        expect(data.dockerfile.filename).to.be("");
                        expect(data.dockerfile.workdir).to.be.a('string');
                        expect(data.dockerfile.workdir).to.be("");
                        expect(data.dockerfile.workdir_path).to.be.a('string');
                        expect(data.dockerfile.workdir_path).to.be("");
                        expect(data.dockerfile.shell).to.be.a('string');
                        expect(data.dockerfile.shell).to.be("");
                      expect(data.connection).to.be.a('string');
                      expect(data.connection).to.be("");
                      expect(data.path).to.be.a('string');
                      expect(data.path).to.be("");
                      expect(data.container).to.be.a(PolyaxonSdk.V1Container);
              
                    }
                  }
                  {
                    let dataCtr = data.run.tf_job.worker.sidecars;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1Container);
                    }
                  }
                  expect(data.run.tf_job.worker.container).to.be.a(PolyaxonSdk.V1Container);
          
                expect(data.run.tf_job.evaluator).to.be.a(PolyaxonSdk.V1KFReplica);
                      expect(data.run.tf_job.evaluator.replicas).to.be.a('number');
                  expect(data.run.tf_job.evaluator.replicas).to.be(0);
                  expect(data.run.tf_job.evaluator.environment).to.be.a(PolyaxonSdk.V1Environment);
                        {
                      let dataCtr = data.run.tf_job.evaluator.environment.labels;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.tf_job.evaluator.environment.annotations;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.tf_job.evaluator.environment.node_selector;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.run.tf_job.evaluator.environment.affinity).to.be.a(PolyaxonSdk.V1Affinity);
                        {
                      let dataCtr = data.run.tf_job.evaluator.environment.tolerations;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1Toleration);
                      }
                    }
                    expect(data.run.tf_job.evaluator.environment.node_name).to.be.a('string');
                    expect(data.run.tf_job.evaluator.environment.node_name).to.be("");
                    expect(data.run.tf_job.evaluator.environment.service_account_name).to.be.a('string');
                    expect(data.run.tf_job.evaluator.environment.service_account_name).to.be("");
                    {
                      let dataCtr = data.run.tf_job.evaluator.environment.host_aliases;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1HostAlias);
                      }
                    }
                    expect(data.run.tf_job.evaluator.environment.security_context).to.be.a(PolyaxonSdk.V1PodSecurityContext);
                        {
                      let dataCtr = data.run.tf_job.evaluator.environment.image_pull_secrets;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.run.tf_job.evaluator.environment.host_network).to.be.a('boolean');
                    expect(data.run.tf_job.evaluator.environment.host_network).to.be(false);
                    expect(data.run.tf_job.evaluator.environment.dns_policy).to.be.a('string');
                    expect(data.run.tf_job.evaluator.environment.dns_policy).to.be("");
                    expect(data.run.tf_job.evaluator.environment.dns_config).to.be.a(PolyaxonSdk.V1PodDNSConfig);
                        expect(data.run.tf_job.evaluator.environment.scheduler_name).to.be.a('string');
                    expect(data.run.tf_job.evaluator.environment.scheduler_name).to.be("");
                    expect(data.run.tf_job.evaluator.environment.priority_class_name).to.be.a('string');
                    expect(data.run.tf_job.evaluator.environment.priority_class_name).to.be("");
                    expect(data.run.tf_job.evaluator.environment.priority).to.be.a('number');
                    expect(data.run.tf_job.evaluator.environment.priority).to.be(0);
                    expect(data.run.tf_job.evaluator.environment.restart_policy).to.be.a('string');
                    expect(data.run.tf_job.evaluator.environment.restart_policy).to.be("");
                  {
                    let dataCtr = data.run.tf_job.evaluator.connections;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.run.tf_job.evaluator.volumes;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1Volume);
                    }
                  }
                  {
                    let dataCtr = data.run.tf_job.evaluator.init;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1Init);
                      expect(data.artifacts).to.be.a(PolyaxonSdk.V1ArtifactsType);
                            expect(data.artifacts.connection).to.be.a('string');
                        expect(data.artifacts.connection).to.be("");
                        {
                          let dataCtr = data.artifacts.files;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.artifacts.dirs;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        expect(data.artifacts.init).to.be.a('boolean');
                        expect(data.artifacts.init).to.be(false);
                        expect(data.artifacts.workers).to.be.a('number');
                        expect(data.artifacts.workers).to.be(0);
                      expect(data.git).to.be.a(PolyaxonSdk.V1GitType);
                            expect(data.git.url).to.be.a('string');
                        expect(data.git.url).to.be("");
                        expect(data.git.revision).to.be.a('boolean');
                        expect(data.git.revision).to.be(false);
                        expect(data.git.connection).to.be.a('string');
                        expect(data.git.connection).to.be("");
                        expect(data.git.init).to.be.a('boolean');
                        expect(data.git.init).to.be(false);
                      expect(data.dockerfile).to.be.a(PolyaxonSdk.V1DockerfileType);
                            expect(data.dockerfile.image).to.be.a('string');
                        expect(data.dockerfile.image).to.be("");
                        {
                          let dataCtr = data.dockerfile.env;
                          expect(dataCtr).to.be.an(Object);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.dockerfile.path;
                          expect(dataCtr).to.be.an(Object);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.dockerfile.copy;
                          expect(dataCtr).to.be.an(Object);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.dockerfile.run;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        expect(data.dockerfile.lang_env).to.be.a('string');
                        expect(data.dockerfile.lang_env).to.be("");
                        expect(data.dockerfile.uid).to.be.a('number');
                        expect(data.dockerfile.uid).to.be(0);
                        expect(data.dockerfile.gid).to.be.a('number');
                        expect(data.dockerfile.gid).to.be(0);
                        expect(data.dockerfile.filename).to.be.a('string');
                        expect(data.dockerfile.filename).to.be("");
                        expect(data.dockerfile.workdir).to.be.a('string');
                        expect(data.dockerfile.workdir).to.be("");
                        expect(data.dockerfile.workdir_path).to.be.a('string');
                        expect(data.dockerfile.workdir_path).to.be("");
                        expect(data.dockerfile.shell).to.be.a('string');
                        expect(data.dockerfile.shell).to.be("");
                      expect(data.connection).to.be.a('string');
                      expect(data.connection).to.be("");
                      expect(data.path).to.be.a('string');
                      expect(data.path).to.be("");
                      expect(data.container).to.be.a(PolyaxonSdk.V1Container);
              
                    }
                  }
                  {
                    let dataCtr = data.run.tf_job.evaluator.sidecars;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1Container);
                    }
                  }
                  expect(data.run.tf_job.evaluator.container).to.be.a(PolyaxonSdk.V1Container);
          
              expect(data.run.pytorch_job).to.be.a(PolyaxonSdk.V1PytorchJob);
                    expect(data.run.pytorch_job.kind).to.be.a('string');
                expect(data.run.pytorch_job.kind).to.be("");
                expect(data.run.pytorch_job.cleanPodPolicy).to.be.a(PolyaxonSdk.V1CleanPodPolicy);
                    expect(data.run.pytorch_job.master).to.be.a(PolyaxonSdk.V1KFReplica);
                      expect(data.run.pytorch_job.master.replicas).to.be.a('number');
                  expect(data.run.pytorch_job.master.replicas).to.be(0);
                  expect(data.run.pytorch_job.master.environment).to.be.a(PolyaxonSdk.V1Environment);
                        {
                      let dataCtr = data.run.pytorch_job.master.environment.labels;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.pytorch_job.master.environment.annotations;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.pytorch_job.master.environment.node_selector;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.run.pytorch_job.master.environment.affinity).to.be.a(PolyaxonSdk.V1Affinity);
                        {
                      let dataCtr = data.run.pytorch_job.master.environment.tolerations;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1Toleration);
                      }
                    }
                    expect(data.run.pytorch_job.master.environment.node_name).to.be.a('string');
                    expect(data.run.pytorch_job.master.environment.node_name).to.be("");
                    expect(data.run.pytorch_job.master.environment.service_account_name).to.be.a('string');
                    expect(data.run.pytorch_job.master.environment.service_account_name).to.be("");
                    {
                      let dataCtr = data.run.pytorch_job.master.environment.host_aliases;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1HostAlias);
                      }
                    }
                    expect(data.run.pytorch_job.master.environment.security_context).to.be.a(PolyaxonSdk.V1PodSecurityContext);
                        {
                      let dataCtr = data.run.pytorch_job.master.environment.image_pull_secrets;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.run.pytorch_job.master.environment.host_network).to.be.a('boolean');
                    expect(data.run.pytorch_job.master.environment.host_network).to.be(false);
                    expect(data.run.pytorch_job.master.environment.dns_policy).to.be.a('string');
                    expect(data.run.pytorch_job.master.environment.dns_policy).to.be("");
                    expect(data.run.pytorch_job.master.environment.dns_config).to.be.a(PolyaxonSdk.V1PodDNSConfig);
                        expect(data.run.pytorch_job.master.environment.scheduler_name).to.be.a('string');
                    expect(data.run.pytorch_job.master.environment.scheduler_name).to.be("");
                    expect(data.run.pytorch_job.master.environment.priority_class_name).to.be.a('string');
                    expect(data.run.pytorch_job.master.environment.priority_class_name).to.be("");
                    expect(data.run.pytorch_job.master.environment.priority).to.be.a('number');
                    expect(data.run.pytorch_job.master.environment.priority).to.be(0);
                    expect(data.run.pytorch_job.master.environment.restart_policy).to.be.a('string');
                    expect(data.run.pytorch_job.master.environment.restart_policy).to.be("");
                  {
                    let dataCtr = data.run.pytorch_job.master.connections;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.run.pytorch_job.master.volumes;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1Volume);
                    }
                  }
                  {
                    let dataCtr = data.run.pytorch_job.master.init;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1Init);
                      expect(data.artifacts).to.be.a(PolyaxonSdk.V1ArtifactsType);
                            expect(data.artifacts.connection).to.be.a('string');
                        expect(data.artifacts.connection).to.be("");
                        {
                          let dataCtr = data.artifacts.files;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.artifacts.dirs;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        expect(data.artifacts.init).to.be.a('boolean');
                        expect(data.artifacts.init).to.be(false);
                        expect(data.artifacts.workers).to.be.a('number');
                        expect(data.artifacts.workers).to.be(0);
                      expect(data.git).to.be.a(PolyaxonSdk.V1GitType);
                            expect(data.git.url).to.be.a('string');
                        expect(data.git.url).to.be("");
                        expect(data.git.revision).to.be.a('boolean');
                        expect(data.git.revision).to.be(false);
                        expect(data.git.connection).to.be.a('string');
                        expect(data.git.connection).to.be("");
                        expect(data.git.init).to.be.a('boolean');
                        expect(data.git.init).to.be(false);
                      expect(data.dockerfile).to.be.a(PolyaxonSdk.V1DockerfileType);
                            expect(data.dockerfile.image).to.be.a('string');
                        expect(data.dockerfile.image).to.be("");
                        {
                          let dataCtr = data.dockerfile.env;
                          expect(dataCtr).to.be.an(Object);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.dockerfile.path;
                          expect(dataCtr).to.be.an(Object);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.dockerfile.copy;
                          expect(dataCtr).to.be.an(Object);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.dockerfile.run;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        expect(data.dockerfile.lang_env).to.be.a('string');
                        expect(data.dockerfile.lang_env).to.be("");
                        expect(data.dockerfile.uid).to.be.a('number');
                        expect(data.dockerfile.uid).to.be(0);
                        expect(data.dockerfile.gid).to.be.a('number');
                        expect(data.dockerfile.gid).to.be(0);
                        expect(data.dockerfile.filename).to.be.a('string');
                        expect(data.dockerfile.filename).to.be("");
                        expect(data.dockerfile.workdir).to.be.a('string');
                        expect(data.dockerfile.workdir).to.be("");
                        expect(data.dockerfile.workdir_path).to.be.a('string');
                        expect(data.dockerfile.workdir_path).to.be("");
                        expect(data.dockerfile.shell).to.be.a('string');
                        expect(data.dockerfile.shell).to.be("");
                      expect(data.connection).to.be.a('string');
                      expect(data.connection).to.be("");
                      expect(data.path).to.be.a('string');
                      expect(data.path).to.be("");
                      expect(data.container).to.be.a(PolyaxonSdk.V1Container);
              
                    }
                  }
                  {
                    let dataCtr = data.run.pytorch_job.master.sidecars;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1Container);
                    }
                  }
                  expect(data.run.pytorch_job.master.container).to.be.a(PolyaxonSdk.V1Container);
          
                expect(data.run.pytorch_job.worker).to.be.a(PolyaxonSdk.V1KFReplica);
                      expect(data.run.pytorch_job.worker.replicas).to.be.a('number');
                  expect(data.run.pytorch_job.worker.replicas).to.be(0);
                  expect(data.run.pytorch_job.worker.environment).to.be.a(PolyaxonSdk.V1Environment);
                        {
                      let dataCtr = data.run.pytorch_job.worker.environment.labels;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.pytorch_job.worker.environment.annotations;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.pytorch_job.worker.environment.node_selector;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.run.pytorch_job.worker.environment.affinity).to.be.a(PolyaxonSdk.V1Affinity);
                        {
                      let dataCtr = data.run.pytorch_job.worker.environment.tolerations;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1Toleration);
                      }
                    }
                    expect(data.run.pytorch_job.worker.environment.node_name).to.be.a('string');
                    expect(data.run.pytorch_job.worker.environment.node_name).to.be("");
                    expect(data.run.pytorch_job.worker.environment.service_account_name).to.be.a('string');
                    expect(data.run.pytorch_job.worker.environment.service_account_name).to.be("");
                    {
                      let dataCtr = data.run.pytorch_job.worker.environment.host_aliases;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1HostAlias);
                      }
                    }
                    expect(data.run.pytorch_job.worker.environment.security_context).to.be.a(PolyaxonSdk.V1PodSecurityContext);
                        {
                      let dataCtr = data.run.pytorch_job.worker.environment.image_pull_secrets;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.run.pytorch_job.worker.environment.host_network).to.be.a('boolean');
                    expect(data.run.pytorch_job.worker.environment.host_network).to.be(false);
                    expect(data.run.pytorch_job.worker.environment.dns_policy).to.be.a('string');
                    expect(data.run.pytorch_job.worker.environment.dns_policy).to.be("");
                    expect(data.run.pytorch_job.worker.environment.dns_config).to.be.a(PolyaxonSdk.V1PodDNSConfig);
                        expect(data.run.pytorch_job.worker.environment.scheduler_name).to.be.a('string');
                    expect(data.run.pytorch_job.worker.environment.scheduler_name).to.be("");
                    expect(data.run.pytorch_job.worker.environment.priority_class_name).to.be.a('string');
                    expect(data.run.pytorch_job.worker.environment.priority_class_name).to.be("");
                    expect(data.run.pytorch_job.worker.environment.priority).to.be.a('number');
                    expect(data.run.pytorch_job.worker.environment.priority).to.be(0);
                    expect(data.run.pytorch_job.worker.environment.restart_policy).to.be.a('string');
                    expect(data.run.pytorch_job.worker.environment.restart_policy).to.be("");
                  {
                    let dataCtr = data.run.pytorch_job.worker.connections;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.run.pytorch_job.worker.volumes;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1Volume);
                    }
                  }
                  {
                    let dataCtr = data.run.pytorch_job.worker.init;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1Init);
                      expect(data.artifacts).to.be.a(PolyaxonSdk.V1ArtifactsType);
                            expect(data.artifacts.connection).to.be.a('string');
                        expect(data.artifacts.connection).to.be("");
                        {
                          let dataCtr = data.artifacts.files;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.artifacts.dirs;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        expect(data.artifacts.init).to.be.a('boolean');
                        expect(data.artifacts.init).to.be(false);
                        expect(data.artifacts.workers).to.be.a('number');
                        expect(data.artifacts.workers).to.be(0);
                      expect(data.git).to.be.a(PolyaxonSdk.V1GitType);
                            expect(data.git.url).to.be.a('string');
                        expect(data.git.url).to.be("");
                        expect(data.git.revision).to.be.a('boolean');
                        expect(data.git.revision).to.be(false);
                        expect(data.git.connection).to.be.a('string');
                        expect(data.git.connection).to.be("");
                        expect(data.git.init).to.be.a('boolean');
                        expect(data.git.init).to.be(false);
                      expect(data.dockerfile).to.be.a(PolyaxonSdk.V1DockerfileType);
                            expect(data.dockerfile.image).to.be.a('string');
                        expect(data.dockerfile.image).to.be("");
                        {
                          let dataCtr = data.dockerfile.env;
                          expect(dataCtr).to.be.an(Object);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.dockerfile.path;
                          expect(dataCtr).to.be.an(Object);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.dockerfile.copy;
                          expect(dataCtr).to.be.an(Object);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.dockerfile.run;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        expect(data.dockerfile.lang_env).to.be.a('string');
                        expect(data.dockerfile.lang_env).to.be("");
                        expect(data.dockerfile.uid).to.be.a('number');
                        expect(data.dockerfile.uid).to.be(0);
                        expect(data.dockerfile.gid).to.be.a('number');
                        expect(data.dockerfile.gid).to.be(0);
                        expect(data.dockerfile.filename).to.be.a('string');
                        expect(data.dockerfile.filename).to.be("");
                        expect(data.dockerfile.workdir).to.be.a('string');
                        expect(data.dockerfile.workdir).to.be("");
                        expect(data.dockerfile.workdir_path).to.be.a('string');
                        expect(data.dockerfile.workdir_path).to.be("");
                        expect(data.dockerfile.shell).to.be.a('string');
                        expect(data.dockerfile.shell).to.be("");
                      expect(data.connection).to.be.a('string');
                      expect(data.connection).to.be("");
                      expect(data.path).to.be.a('string');
                      expect(data.path).to.be("");
                      expect(data.container).to.be.a(PolyaxonSdk.V1Container);
              
                    }
                  }
                  {
                    let dataCtr = data.run.pytorch_job.worker.sidecars;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1Container);
                    }
                  }
                  expect(data.run.pytorch_job.worker.container).to.be.a(PolyaxonSdk.V1Container);
          
              expect(data.run.mpi_job).to.be.a(PolyaxonSdk.V1MPIJob);
                    expect(data.run.mpi_job.kind).to.be.a('string');
                expect(data.run.mpi_job.kind).to.be("");
                expect(data.run.mpi_job.cleanPodPolicy).to.be.a(PolyaxonSdk.V1CleanPodPolicy);
                    expect(data.run.mpi_job.slots_per_worker).to.be.a('number');
                expect(data.run.mpi_job.slots_per_worker).to.be(0);
                expect(data.run.mpi_job.launcher).to.be.a(PolyaxonSdk.V1KFReplica);
                      expect(data.run.mpi_job.launcher.replicas).to.be.a('number');
                  expect(data.run.mpi_job.launcher.replicas).to.be(0);
                  expect(data.run.mpi_job.launcher.environment).to.be.a(PolyaxonSdk.V1Environment);
                        {
                      let dataCtr = data.run.mpi_job.launcher.environment.labels;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.mpi_job.launcher.environment.annotations;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.mpi_job.launcher.environment.node_selector;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.run.mpi_job.launcher.environment.affinity).to.be.a(PolyaxonSdk.V1Affinity);
                        {
                      let dataCtr = data.run.mpi_job.launcher.environment.tolerations;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1Toleration);
                      }
                    }
                    expect(data.run.mpi_job.launcher.environment.node_name).to.be.a('string');
                    expect(data.run.mpi_job.launcher.environment.node_name).to.be("");
                    expect(data.run.mpi_job.launcher.environment.service_account_name).to.be.a('string');
                    expect(data.run.mpi_job.launcher.environment.service_account_name).to.be("");
                    {
                      let dataCtr = data.run.mpi_job.launcher.environment.host_aliases;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1HostAlias);
                      }
                    }
                    expect(data.run.mpi_job.launcher.environment.security_context).to.be.a(PolyaxonSdk.V1PodSecurityContext);
                        {
                      let dataCtr = data.run.mpi_job.launcher.environment.image_pull_secrets;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.run.mpi_job.launcher.environment.host_network).to.be.a('boolean');
                    expect(data.run.mpi_job.launcher.environment.host_network).to.be(false);
                    expect(data.run.mpi_job.launcher.environment.dns_policy).to.be.a('string');
                    expect(data.run.mpi_job.launcher.environment.dns_policy).to.be("");
                    expect(data.run.mpi_job.launcher.environment.dns_config).to.be.a(PolyaxonSdk.V1PodDNSConfig);
                        expect(data.run.mpi_job.launcher.environment.scheduler_name).to.be.a('string');
                    expect(data.run.mpi_job.launcher.environment.scheduler_name).to.be("");
                    expect(data.run.mpi_job.launcher.environment.priority_class_name).to.be.a('string');
                    expect(data.run.mpi_job.launcher.environment.priority_class_name).to.be("");
                    expect(data.run.mpi_job.launcher.environment.priority).to.be.a('number');
                    expect(data.run.mpi_job.launcher.environment.priority).to.be(0);
                    expect(data.run.mpi_job.launcher.environment.restart_policy).to.be.a('string');
                    expect(data.run.mpi_job.launcher.environment.restart_policy).to.be("");
                  {
                    let dataCtr = data.run.mpi_job.launcher.connections;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.run.mpi_job.launcher.volumes;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1Volume);
                    }
                  }
                  {
                    let dataCtr = data.run.mpi_job.launcher.init;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1Init);
                      expect(data.artifacts).to.be.a(PolyaxonSdk.V1ArtifactsType);
                            expect(data.artifacts.connection).to.be.a('string');
                        expect(data.artifacts.connection).to.be("");
                        {
                          let dataCtr = data.artifacts.files;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.artifacts.dirs;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        expect(data.artifacts.init).to.be.a('boolean');
                        expect(data.artifacts.init).to.be(false);
                        expect(data.artifacts.workers).to.be.a('number');
                        expect(data.artifacts.workers).to.be(0);
                      expect(data.git).to.be.a(PolyaxonSdk.V1GitType);
                            expect(data.git.url).to.be.a('string');
                        expect(data.git.url).to.be("");
                        expect(data.git.revision).to.be.a('boolean');
                        expect(data.git.revision).to.be(false);
                        expect(data.git.connection).to.be.a('string');
                        expect(data.git.connection).to.be("");
                        expect(data.git.init).to.be.a('boolean');
                        expect(data.git.init).to.be(false);
                      expect(data.dockerfile).to.be.a(PolyaxonSdk.V1DockerfileType);
                            expect(data.dockerfile.image).to.be.a('string');
                        expect(data.dockerfile.image).to.be("");
                        {
                          let dataCtr = data.dockerfile.env;
                          expect(dataCtr).to.be.an(Object);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.dockerfile.path;
                          expect(dataCtr).to.be.an(Object);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.dockerfile.copy;
                          expect(dataCtr).to.be.an(Object);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.dockerfile.run;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        expect(data.dockerfile.lang_env).to.be.a('string');
                        expect(data.dockerfile.lang_env).to.be("");
                        expect(data.dockerfile.uid).to.be.a('number');
                        expect(data.dockerfile.uid).to.be(0);
                        expect(data.dockerfile.gid).to.be.a('number');
                        expect(data.dockerfile.gid).to.be(0);
                        expect(data.dockerfile.filename).to.be.a('string');
                        expect(data.dockerfile.filename).to.be("");
                        expect(data.dockerfile.workdir).to.be.a('string');
                        expect(data.dockerfile.workdir).to.be("");
                        expect(data.dockerfile.workdir_path).to.be.a('string');
                        expect(data.dockerfile.workdir_path).to.be("");
                        expect(data.dockerfile.shell).to.be.a('string');
                        expect(data.dockerfile.shell).to.be("");
                      expect(data.connection).to.be.a('string');
                      expect(data.connection).to.be("");
                      expect(data.path).to.be.a('string');
                      expect(data.path).to.be("");
                      expect(data.container).to.be.a(PolyaxonSdk.V1Container);
              
                    }
                  }
                  {
                    let dataCtr = data.run.mpi_job.launcher.sidecars;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1Container);
                    }
                  }
                  expect(data.run.mpi_job.launcher.container).to.be.a(PolyaxonSdk.V1Container);
          
                expect(data.run.mpi_job.worker).to.be.a(PolyaxonSdk.V1KFReplica);
                      expect(data.run.mpi_job.worker.replicas).to.be.a('number');
                  expect(data.run.mpi_job.worker.replicas).to.be(0);
                  expect(data.run.mpi_job.worker.environment).to.be.a(PolyaxonSdk.V1Environment);
                        {
                      let dataCtr = data.run.mpi_job.worker.environment.labels;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.mpi_job.worker.environment.annotations;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.mpi_job.worker.environment.node_selector;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.run.mpi_job.worker.environment.affinity).to.be.a(PolyaxonSdk.V1Affinity);
                        {
                      let dataCtr = data.run.mpi_job.worker.environment.tolerations;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1Toleration);
                      }
                    }
                    expect(data.run.mpi_job.worker.environment.node_name).to.be.a('string');
                    expect(data.run.mpi_job.worker.environment.node_name).to.be("");
                    expect(data.run.mpi_job.worker.environment.service_account_name).to.be.a('string');
                    expect(data.run.mpi_job.worker.environment.service_account_name).to.be("");
                    {
                      let dataCtr = data.run.mpi_job.worker.environment.host_aliases;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1HostAlias);
                      }
                    }
                    expect(data.run.mpi_job.worker.environment.security_context).to.be.a(PolyaxonSdk.V1PodSecurityContext);
                        {
                      let dataCtr = data.run.mpi_job.worker.environment.image_pull_secrets;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.run.mpi_job.worker.environment.host_network).to.be.a('boolean');
                    expect(data.run.mpi_job.worker.environment.host_network).to.be(false);
                    expect(data.run.mpi_job.worker.environment.dns_policy).to.be.a('string');
                    expect(data.run.mpi_job.worker.environment.dns_policy).to.be("");
                    expect(data.run.mpi_job.worker.environment.dns_config).to.be.a(PolyaxonSdk.V1PodDNSConfig);
                        expect(data.run.mpi_job.worker.environment.scheduler_name).to.be.a('string');
                    expect(data.run.mpi_job.worker.environment.scheduler_name).to.be("");
                    expect(data.run.mpi_job.worker.environment.priority_class_name).to.be.a('string');
                    expect(data.run.mpi_job.worker.environment.priority_class_name).to.be("");
                    expect(data.run.mpi_job.worker.environment.priority).to.be.a('number');
                    expect(data.run.mpi_job.worker.environment.priority).to.be(0);
                    expect(data.run.mpi_job.worker.environment.restart_policy).to.be.a('string');
                    expect(data.run.mpi_job.worker.environment.restart_policy).to.be("");
                  {
                    let dataCtr = data.run.mpi_job.worker.connections;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.run.mpi_job.worker.volumes;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1Volume);
                    }
                  }
                  {
                    let dataCtr = data.run.mpi_job.worker.init;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1Init);
                      expect(data.artifacts).to.be.a(PolyaxonSdk.V1ArtifactsType);
                            expect(data.artifacts.connection).to.be.a('string');
                        expect(data.artifacts.connection).to.be("");
                        {
                          let dataCtr = data.artifacts.files;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.artifacts.dirs;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        expect(data.artifacts.init).to.be.a('boolean');
                        expect(data.artifacts.init).to.be(false);
                        expect(data.artifacts.workers).to.be.a('number');
                        expect(data.artifacts.workers).to.be(0);
                      expect(data.git).to.be.a(PolyaxonSdk.V1GitType);
                            expect(data.git.url).to.be.a('string');
                        expect(data.git.url).to.be("");
                        expect(data.git.revision).to.be.a('boolean');
                        expect(data.git.revision).to.be(false);
                        expect(data.git.connection).to.be.a('string');
                        expect(data.git.connection).to.be("");
                        expect(data.git.init).to.be.a('boolean');
                        expect(data.git.init).to.be(false);
                      expect(data.dockerfile).to.be.a(PolyaxonSdk.V1DockerfileType);
                            expect(data.dockerfile.image).to.be.a('string');
                        expect(data.dockerfile.image).to.be("");
                        {
                          let dataCtr = data.dockerfile.env;
                          expect(dataCtr).to.be.an(Object);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.dockerfile.path;
                          expect(dataCtr).to.be.an(Object);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.dockerfile.copy;
                          expect(dataCtr).to.be.an(Object);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.dockerfile.run;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        expect(data.dockerfile.lang_env).to.be.a('string');
                        expect(data.dockerfile.lang_env).to.be("");
                        expect(data.dockerfile.uid).to.be.a('number');
                        expect(data.dockerfile.uid).to.be(0);
                        expect(data.dockerfile.gid).to.be.a('number');
                        expect(data.dockerfile.gid).to.be(0);
                        expect(data.dockerfile.filename).to.be.a('string');
                        expect(data.dockerfile.filename).to.be("");
                        expect(data.dockerfile.workdir).to.be.a('string');
                        expect(data.dockerfile.workdir).to.be("");
                        expect(data.dockerfile.workdir_path).to.be.a('string');
                        expect(data.dockerfile.workdir_path).to.be("");
                        expect(data.dockerfile.shell).to.be.a('string');
                        expect(data.dockerfile.shell).to.be("");
                      expect(data.connection).to.be.a('string');
                      expect(data.connection).to.be("");
                      expect(data.path).to.be.a('string');
                      expect(data.path).to.be("");
                      expect(data.container).to.be.a(PolyaxonSdk.V1Container);
              
                    }
                  }
                  {
                    let dataCtr = data.run.mpi_job.worker.sidecars;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1Container);
                    }
                  }
                  expect(data.run.mpi_job.worker.container).to.be.a(PolyaxonSdk.V1Container);
          
              expect(data.run.dask).to.be.a(PolyaxonSdk.V1Dask);
                    expect(data.run.dask.kind).to.be.a('string');
                expect(data.run.dask.kind).to.be("");
                expect(data.run.dask.scale).to.be.a('number');
                expect(data.run.dask.scale).to.be(0);
                expect(data.run.dask.adapt_min).to.be.a('number');
                expect(data.run.dask.adapt_min).to.be(0);
                expect(data.run.dask.adapt_max).to.be.a('number');
                expect(data.run.dask.adapt_max).to.be(0);
                expect(data.run.dask.adapt_interval).to.be.a('string');
                expect(data.run.dask.adapt_interval).to.be("");
                expect(data.run.dask.environment).to.be.a(PolyaxonSdk.V1Environment);
                      {
                    let dataCtr = data.run.dask.environment.labels;
                    expect(dataCtr).to.be.an(Object);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.run.dask.environment.annotations;
                    expect(dataCtr).to.be.an(Object);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.run.dask.environment.node_selector;
                    expect(dataCtr).to.be.an(Object);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.run.dask.environment.affinity).to.be.a(PolyaxonSdk.V1Affinity);
                      {
                    let dataCtr = data.run.dask.environment.tolerations;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1Toleration);
                    }
                  }
                  expect(data.run.dask.environment.node_name).to.be.a('string');
                  expect(data.run.dask.environment.node_name).to.be("");
                  expect(data.run.dask.environment.service_account_name).to.be.a('string');
                  expect(data.run.dask.environment.service_account_name).to.be("");
                  {
                    let dataCtr = data.run.dask.environment.host_aliases;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1HostAlias);
                    }
                  }
                  expect(data.run.dask.environment.security_context).to.be.a(PolyaxonSdk.V1PodSecurityContext);
                      {
                    let dataCtr = data.run.dask.environment.image_pull_secrets;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.run.dask.environment.host_network).to.be.a('boolean');
                  expect(data.run.dask.environment.host_network).to.be(false);
                  expect(data.run.dask.environment.dns_policy).to.be.a('string');
                  expect(data.run.dask.environment.dns_policy).to.be("");
                  expect(data.run.dask.environment.dns_config).to.be.a(PolyaxonSdk.V1PodDNSConfig);
                      expect(data.run.dask.environment.scheduler_name).to.be.a('string');
                  expect(data.run.dask.environment.scheduler_name).to.be("");
                  expect(data.run.dask.environment.priority_class_name).to.be.a('string');
                  expect(data.run.dask.environment.priority_class_name).to.be("");
                  expect(data.run.dask.environment.priority).to.be.a('number');
                  expect(data.run.dask.environment.priority).to.be(0);
                  expect(data.run.dask.environment.restart_policy).to.be.a('string');
                  expect(data.run.dask.environment.restart_policy).to.be("");
                {
                  let dataCtr = data.run.dask.connections;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.run.dask.volumes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PolyaxonSdk.V1Volume);
                  }
                }
                {
                  let dataCtr = data.run.dask.init;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PolyaxonSdk.V1Init);
                    expect(data.artifacts).to.be.a(PolyaxonSdk.V1ArtifactsType);
                          expect(data.artifacts.connection).to.be.a('string');
                      expect(data.artifacts.connection).to.be("");
                      {
                        let dataCtr = data.artifacts.files;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                      {
                        let dataCtr = data.artifacts.dirs;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                      expect(data.artifacts.init).to.be.a('boolean');
                      expect(data.artifacts.init).to.be(false);
                      expect(data.artifacts.workers).to.be.a('number');
                      expect(data.artifacts.workers).to.be(0);
                    expect(data.git).to.be.a(PolyaxonSdk.V1GitType);
                          expect(data.git.url).to.be.a('string');
                      expect(data.git.url).to.be("");
                      expect(data.git.revision).to.be.a('boolean');
                      expect(data.git.revision).to.be(false);
                      expect(data.git.connection).to.be.a('string');
                      expect(data.git.connection).to.be("");
                      expect(data.git.init).to.be.a('boolean');
                      expect(data.git.init).to.be(false);
                    expect(data.dockerfile).to.be.a(PolyaxonSdk.V1DockerfileType);
                          expect(data.dockerfile.image).to.be.a('string');
                      expect(data.dockerfile.image).to.be("");
                      {
                        let dataCtr = data.dockerfile.env;
                        expect(dataCtr).to.be.an(Object);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                      {
                        let dataCtr = data.dockerfile.path;
                        expect(dataCtr).to.be.an(Object);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                      {
                        let dataCtr = data.dockerfile.copy;
                        expect(dataCtr).to.be.an(Object);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                      {
                        let dataCtr = data.dockerfile.run;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                      expect(data.dockerfile.lang_env).to.be.a('string');
                      expect(data.dockerfile.lang_env).to.be("");
                      expect(data.dockerfile.uid).to.be.a('number');
                      expect(data.dockerfile.uid).to.be(0);
                      expect(data.dockerfile.gid).to.be.a('number');
                      expect(data.dockerfile.gid).to.be(0);
                      expect(data.dockerfile.filename).to.be.a('string');
                      expect(data.dockerfile.filename).to.be("");
                      expect(data.dockerfile.workdir).to.be.a('string');
                      expect(data.dockerfile.workdir).to.be("");
                      expect(data.dockerfile.workdir_path).to.be.a('string');
                      expect(data.dockerfile.workdir_path).to.be("");
                      expect(data.dockerfile.shell).to.be.a('string');
                      expect(data.dockerfile.shell).to.be("");
                    expect(data.connection).to.be.a('string');
                    expect(data.connection).to.be("");
                    expect(data.path).to.be.a('string');
                    expect(data.path).to.be("");
                    expect(data.container).to.be.a(PolyaxonSdk.V1Container);
            
                  }
                }
                {
                  let dataCtr = data.run.dask.sidecars;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PolyaxonSdk.V1Container);
                  }
                }
                expect(data.run.dask.container).to.be.a(PolyaxonSdk.V1Container);
        
              expect(data.run.spark).to.be.a(PolyaxonSdk.V1Spark);
                    expect(data.run.spark.kind).to.be.a('string');
                expect(data.run.spark.kind).to.be("");
                {
                  let dataCtr = data.run.spark.connections;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.run.spark.volumes;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PolyaxonSdk.V1Volume);
                  }
                }
                expect(data.run.spark.type).to.be.a(PolyaxonSdk.V1SparkType);
                    expect(data.run.spark.spark_version).to.be.a('string');
                expect(data.run.spark.spark_version).to.be("");
                expect(data.run.spark.python_version).to.be.a('string');
                expect(data.run.spark.python_version).to.be("");
                expect(data.run.spark.deploy_mode).to.be.a(PolyaxonSdk.SparkDeployMode);
                    expect(data.run.spark.main_class).to.be.a('string');
                expect(data.run.spark.main_class).to.be("");
                expect(data.run.spark.main_application_file).to.be.a('string');
                expect(data.run.spark.main_application_file).to.be("");
                {
                  let dataCtr = data.run.spark._arguments;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.run.spark.hadoop_conf;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.run.spark.spark_conf;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.run.spark.spark_config_map).to.be.a('string');
                expect(data.run.spark.spark_config_map).to.be("");
                expect(data.run.spark.hadoop_config_map).to.be.a('string');
                expect(data.run.spark.hadoop_config_map).to.be("");
                expect(data.run.spark.executor).to.be.a(PolyaxonSdk.V1SparkReplica);
                      expect(data.run.spark.executor.replicas).to.be.a('number');
                  expect(data.run.spark.executor.replicas).to.be(0);
                  expect(data.run.spark.executor.environment).to.be.a(PolyaxonSdk.V1Environment);
                        {
                      let dataCtr = data.run.spark.executor.environment.labels;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.spark.executor.environment.annotations;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.spark.executor.environment.node_selector;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.run.spark.executor.environment.affinity).to.be.a(PolyaxonSdk.V1Affinity);
                        {
                      let dataCtr = data.run.spark.executor.environment.tolerations;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1Toleration);
                      }
                    }
                    expect(data.run.spark.executor.environment.node_name).to.be.a('string');
                    expect(data.run.spark.executor.environment.node_name).to.be("");
                    expect(data.run.spark.executor.environment.service_account_name).to.be.a('string');
                    expect(data.run.spark.executor.environment.service_account_name).to.be("");
                    {
                      let dataCtr = data.run.spark.executor.environment.host_aliases;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1HostAlias);
                      }
                    }
                    expect(data.run.spark.executor.environment.security_context).to.be.a(PolyaxonSdk.V1PodSecurityContext);
                        {
                      let dataCtr = data.run.spark.executor.environment.image_pull_secrets;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.run.spark.executor.environment.host_network).to.be.a('boolean');
                    expect(data.run.spark.executor.environment.host_network).to.be(false);
                    expect(data.run.spark.executor.environment.dns_policy).to.be.a('string');
                    expect(data.run.spark.executor.environment.dns_policy).to.be("");
                    expect(data.run.spark.executor.environment.dns_config).to.be.a(PolyaxonSdk.V1PodDNSConfig);
                        expect(data.run.spark.executor.environment.scheduler_name).to.be.a('string');
                    expect(data.run.spark.executor.environment.scheduler_name).to.be("");
                    expect(data.run.spark.executor.environment.priority_class_name).to.be.a('string');
                    expect(data.run.spark.executor.environment.priority_class_name).to.be("");
                    expect(data.run.spark.executor.environment.priority).to.be.a('number');
                    expect(data.run.spark.executor.environment.priority).to.be(0);
                    expect(data.run.spark.executor.environment.restart_policy).to.be.a('string');
                    expect(data.run.spark.executor.environment.restart_policy).to.be("");
                  {
                    let dataCtr = data.run.spark.executor.init;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1Init);
                      expect(data.artifacts).to.be.a(PolyaxonSdk.V1ArtifactsType);
                            expect(data.artifacts.connection).to.be.a('string');
                        expect(data.artifacts.connection).to.be("");
                        {
                          let dataCtr = data.artifacts.files;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.artifacts.dirs;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        expect(data.artifacts.init).to.be.a('boolean');
                        expect(data.artifacts.init).to.be(false);
                        expect(data.artifacts.workers).to.be.a('number');
                        expect(data.artifacts.workers).to.be(0);
                      expect(data.git).to.be.a(PolyaxonSdk.V1GitType);
                            expect(data.git.url).to.be.a('string');
                        expect(data.git.url).to.be("");
                        expect(data.git.revision).to.be.a('boolean');
                        expect(data.git.revision).to.be(false);
                        expect(data.git.connection).to.be.a('string');
                        expect(data.git.connection).to.be("");
                        expect(data.git.init).to.be.a('boolean');
                        expect(data.git.init).to.be(false);
                      expect(data.dockerfile).to.be.a(PolyaxonSdk.V1DockerfileType);
                            expect(data.dockerfile.image).to.be.a('string');
                        expect(data.dockerfile.image).to.be("");
                        {
                          let dataCtr = data.dockerfile.env;
                          expect(dataCtr).to.be.an(Object);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.dockerfile.path;
                          expect(dataCtr).to.be.an(Object);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.dockerfile.copy;
                          expect(dataCtr).to.be.an(Object);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.dockerfile.run;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        expect(data.dockerfile.lang_env).to.be.a('string');
                        expect(data.dockerfile.lang_env).to.be("");
                        expect(data.dockerfile.uid).to.be.a('number');
                        expect(data.dockerfile.uid).to.be(0);
                        expect(data.dockerfile.gid).to.be.a('number');
                        expect(data.dockerfile.gid).to.be(0);
                        expect(data.dockerfile.filename).to.be.a('string');
                        expect(data.dockerfile.filename).to.be("");
                        expect(data.dockerfile.workdir).to.be.a('string');
                        expect(data.dockerfile.workdir).to.be("");
                        expect(data.dockerfile.workdir_path).to.be.a('string');
                        expect(data.dockerfile.workdir_path).to.be("");
                        expect(data.dockerfile.shell).to.be.a('string');
                        expect(data.dockerfile.shell).to.be("");
                      expect(data.connection).to.be.a('string');
                      expect(data.connection).to.be("");
                      expect(data.path).to.be.a('string');
                      expect(data.path).to.be("");
                      expect(data.container).to.be.a(PolyaxonSdk.V1Container);
              
                    }
                  }
                  {
                    let dataCtr = data.run.spark.executor.sidecars;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1Container);
                    }
                  }
                  expect(data.run.spark.executor.container).to.be.a(PolyaxonSdk.V1Container);
          
                expect(data.run.spark.driver).to.be.a(PolyaxonSdk.V1SparkReplica);
                      expect(data.run.spark.driver.replicas).to.be.a('number');
                  expect(data.run.spark.driver.replicas).to.be(0);
                  expect(data.run.spark.driver.environment).to.be.a(PolyaxonSdk.V1Environment);
                        {
                      let dataCtr = data.run.spark.driver.environment.labels;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.spark.driver.environment.annotations;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.spark.driver.environment.node_selector;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.run.spark.driver.environment.affinity).to.be.a(PolyaxonSdk.V1Affinity);
                        {
                      let dataCtr = data.run.spark.driver.environment.tolerations;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1Toleration);
                      }
                    }
                    expect(data.run.spark.driver.environment.node_name).to.be.a('string');
                    expect(data.run.spark.driver.environment.node_name).to.be("");
                    expect(data.run.spark.driver.environment.service_account_name).to.be.a('string');
                    expect(data.run.spark.driver.environment.service_account_name).to.be("");
                    {
                      let dataCtr = data.run.spark.driver.environment.host_aliases;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1HostAlias);
                      }
                    }
                    expect(data.run.spark.driver.environment.security_context).to.be.a(PolyaxonSdk.V1PodSecurityContext);
                        {
                      let dataCtr = data.run.spark.driver.environment.image_pull_secrets;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.run.spark.driver.environment.host_network).to.be.a('boolean');
                    expect(data.run.spark.driver.environment.host_network).to.be(false);
                    expect(data.run.spark.driver.environment.dns_policy).to.be.a('string');
                    expect(data.run.spark.driver.environment.dns_policy).to.be("");
                    expect(data.run.spark.driver.environment.dns_config).to.be.a(PolyaxonSdk.V1PodDNSConfig);
                        expect(data.run.spark.driver.environment.scheduler_name).to.be.a('string');
                    expect(data.run.spark.driver.environment.scheduler_name).to.be("");
                    expect(data.run.spark.driver.environment.priority_class_name).to.be.a('string');
                    expect(data.run.spark.driver.environment.priority_class_name).to.be("");
                    expect(data.run.spark.driver.environment.priority).to.be.a('number');
                    expect(data.run.spark.driver.environment.priority).to.be(0);
                    expect(data.run.spark.driver.environment.restart_policy).to.be.a('string');
                    expect(data.run.spark.driver.environment.restart_policy).to.be("");
                  {
                    let dataCtr = data.run.spark.driver.init;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1Init);
                      expect(data.artifacts).to.be.a(PolyaxonSdk.V1ArtifactsType);
                            expect(data.artifacts.connection).to.be.a('string');
                        expect(data.artifacts.connection).to.be("");
                        {
                          let dataCtr = data.artifacts.files;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.artifacts.dirs;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        expect(data.artifacts.init).to.be.a('boolean');
                        expect(data.artifacts.init).to.be(false);
                        expect(data.artifacts.workers).to.be.a('number');
                        expect(data.artifacts.workers).to.be(0);
                      expect(data.git).to.be.a(PolyaxonSdk.V1GitType);
                            expect(data.git.url).to.be.a('string');
                        expect(data.git.url).to.be("");
                        expect(data.git.revision).to.be.a('boolean');
                        expect(data.git.revision).to.be(false);
                        expect(data.git.connection).to.be.a('string');
                        expect(data.git.connection).to.be("");
                        expect(data.git.init).to.be.a('boolean');
                        expect(data.git.init).to.be(false);
                      expect(data.dockerfile).to.be.a(PolyaxonSdk.V1DockerfileType);
                            expect(data.dockerfile.image).to.be.a('string');
                        expect(data.dockerfile.image).to.be("");
                        {
                          let dataCtr = data.dockerfile.env;
                          expect(dataCtr).to.be.an(Object);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.dockerfile.path;
                          expect(dataCtr).to.be.an(Object);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.dockerfile.copy;
                          expect(dataCtr).to.be.an(Object);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.dockerfile.run;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        expect(data.dockerfile.lang_env).to.be.a('string');
                        expect(data.dockerfile.lang_env).to.be("");
                        expect(data.dockerfile.uid).to.be.a('number');
                        expect(data.dockerfile.uid).to.be(0);
                        expect(data.dockerfile.gid).to.be.a('number');
                        expect(data.dockerfile.gid).to.be(0);
                        expect(data.dockerfile.filename).to.be.a('string');
                        expect(data.dockerfile.filename).to.be("");
                        expect(data.dockerfile.workdir).to.be.a('string');
                        expect(data.dockerfile.workdir).to.be("");
                        expect(data.dockerfile.workdir_path).to.be.a('string');
                        expect(data.dockerfile.workdir_path).to.be("");
                        expect(data.dockerfile.shell).to.be.a('string');
                        expect(data.dockerfile.shell).to.be("");
                      expect(data.connection).to.be.a('string');
                      expect(data.connection).to.be("");
                      expect(data.path).to.be.a('string');
                      expect(data.path).to.be("");
                      expect(data.container).to.be.a(PolyaxonSdk.V1Container);
              
                    }
                  }
                  {
                    let dataCtr = data.run.spark.driver.sidecars;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1Container);
                    }
                  }
                  expect(data.run.spark.driver.container).to.be.a(PolyaxonSdk.V1Container);
          
              expect(data.run.flink).to.be.a(PolyaxonSdk.V1Flink);
                    expect(data.run.flink.kind).to.be.a('string');
                expect(data.run.flink.kind).to.be("");
                expect(data.run.flink.spec).to.be.a(Object);
                expect(data.run.flink.spec).to.be();
              expect(data.run.ruy).to.be.a(PolyaxonSdk.V1Ray);
                    expect(data.run.ruy.kind).to.be.a('string');
                expect(data.run.ruy.kind).to.be("");
                expect(data.run.ruy.spec).to.be.a(Object);
                expect(data.run.ruy.spec).to.be();
            expect(data.compiled_operation).to.be.a(PolyaxonSdk.V1CompiledOperation);
                  expect(data.compiled_operation.version).to.be.a('number');
              expect(data.compiled_operation.version).to.be(0.0);
              expect(data.compiled_operation.kind).to.be.a('string');
              expect(data.compiled_operation.kind).to.be("");
              expect(data.compiled_operation.name).to.be.a('string');
              expect(data.compiled_operation.name).to.be("");
              expect(data.compiled_operation.tag).to.be.a('string');
              expect(data.compiled_operation.tag).to.be("");
              expect(data.compiled_operation.description).to.be.a('string');
              expect(data.compiled_operation.description).to.be("");
              {
                let dataCtr = data.compiled_operation.tags;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.compiled_operation.profile).to.be.a('string');
              expect(data.compiled_operation.profile).to.be("");
              expect(data.compiled_operation.queue).to.be.a('string');
              expect(data.compiled_operation.queue).to.be("");
              expect(data.compiled_operation.cache).to.be.a(PolyaxonSdk.V1Cache);
                    expect(data.compiled_operation.cache.disable).to.be.a('boolean');
                expect(data.compiled_operation.cache.disable).to.be(false);
                expect(data.compiled_operation.cache.ttl).to.be.a('number');
                expect(data.compiled_operation.cache.ttl).to.be(0);
                {
                  let dataCtr = data.compiled_operation.cache.inputs;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
              expect(data.compiled_operation.schedule).to.be.a(Object);
              expect(data.compiled_operation.schedule).to.be();
              expect(data.compiled_operation.parallel).to.be.a(Object);
              expect(data.compiled_operation.parallel).to.be();
              {
                let dataCtr = data.compiled_operation.dependencies;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.compiled_operation.trigger).to.be.a(PolyaxonSdk.V1TriggerPolicy);
                  {
                let dataCtr = data.compiled_operation.conditions;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Object);
                  expect(data).to.be();
                }
              }
              expect(data.compiled_operation.skip_on_upstream_skip).to.be.a('boolean');
              expect(data.compiled_operation.skip_on_upstream_skip).to.be(false);
              expect(data.compiled_operation.termination).to.be.a(PolyaxonSdk.V1Termination);
                    expect(data.compiled_operation.termination.max_retries).to.be.a('number');
                expect(data.compiled_operation.termination.max_retries).to.be(0);
                expect(data.compiled_operation.termination.ttl).to.be.a('number');
                expect(data.compiled_operation.termination.ttl).to.be(0);
                expect(data.compiled_operation.termination.timeout).to.be.a('number');
                expect(data.compiled_operation.termination.timeout).to.be(0);
              expect(data.compiled_operation.plugins).to.be.a(PolyaxonSdk.V1Plugins);
                    expect(data.compiled_operation.plugins.auth).to.be.a('boolean');
                expect(data.compiled_operation.plugins.auth).to.be(false);
                expect(data.compiled_operation.plugins.docker).to.be.a('boolean');
                expect(data.compiled_operation.plugins.docker).to.be(false);
                expect(data.compiled_operation.plugins.shm).to.be.a('boolean');
                expect(data.compiled_operation.plugins.shm).to.be(false);
                expect(data.compiled_operation.plugins.collect_artifacts).to.be.a('boolean');
                expect(data.compiled_operation.plugins.collect_artifacts).to.be(false);
                expect(data.compiled_operation.plugins.collect_logs).to.be.a('boolean');
                expect(data.compiled_operation.plugins.collect_logs).to.be(false);
                expect(data.compiled_operation.plugins.collect_resources).to.be.a('string');
                expect(data.compiled_operation.plugins.collect_resources).to.be("");
                expect(data.compiled_operation.plugins.sync_statuses).to.be.a('boolean');
                expect(data.compiled_operation.plugins.sync_statuses).to.be(false);
                expect(data.compiled_operation.plugins.log_level).to.be.a('string');
                expect(data.compiled_operation.plugins.log_level).to.be("");
                {
                  let dataCtr = data.compiled_operation.plugins.notifications;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PolyaxonSdk.V1Notification);
                    expect(data.connection).to.be.a('string');
                    expect(data.connection).to.be("");
                    expect(data.trigger).to.be.a(PolyaxonSdk.NotificationTrigger);
            
                  }
                }
              {
                let dataCtr = data.compiled_operation.inputs;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PolyaxonSdk.V1IO);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
                  expect(data.iotype).to.be.a('string');
                  expect(data.iotype).to.be("");
                  expect(data.value).to.be.a(Object);
                  expect(data.value).to.be();
                  expect(data.is_optional).to.be.a('boolean');
                  expect(data.is_optional).to.be(false);
                  expect(data.is_list).to.be.a('boolean');
                  expect(data.is_list).to.be(false);
                  expect(data.is_flag).to.be.a('boolean');
                  expect(data.is_flag).to.be(false);
                  expect(data.delay_validation).to.be.a('boolean');
                  expect(data.delay_validation).to.be(false);
                  {
                    let dataCtr = data.options;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Object);
                      expect(data).to.be();
                    }
                  }
                }
              }
              {
                let dataCtr = data.compiled_operation.outputs;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PolyaxonSdk.V1IO);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
                  expect(data.iotype).to.be.a('string');
                  expect(data.iotype).to.be("");
                  expect(data.value).to.be.a(Object);
                  expect(data.value).to.be();
                  expect(data.is_optional).to.be.a('boolean');
                  expect(data.is_optional).to.be(false);
                  expect(data.is_list).to.be.a('boolean');
                  expect(data.is_list).to.be(false);
                  expect(data.is_flag).to.be.a('boolean');
                  expect(data.is_flag).to.be(false);
                  expect(data.delay_validation).to.be.a('boolean');
                  expect(data.delay_validation).to.be(false);
                  {
                    let dataCtr = data.options;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Object);
                      expect(data).to.be();
                    }
                  }
                }
              }
              expect(data.compiled_operation.run).to.be.a(Object);
              expect(data.compiled_operation.run).to.be();
            expect(data.schedule).to.be.a(PolyaxonSdk.V1Schedule);
                  expect(data.schedule.cron).to.be.a(PolyaxonSdk.V1CronSchedule);
                    expect(data.schedule.cron.kind).to.be.a('string');
                expect(data.schedule.cron.kind).to.be("");
                expect(data.schedule.cron.start_at).to.be.a(Date);
                expect(data.schedule.cron.start_at).to.be(new Date());
                expect(data.schedule.cron.end_at).to.be.a(Date);
                expect(data.schedule.cron.end_at).to.be(new Date());
                expect(data.schedule.cron.cron).to.be.a('string');
                expect(data.schedule.cron.cron).to.be("");
                expect(data.schedule.cron.depends_on_past).to.be.a('boolean');
                expect(data.schedule.cron.depends_on_past).to.be(false);
              expect(data.schedule.exact_time).to.be.a(PolyaxonSdk.V1ExactTimeSchedule);
                    expect(data.schedule.exact_time.kind).to.be.a('string');
                expect(data.schedule.exact_time.kind).to.be("");
                expect(data.schedule.exact_time.start_at).to.be.a(Date);
                expect(data.schedule.exact_time.start_at).to.be(new Date());
              expect(data.schedule.interval).to.be.a(PolyaxonSdk.V1IntervalSchedule);
                    expect(data.schedule.interval.kind).to.be.a('string');
                expect(data.schedule.interval.kind).to.be("");
                expect(data.schedule.interval.start_at).to.be.a(Date);
                expect(data.schedule.interval.start_at).to.be(new Date());
                expect(data.schedule.interval.end_at).to.be.a(Date);
                expect(data.schedule.interval.end_at).to.be(new Date());
                expect(data.schedule.interval.frequency).to.be.a('number');
                expect(data.schedule.interval.frequency).to.be(0);
                expect(data.schedule.interval.depends_on_past).to.be.a('boolean');
                expect(data.schedule.interval.depends_on_past).to.be(false);
              expect(data.schedule.repeatable).to.be.a(PolyaxonSdk.V1RepeatableSchedule);
                    expect(data.schedule.repeatable.kind).to.be.a('string');
                expect(data.schedule.repeatable.kind).to.be("");
                expect(data.schedule.repeatable.limit).to.be.a('number');
                expect(data.schedule.repeatable.limit).to.be(0);
                expect(data.schedule.repeatable.depends_on_past).to.be.a('boolean');
                expect(data.schedule.repeatable.depends_on_past).to.be(false);
            expect(data.connection_schema).to.be.a(PolyaxonSdk.V1ConnectionSchema);
                  expect(data.connection_schema.bucket_connection).to.be.a(PolyaxonSdk.V1BucketConnection);
                    expect(data.connection_schema.bucket_connection.bucket).to.be.a('string');
                expect(data.connection_schema.bucket_connection.bucket).to.be("");
              expect(data.connection_schema.host_path_connection).to.be.a(PolyaxonSdk.V1HostPathConnection);
                    expect(data.connection_schema.host_path_connection.host_path).to.be.a('string');
                expect(data.connection_schema.host_path_connection.host_path).to.be("");
                expect(data.connection_schema.host_path_connection.mount_path).to.be.a('string');
                expect(data.connection_schema.host_path_connection.mount_path).to.be("");
                expect(data.connection_schema.host_path_connection.read_only).to.be.a('boolean');
                expect(data.connection_schema.host_path_connection.read_only).to.be(false);
                expect(data.connection_schema.host_path_connection.kind).to.be.a(Object);
                expect(data.connection_schema.host_path_connection.kind).to.be();
              expect(data.connection_schema.claim_connection).to.be.a(PolyaxonSdk.V1ClaimConnection);
                    expect(data.connection_schema.claim_connection.volume_claim).to.be.a('string');
                expect(data.connection_schema.claim_connection.volume_claim).to.be("");
                expect(data.connection_schema.claim_connection.mount_path).to.be.a('string');
                expect(data.connection_schema.claim_connection.mount_path).to.be("");
                expect(data.connection_schema.claim_connection.read_only).to.be.a('boolean');
                expect(data.connection_schema.claim_connection.read_only).to.be(false);
                expect(data.connection_schema.claim_connection.kind).to.be.a(Object);
                expect(data.connection_schema.claim_connection.kind).to.be();
              expect(data.connection_schema.host_connection).to.be.a(PolyaxonSdk.V1HostConnection);
                    expect(data.connection_schema.host_connection.url).to.be.a('string');
                expect(data.connection_schema.host_connection.url).to.be("");
                expect(data.connection_schema.host_connection.insecure).to.be.a('boolean');
                expect(data.connection_schema.host_connection.insecure).to.be(false);
              expect(data.connection_schema.git_connection).to.be.a(PolyaxonSdk.V1GitConnection);
                    expect(data.connection_schema.git_connection.url).to.be.a('string');
                expect(data.connection_schema.git_connection.url).to.be("");
                expect(data.connection_schema.git_connection.revision).to.be.a('boolean');
                expect(data.connection_schema.git_connection.revision).to.be(false);
            expect(data.matrix).to.be.a(PolyaxonSdk.V1Matrix);
                  expect(data.matrix.choice).to.be.a(PolyaxonSdk.V1HpChoice);
                    expect(data.matrix.choice.kind).to.be.a('string');
                expect(data.matrix.choice.kind).to.be("");
                expect(data.matrix.choice.value).to.be.a(Object);
                expect(data.matrix.choice.value).to.be();
              expect(data.matrix.pchoice).to.be.a(PolyaxonSdk.V1HpPChoice);
                    expect(data.matrix.pchoice.kind).to.be.a('string');
                expect(data.matrix.pchoice.kind).to.be("");
                expect(data.matrix.pchoice.value).to.be.a(Object);
                expect(data.matrix.pchoice.value).to.be();
              expect(data.matrix.range).to.be.a(PolyaxonSdk.V1HpRange);
                    expect(data.matrix.range.kind).to.be.a('string');
                expect(data.matrix.range.kind).to.be("");
                expect(data.matrix.range.value).to.be.a(Object);
                expect(data.matrix.range.value).to.be();
              expect(data.matrix.linspace).to.be.a(PolyaxonSdk.V1HpLinSpace);
                    expect(data.matrix.linspace.kind).to.be.a('string');
                expect(data.matrix.linspace.kind).to.be("");
                expect(data.matrix.linspace.value).to.be.a(Object);
                expect(data.matrix.linspace.value).to.be();
              expect(data.matrix.logspace).to.be.a(PolyaxonSdk.V1HpLogSpace);
                    expect(data.matrix.logspace.kind).to.be.a('string');
                expect(data.matrix.logspace.kind).to.be("");
                expect(data.matrix.logspace.value).to.be.a(Object);
                expect(data.matrix.logspace.value).to.be();
              expect(data.matrix.geomspace).to.be.a(PolyaxonSdk.V1HpGeomSpace);
                    expect(data.matrix.geomspace.kind).to.be.a('string');
                expect(data.matrix.geomspace.kind).to.be("");
                expect(data.matrix.geomspace.value).to.be.a(Object);
                expect(data.matrix.geomspace.value).to.be();
              expect(data.matrix.uniform).to.be.a(PolyaxonSdk.V1HpUniform);
                    expect(data.matrix.uniform.kind).to.be.a('string');
                expect(data.matrix.uniform.kind).to.be("");
                expect(data.matrix.uniform.value).to.be.a(Object);
                expect(data.matrix.uniform.value).to.be();
              expect(data.matrix.quniform).to.be.a(PolyaxonSdk.V1HpQUniform);
                    expect(data.matrix.quniform.kind).to.be.a('string');
                expect(data.matrix.quniform.kind).to.be("");
                expect(data.matrix.quniform.value).to.be.a(Object);
                expect(data.matrix.quniform.value).to.be();
              expect(data.matrix.loguniform).to.be.a(PolyaxonSdk.V1HpLogUniform);
                    expect(data.matrix.loguniform.kind).to.be.a('string');
                expect(data.matrix.loguniform.kind).to.be("");
                expect(data.matrix.loguniform.value).to.be.a(Object);
                expect(data.matrix.loguniform.value).to.be();
              expect(data.matrix.qloguniform).to.be.a(PolyaxonSdk.V1HpQLogUniform);
                    expect(data.matrix.qloguniform.kind).to.be.a('string');
                expect(data.matrix.qloguniform.kind).to.be("");
                expect(data.matrix.qloguniform.value).to.be.a(Object);
                expect(data.matrix.qloguniform.value).to.be();
              expect(data.matrix.normal).to.be.a(PolyaxonSdk.V1HpNormal);
                    expect(data.matrix.normal.kind).to.be.a('string');
                expect(data.matrix.normal.kind).to.be("");
                expect(data.matrix.normal.value).to.be.a(Object);
                expect(data.matrix.normal.value).to.be();
              expect(data.matrix.qnormal).to.be.a(PolyaxonSdk.V1HpQNormal);
                    expect(data.matrix.qnormal.kind).to.be.a('string');
                expect(data.matrix.qnormal.kind).to.be("");
                expect(data.matrix.qnormal.value).to.be.a(Object);
                expect(data.matrix.qnormal.value).to.be();
              expect(data.matrix.lognormal).to.be.a(PolyaxonSdk.V1HpLogNormal);
                    expect(data.matrix.lognormal.kind).to.be.a('string');
                expect(data.matrix.lognormal.kind).to.be("");
                expect(data.matrix.lognormal.value).to.be.a(Object);
                expect(data.matrix.lognormal.value).to.be();
              expect(data.matrix.qlognormal).to.be.a(PolyaxonSdk.V1HpQLogNormal);
                    expect(data.matrix.qlognormal.kind).to.be.a('string');
                expect(data.matrix.qlognormal.kind).to.be("");
                expect(data.matrix.qlognormal.value).to.be.a(Object);
                expect(data.matrix.qlognormal.value).to.be();
            expect(data.refrence).to.be.a(PolyaxonSdk.V1Reference);
                  expect(data.refrence.hub_reference).to.be.a(PolyaxonSdk.V1HubReference);
                    expect(data.refrence.hub_reference.kind).to.be.a('string');
                expect(data.refrence.hub_reference.kind).to.be("");
                expect(data.refrence.hub_reference.name).to.be.a('string');
                expect(data.refrence.hub_reference.name).to.be("");
              expect(data.refrence.dag_reference).to.be.a(PolyaxonSdk.V1DagReference);
                    expect(data.refrence.dag_reference.kind).to.be.a('string');
                expect(data.refrence.dag_reference.kind).to.be("");
                expect(data.refrence.dag_reference.name).to.be.a('string');
                expect(data.refrence.dag_reference.name).to.be("");
              expect(data.refrence.url_reference).to.be.a(PolyaxonSdk.V1UrlReference);
                    expect(data.refrence.url_reference.kind).to.be.a('string');
                expect(data.refrence.url_reference.kind).to.be("");
                expect(data.refrence.url_reference.url).to.be.a('string');
                expect(data.refrence.url_reference.url).to.be("");
              expect(data.refrence.path_reference).to.be.a(PolyaxonSdk.V1PathReference);
                    expect(data.refrence.path_reference.kind).to.be.a('string');
                expect(data.refrence.path_reference.kind).to.be("");
                expect(data.refrence.path_reference.path).to.be.a('string');
                expect(data.refrence.path_reference.path).to.be("");
            expect(data.artifacts_mount).to.be.a(PolyaxonSdk.V1ArtifactsMount);
                  expect(data.artifacts_mount.name).to.be.a('string');
              expect(data.artifacts_mount.name).to.be("");
              {
                let dataCtr = data.artifacts_mount.paths;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
            expect(data.polyaxon_sidecar_container).to.be.a(PolyaxonSdk.V1PolyaxonSidecarContainer);
                  expect(data.polyaxon_sidecar_container.image).to.be.a('string');
              expect(data.polyaxon_sidecar_container.image).to.be("");
              expect(data.polyaxon_sidecar_container.image_tag).to.be.a('string');
              expect(data.polyaxon_sidecar_container.image_tag).to.be("");
              expect(data.polyaxon_sidecar_container.image_pull_policy).to.be.a('string');
              expect(data.polyaxon_sidecar_container.image_pull_policy).to.be("");
              expect(data.polyaxon_sidecar_container.sleep_interval).to.be.a('number');
              expect(data.polyaxon_sidecar_container.sleep_interval).to.be(0);
              expect(data.polyaxon_sidecar_container.sync_interval).to.be.a('number');
              expect(data.polyaxon_sidecar_container.sync_interval).to.be(0);
              expect(data.polyaxon_sidecar_container.resources).to.be.a(PolyaxonSdk.V1ResourceRequirements);
      
            expect(data.polyaxon_init_container).to.be.a(PolyaxonSdk.V1PolyaxonInitContainer);
                  expect(data.polyaxon_init_container.image).to.be.a('string');
              expect(data.polyaxon_init_container.image).to.be("");
              expect(data.polyaxon_init_container.image_tag).to.be.a('string');
              expect(data.polyaxon_init_container.image_tag).to.be("");
              expect(data.polyaxon_init_container.image_pull_policy).to.be.a('string');
              expect(data.polyaxon_init_container.image_pull_policy).to.be("");
              expect(data.polyaxon_init_container.resources).to.be.a(PolyaxonSdk.V1ResourceRequirements);
      
            expect(data.artifacs).to.be.a(PolyaxonSdk.V1ArtifactsType);
                  expect(data.artifacs.connection).to.be.a('string');
              expect(data.artifacs.connection).to.be("");
              {
                let dataCtr = data.artifacs.files;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              {
                let dataCtr = data.artifacs.dirs;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.artifacs.init).to.be.a('boolean');
              expect(data.artifacs.init).to.be(false);
              expect(data.artifacs.workers).to.be.a('number');
              expect(data.artifacs.workers).to.be(0);
            expect(data.wasb).to.be.a(PolyaxonSdk.V1WasbType);
                  expect(data.wasb.container).to.be.a('string');
              expect(data.wasb.container).to.be("");
              expect(data.wasb.storage_account).to.be.a('string');
              expect(data.wasb.storage_account).to.be("");
              expect(data.wasb.path).to.be.a('boolean');
              expect(data.wasb.path).to.be(false);
            expect(data.gcs).to.be.a(PolyaxonSdk.V1GcsType);
                  expect(data.gcs.bucket).to.be.a('string');
              expect(data.gcs.bucket).to.be("");
              expect(data.gcs.blob).to.be.a('string');
              expect(data.gcs.blob).to.be("");
            expect(data.s3).to.be.a(PolyaxonSdk.V1S3Type);
                  expect(data.s3.bucket).to.be.a('string');
              expect(data.s3.bucket).to.be("");
              expect(data.s3.key).to.be.a('string');
              expect(data.s3.key).to.be("");
            expect(data.autg).to.be.a(PolyaxonSdk.V1AuthType);
                  expect(data.autg.user).to.be.a('string');
              expect(data.autg.user).to.be("");
              expect(data.autg.password).to.be.a('string');
              expect(data.autg.password).to.be("");
            expect(data.dockerfile).to.be.a(PolyaxonSdk.V1DockerfileType);
                  expect(data.dockerfile.image).to.be.a('string');
              expect(data.dockerfile.image).to.be("");
              {
                let dataCtr = data.dockerfile.env;
                expect(dataCtr).to.be.an(Object);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              {
                let dataCtr = data.dockerfile.path;
                expect(dataCtr).to.be.an(Object);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              {
                let dataCtr = data.dockerfile.copy;
                expect(dataCtr).to.be.an(Object);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              {
                let dataCtr = data.dockerfile.run;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.dockerfile.lang_env).to.be.a('string');
              expect(data.dockerfile.lang_env).to.be("");
              expect(data.dockerfile.uid).to.be.a('number');
              expect(data.dockerfile.uid).to.be(0);
              expect(data.dockerfile.gid).to.be.a('number');
              expect(data.dockerfile.gid).to.be(0);
              expect(data.dockerfile.filename).to.be.a('string');
              expect(data.dockerfile.filename).to.be("");
              expect(data.dockerfile.workdir).to.be.a('string');
              expect(data.dockerfile.workdir).to.be("");
              expect(data.dockerfile.workdir_path).to.be.a('string');
              expect(data.dockerfile.workdir_path).to.be("");
              expect(data.dockerfile.shell).to.be.a('string');
              expect(data.dockerfile.shell).to.be("");
            expect(data.git).to.be.a(PolyaxonSdk.V1GitType);
                  expect(data.git.url).to.be.a('string');
              expect(data.git.url).to.be("");
              expect(data.git.revision).to.be.a('boolean');
              expect(data.git.revision).to.be(false);
              expect(data.git.connection).to.be.a('string');
              expect(data.git.connection).to.be("");
              expect(data.git.init).to.be.a('boolean');
              expect(data.git.init).to.be(false);
            expect(data.uri).to.be.a(PolyaxonSdk.V1UriType);
                  expect(data.uri.user).to.be.a('string');
              expect(data.uri.user).to.be("");
              expect(data.uri.password).to.be.a('string');
              expect(data.uri.password).to.be("");
              expect(data.uri.host).to.be.a('boolean');
              expect(data.uri.host).to.be(false);
            expect(data.k8s_resource).to.be.a(PolyaxonSdk.V1K8sResourceType);
                  expect(data.k8s_resource.name).to.be.a('string');
              expect(data.k8s_resource.name).to.be("");
              expect(data.k8s_resource.schema).to.be.a(PolyaxonSdk.V1K8sResourceSchema);
                    expect(data.k8s_resource.schema.name).to.be.a('string');
                expect(data.k8s_resource.schema.name).to.be("");
                expect(data.k8s_resource.schema.mount_path).to.be.a('string');
                expect(data.k8s_resource.schema.mount_path).to.be("");
                {
                  let dataCtr = data.k8s_resource.schema.items;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
              expect(data.k8s_resource.is_requested).to.be.a('boolean');
              expect(data.k8s_resource.is_requested).to.be(false);
            expect(data.connection).to.be.a(PolyaxonSdk.V1ConnectionType);
                  expect(data.connection.name).to.be.a('string');
              expect(data.connection.name).to.be("");
              expect(data.connection.kind).to.be.a(PolyaxonSdk.V1ConnectionKind);
                  expect(data.connection.schema).to.be.a(Object);
              expect(data.connection.schema).to.be();
              expect(data.connection.secret).to.be.a(PolyaxonSdk.V1K8sResourceSchema);
                    expect(data.connection.secret.name).to.be.a('string');
                expect(data.connection.secret.name).to.be("");
                expect(data.connection.secret.mount_path).to.be.a('string');
                expect(data.connection.secret.mount_path).to.be("");
                {
                  let dataCtr = data.connection.secret.items;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
              expect(data.connection.config_map).to.be.a(PolyaxonSdk.V1K8sResourceSchema);
                    expect(data.connection.config_map.name).to.be.a('string');
                expect(data.connection.config_map.name).to.be("");
                expect(data.connection.config_map.mount_path).to.be.a('string');
                expect(data.connection.config_map.mount_path).to.be("");
                {
                  let dataCtr = data.connection.config_map.items;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
            expect(data.image).to.be.a(PolyaxonSdk.V1ImageType);
                  expect(data.image.name).to.be.a('string');
              expect(data.image.name).to.be("");
              expect(data.image.connection).to.be.a('string');
              expect(data.image.connection).to.be("");
            expect(data.event_type).to.be.a(PolyaxonSdk.V1EventType);
                  expect(data.event_type.name).to.be.a('string');
              expect(data.event_type.name).to.be("");
              expect(data.event_type.kind).to.be.a(PolyaxonSdk.V1ArtifactKind);
      
            expect(data.event).to.be.a(PolyaxonSdk.V1Event);
                  expect(data.event.timestamp).to.be.a(Date);
              expect(data.event.timestamp).to.be(new Date());
              expect(data.event.step).to.be.a('number');
              expect(data.event.step).to.be(0);
              expect(data.event.metric).to.be.a('number');
              expect(data.event.metric).to.be(0.0);
              expect(data.event.image).to.be.a(PolyaxonSdk.V1EventImage);
                    expect(data.event.image.height).to.be.a('number');
                expect(data.event.image.height).to.be(0);
                expect(data.event.image.width).to.be.a('number');
                expect(data.event.image.width).to.be(0);
                expect(data.event.image.colorspace).to.be.a('number');
                expect(data.event.image.colorspace).to.be(0);
                expect(data.event.image.path).to.be.a('string');
                expect(data.event.image.path).to.be("");
              expect(data.event.histogram).to.be.a(PolyaxonSdk.V1EventHistogram);
                    {
                  let dataCtr = data.event.histogram.values;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('number');
                    expect(data).to.be(0.0);
                  }
                }
                {
                  let dataCtr = data.event.histogram.counts;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('number');
                    expect(data).to.be(0.0);
                  }
                }
              expect(data.event.audio).to.be.a(PolyaxonSdk.V1EventAudio);
                    expect(data.event.audio.sample_rate).to.be.a('number');
                expect(data.event.audio.sample_rate).to.be(0.0);
                expect(data.event.audio.num_channels).to.be.a('number');
                expect(data.event.audio.num_channels).to.be(0);
                expect(data.event.audio.length_frames).to.be.a('number');
                expect(data.event.audio.length_frames).to.be(0);
                expect(data.event.audio.content_type).to.be.a('string');
                expect(data.event.audio.content_type).to.be("");
                expect(data.event.audio.path).to.be.a('string');
                expect(data.event.audio.path).to.be("");
              expect(data.event.video).to.be.a(PolyaxonSdk.V1EventVideo);
                    expect(data.event.video.height).to.be.a('number');
                expect(data.event.video.height).to.be(0);
                expect(data.event.video.width).to.be.a('number');
                expect(data.event.video.width).to.be(0);
                expect(data.event.video.colorspace).to.be.a('number');
                expect(data.event.video.colorspace).to.be(0);
                expect(data.event.video.path).to.be.a('string');
                expect(data.event.video.path).to.be("");
                expect(data.event.video.content_type).to.be.a('string');
                expect(data.event.video.content_type).to.be("");
              expect(data.event.html).to.be.a('string');
              expect(data.event.html).to.be("");
              expect(data.event.text).to.be.a('string');
              expect(data.event.text).to.be("");
              expect(data.event.chart).to.be.a(PolyaxonSdk.V1EventChart);
                    expect(data.event.chart.kind).to.be.a(PolyaxonSdk.EventChartKind);
                    expect(data.event.chart.figure).to.be.a(Object);
                expect(data.event.chart.figure).to.be();
              expect(data.event.model).to.be.a(PolyaxonSdk.V1EventModel);
                    expect(data.event.model.framework).to.be.a('string');
                expect(data.event.model.framework).to.be("");
                expect(data.event.model.path).to.be.a('string');
                expect(data.event.model.path).to.be("");
                expect(data.event.model.spec).to.be.a(Object);
                expect(data.event.model.spec).to.be();
              expect(data.event.artifact).to.be.a(PolyaxonSdk.V1EventArtifact);
                    expect(data.event.artifact.kind).to.be.a(PolyaxonSdk.V1ArtifactKind);
                    expect(data.event.artifact.path).to.be.a('string');
                expect(data.event.artifact.path).to.be("");
              expect(data.event.dataframe).to.be.a(PolyaxonSdk.V1EventDataframe);
                    expect(data.event.dataframe.path).to.be.a('string');
                expect(data.event.dataframe.path).to.be("");
                expect(data.event.dataframe.content_type).to.be.a('string');
                expect(data.event.dataframe.content_type).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
