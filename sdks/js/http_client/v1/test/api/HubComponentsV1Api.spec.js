// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
 * Polyaxon SDKs and REST API specification.
 * Polyaxon SDKs and REST API specification.
 *
 * OpenAPI spec version: 1.0.5
 * Contact: contact@polyaxon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PolyaxonSdk);
  }
}(this, function(expect, PolyaxonSdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PolyaxonSdk.HubComponentsV1Api();
  });

  describe('(package)', function() {
    describe('HubComponentsV1Api', function() {
      describe('createHubComponent', function() {
        it('should call createHubComponent successfully', function(done) {
          // TODO: uncomment, update parameter values for createHubComponent call and complete the assertions
          /*
          var owner = "owner_example";
          var body = new PolyaxonSdk.V1HubComponent();
          body.uuid = "";
          body.name = "";
          body.tag = "";
          body.content = new PolyaxonSdk.V1Component();
          body.content.version = 0.0;
          body.content.kind = "";
          body.content.name = "";
          body.content.tag = "";
          body.content.description = "";
          body.content.tags = [""];
          body.content.profile = "";
          body.content.queue = "";
          body.content.cache = new PolyaxonSdk.V1Cache();
          body.content.cache.disable = false;
          body.content.cache.ttl = 0;
          body.content.cache.inputs = [""];
          body.content.termination = new PolyaxonSdk.V1Termination();
          body.content.termination.max_retries = 0;
          body.content.termination.ttl = 0;
          body.content.termination.timeout = 0;
          body.content.plugins = new PolyaxonSdk.V1Plugins();
          body.content.plugins.auth = false;
          body.content.plugins.docker = false;
          body.content.plugins.shm = false;
          body.content.plugins.collect_artifacts = false;
          body.content.plugins.collect_logs = false;
          body.content.plugins.collect_resources = "";
          body.content.plugins.sync_statuses = false;
          body.content.plugins.log_level = "";
          body.content.plugins.notifications = [new PolyaxonSdk.V1Notification()];
          body.content.plugins.notifications[0].connection = "";
          body.content.plugins.notifications[0].trigger = new PolyaxonSdk.NotificationTrigger();
          body.content.inputs = [new PolyaxonSdk.V1IO()];
          body.content.inputs[0].name = "";
          body.content.inputs[0].description = "";
          body.content.inputs[0].iotype = "";
          body.content.inputs[0].value = ;
          body.content.inputs[0].is_optional = false;
          body.content.inputs[0].is_list = false;
          body.content.inputs[0].is_flag = false;
          body.content.inputs[0].delay_validation = false;
          body.content.inputs[0].options = [];
          body.content.outputs = [new PolyaxonSdk.V1IO()];
          body.content.outputs[0].name = "";
          body.content.outputs[0].description = "";
          body.content.outputs[0].iotype = "";
          body.content.outputs[0].value = ;
          body.content.outputs[0].is_optional = false;
          body.content.outputs[0].is_list = false;
          body.content.outputs[0].is_flag = false;
          body.content.outputs[0].delay_validation = false;
          body.content.outputs[0].options = [];
          body.content.run = ;
          body.description = "";
          body.tags = [""];
          body.disabled = false;
          body.deleted = false;
          body.created_at = new Date();
          body.updated_at = new Date();

          instance.createHubComponent(owner, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1HubComponent);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.tag).to.be.a('string');
            expect(data.tag).to.be("");
            expect(data.content).to.be.a(PolyaxonSdk.V1Component);
                  expect(data.content.version).to.be.a('number');
              expect(data.content.version).to.be(0.0);
              expect(data.content.kind).to.be.a('string');
              expect(data.content.kind).to.be("");
              expect(data.content.name).to.be.a('string');
              expect(data.content.name).to.be("");
              expect(data.content.tag).to.be.a('string');
              expect(data.content.tag).to.be("");
              expect(data.content.description).to.be.a('string');
              expect(data.content.description).to.be("");
              {
                let dataCtr = data.content.tags;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.content.profile).to.be.a('string');
              expect(data.content.profile).to.be("");
              expect(data.content.queue).to.be.a('string');
              expect(data.content.queue).to.be("");
              expect(data.content.cache).to.be.a(PolyaxonSdk.V1Cache);
                    expect(data.content.cache.disable).to.be.a('boolean');
                expect(data.content.cache.disable).to.be(false);
                expect(data.content.cache.ttl).to.be.a('number');
                expect(data.content.cache.ttl).to.be(0);
                {
                  let dataCtr = data.content.cache.inputs;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
              expect(data.content.termination).to.be.a(PolyaxonSdk.V1Termination);
                    expect(data.content.termination.max_retries).to.be.a('number');
                expect(data.content.termination.max_retries).to.be(0);
                expect(data.content.termination.ttl).to.be.a('number');
                expect(data.content.termination.ttl).to.be(0);
                expect(data.content.termination.timeout).to.be.a('number');
                expect(data.content.termination.timeout).to.be(0);
              expect(data.content.plugins).to.be.a(PolyaxonSdk.V1Plugins);
                    expect(data.content.plugins.auth).to.be.a('boolean');
                expect(data.content.plugins.auth).to.be(false);
                expect(data.content.plugins.docker).to.be.a('boolean');
                expect(data.content.plugins.docker).to.be(false);
                expect(data.content.plugins.shm).to.be.a('boolean');
                expect(data.content.plugins.shm).to.be(false);
                expect(data.content.plugins.collect_artifacts).to.be.a('boolean');
                expect(data.content.plugins.collect_artifacts).to.be(false);
                expect(data.content.plugins.collect_logs).to.be.a('boolean');
                expect(data.content.plugins.collect_logs).to.be(false);
                expect(data.content.plugins.collect_resources).to.be.a('string');
                expect(data.content.plugins.collect_resources).to.be("");
                expect(data.content.plugins.sync_statuses).to.be.a('boolean');
                expect(data.content.plugins.sync_statuses).to.be(false);
                expect(data.content.plugins.log_level).to.be.a('string');
                expect(data.content.plugins.log_level).to.be("");
                {
                  let dataCtr = data.content.plugins.notifications;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PolyaxonSdk.V1Notification);
                    expect(data.connection).to.be.a('string');
                    expect(data.connection).to.be("");
                    expect(data.trigger).to.be.a(PolyaxonSdk.NotificationTrigger);
            
                  }
                }
              {
                let dataCtr = data.content.inputs;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PolyaxonSdk.V1IO);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
                  expect(data.iotype).to.be.a('string');
                  expect(data.iotype).to.be("");
                  expect(data.value).to.be.a(Object);
                  expect(data.value).to.be();
                  expect(data.is_optional).to.be.a('boolean');
                  expect(data.is_optional).to.be(false);
                  expect(data.is_list).to.be.a('boolean');
                  expect(data.is_list).to.be(false);
                  expect(data.is_flag).to.be.a('boolean');
                  expect(data.is_flag).to.be(false);
                  expect(data.delay_validation).to.be.a('boolean');
                  expect(data.delay_validation).to.be(false);
                  {
                    let dataCtr = data.options;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Object);
                      expect(data).to.be();
                    }
                  }
                }
              }
              {
                let dataCtr = data.content.outputs;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PolyaxonSdk.V1IO);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
                  expect(data.iotype).to.be.a('string');
                  expect(data.iotype).to.be("");
                  expect(data.value).to.be.a(Object);
                  expect(data.value).to.be();
                  expect(data.is_optional).to.be.a('boolean');
                  expect(data.is_optional).to.be(false);
                  expect(data.is_list).to.be.a('boolean');
                  expect(data.is_list).to.be(false);
                  expect(data.is_flag).to.be.a('boolean');
                  expect(data.is_flag).to.be(false);
                  expect(data.delay_validation).to.be.a('boolean');
                  expect(data.delay_validation).to.be(false);
                  {
                    let dataCtr = data.options;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Object);
                      expect(data).to.be();
                    }
                  }
                }
              }
              expect(data.content.run).to.be.a(Object);
              expect(data.content.run).to.be();
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.disabled).to.be.a('boolean');
            expect(data.disabled).to.be(false);
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.created_at).to.be.a(Date);
            expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            expect(data.updated_at).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteHubComponent', function() {
        it('should call deleteHubComponent successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteHubComponent call
          /*
          var owner = "owner_example";
          var uuid = "uuid_example";

          instance.deleteHubComponent(owner, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getHubComponent', function() {
        it('should call getHubComponent successfully', function(done) {
          // TODO: uncomment, update parameter values for getHubComponent call and complete the assertions
          /*
          var owner = "owner_example";
          var uuid = "uuid_example";

          instance.getHubComponent(owner, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1HubComponent);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.tag).to.be.a('string');
            expect(data.tag).to.be("");
            expect(data.content).to.be.a(PolyaxonSdk.V1Component);
                  expect(data.content.version).to.be.a('number');
              expect(data.content.version).to.be(0.0);
              expect(data.content.kind).to.be.a('string');
              expect(data.content.kind).to.be("");
              expect(data.content.name).to.be.a('string');
              expect(data.content.name).to.be("");
              expect(data.content.tag).to.be.a('string');
              expect(data.content.tag).to.be("");
              expect(data.content.description).to.be.a('string');
              expect(data.content.description).to.be("");
              {
                let dataCtr = data.content.tags;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.content.profile).to.be.a('string');
              expect(data.content.profile).to.be("");
              expect(data.content.queue).to.be.a('string');
              expect(data.content.queue).to.be("");
              expect(data.content.cache).to.be.a(PolyaxonSdk.V1Cache);
                    expect(data.content.cache.disable).to.be.a('boolean');
                expect(data.content.cache.disable).to.be(false);
                expect(data.content.cache.ttl).to.be.a('number');
                expect(data.content.cache.ttl).to.be(0);
                {
                  let dataCtr = data.content.cache.inputs;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
              expect(data.content.termination).to.be.a(PolyaxonSdk.V1Termination);
                    expect(data.content.termination.max_retries).to.be.a('number');
                expect(data.content.termination.max_retries).to.be(0);
                expect(data.content.termination.ttl).to.be.a('number');
                expect(data.content.termination.ttl).to.be(0);
                expect(data.content.termination.timeout).to.be.a('number');
                expect(data.content.termination.timeout).to.be(0);
              expect(data.content.plugins).to.be.a(PolyaxonSdk.V1Plugins);
                    expect(data.content.plugins.auth).to.be.a('boolean');
                expect(data.content.plugins.auth).to.be(false);
                expect(data.content.plugins.docker).to.be.a('boolean');
                expect(data.content.plugins.docker).to.be(false);
                expect(data.content.plugins.shm).to.be.a('boolean');
                expect(data.content.plugins.shm).to.be(false);
                expect(data.content.plugins.collect_artifacts).to.be.a('boolean');
                expect(data.content.plugins.collect_artifacts).to.be(false);
                expect(data.content.plugins.collect_logs).to.be.a('boolean');
                expect(data.content.plugins.collect_logs).to.be(false);
                expect(data.content.plugins.collect_resources).to.be.a('string');
                expect(data.content.plugins.collect_resources).to.be("");
                expect(data.content.plugins.sync_statuses).to.be.a('boolean');
                expect(data.content.plugins.sync_statuses).to.be(false);
                expect(data.content.plugins.log_level).to.be.a('string');
                expect(data.content.plugins.log_level).to.be("");
                {
                  let dataCtr = data.content.plugins.notifications;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PolyaxonSdk.V1Notification);
                    expect(data.connection).to.be.a('string');
                    expect(data.connection).to.be("");
                    expect(data.trigger).to.be.a(PolyaxonSdk.NotificationTrigger);
            
                  }
                }
              {
                let dataCtr = data.content.inputs;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PolyaxonSdk.V1IO);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
                  expect(data.iotype).to.be.a('string');
                  expect(data.iotype).to.be("");
                  expect(data.value).to.be.a(Object);
                  expect(data.value).to.be();
                  expect(data.is_optional).to.be.a('boolean');
                  expect(data.is_optional).to.be(false);
                  expect(data.is_list).to.be.a('boolean');
                  expect(data.is_list).to.be(false);
                  expect(data.is_flag).to.be.a('boolean');
                  expect(data.is_flag).to.be(false);
                  expect(data.delay_validation).to.be.a('boolean');
                  expect(data.delay_validation).to.be(false);
                  {
                    let dataCtr = data.options;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Object);
                      expect(data).to.be();
                    }
                  }
                }
              }
              {
                let dataCtr = data.content.outputs;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PolyaxonSdk.V1IO);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
                  expect(data.iotype).to.be.a('string');
                  expect(data.iotype).to.be("");
                  expect(data.value).to.be.a(Object);
                  expect(data.value).to.be();
                  expect(data.is_optional).to.be.a('boolean');
                  expect(data.is_optional).to.be(false);
                  expect(data.is_list).to.be.a('boolean');
                  expect(data.is_list).to.be(false);
                  expect(data.is_flag).to.be.a('boolean');
                  expect(data.is_flag).to.be(false);
                  expect(data.delay_validation).to.be.a('boolean');
                  expect(data.delay_validation).to.be(false);
                  {
                    let dataCtr = data.options;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Object);
                      expect(data).to.be();
                    }
                  }
                }
              }
              expect(data.content.run).to.be.a(Object);
              expect(data.content.run).to.be();
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.disabled).to.be.a('boolean');
            expect(data.disabled).to.be(false);
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.created_at).to.be.a(Date);
            expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            expect(data.updated_at).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listHubComponebtNames', function() {
        it('should call listHubComponebtNames successfully', function(done) {
          // TODO: uncomment, update parameter values for listHubComponebtNames call and complete the assertions
          /*
          var owner = "owner_example";
          var opts = {};
          opts.offset = 56;
          opts.limit = 56;
          opts.sort = "sort_example";
          opts.query = "query_example";

          instance.listHubComponebtNames(owner, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ListHubComponentsResponse);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1HubComponent);
                expect(data.uuid).to.be.a('string');
                expect(data.uuid).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.tag).to.be.a('string');
                expect(data.tag).to.be("");
                expect(data.content).to.be.a(PolyaxonSdk.V1Component);
                      expect(data.content.version).to.be.a('number');
                  expect(data.content.version).to.be(0.0);
                  expect(data.content.kind).to.be.a('string');
                  expect(data.content.kind).to.be("");
                  expect(data.content.name).to.be.a('string');
                  expect(data.content.name).to.be("");
                  expect(data.content.tag).to.be.a('string');
                  expect(data.content.tag).to.be("");
                  expect(data.content.description).to.be.a('string');
                  expect(data.content.description).to.be("");
                  {
                    let dataCtr = data.content.tags;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.content.profile).to.be.a('string');
                  expect(data.content.profile).to.be("");
                  expect(data.content.queue).to.be.a('string');
                  expect(data.content.queue).to.be("");
                  expect(data.content.cache).to.be.a(PolyaxonSdk.V1Cache);
                        expect(data.content.cache.disable).to.be.a('boolean');
                    expect(data.content.cache.disable).to.be(false);
                    expect(data.content.cache.ttl).to.be.a('number');
                    expect(data.content.cache.ttl).to.be(0);
                    {
                      let dataCtr = data.content.cache.inputs;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                  expect(data.content.termination).to.be.a(PolyaxonSdk.V1Termination);
                        expect(data.content.termination.max_retries).to.be.a('number');
                    expect(data.content.termination.max_retries).to.be(0);
                    expect(data.content.termination.ttl).to.be.a('number');
                    expect(data.content.termination.ttl).to.be(0);
                    expect(data.content.termination.timeout).to.be.a('number');
                    expect(data.content.termination.timeout).to.be(0);
                  expect(data.content.plugins).to.be.a(PolyaxonSdk.V1Plugins);
                        expect(data.content.plugins.auth).to.be.a('boolean');
                    expect(data.content.plugins.auth).to.be(false);
                    expect(data.content.plugins.docker).to.be.a('boolean');
                    expect(data.content.plugins.docker).to.be(false);
                    expect(data.content.plugins.shm).to.be.a('boolean');
                    expect(data.content.plugins.shm).to.be(false);
                    expect(data.content.plugins.collect_artifacts).to.be.a('boolean');
                    expect(data.content.plugins.collect_artifacts).to.be(false);
                    expect(data.content.plugins.collect_logs).to.be.a('boolean');
                    expect(data.content.plugins.collect_logs).to.be(false);
                    expect(data.content.plugins.collect_resources).to.be.a('string');
                    expect(data.content.plugins.collect_resources).to.be("");
                    expect(data.content.plugins.sync_statuses).to.be.a('boolean');
                    expect(data.content.plugins.sync_statuses).to.be(false);
                    expect(data.content.plugins.log_level).to.be.a('string');
                    expect(data.content.plugins.log_level).to.be("");
                    {
                      let dataCtr = data.content.plugins.notifications;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1Notification);
                        expect(data.connection).to.be.a('string');
                        expect(data.connection).to.be("");
                        expect(data.trigger).to.be.a(PolyaxonSdk.NotificationTrigger);
                
                      }
                    }
                  {
                    let dataCtr = data.content.inputs;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1IO);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                      expect(data.iotype).to.be.a('string');
                      expect(data.iotype).to.be("");
                      expect(data.value).to.be.a(Object);
                      expect(data.value).to.be();
                      expect(data.is_optional).to.be.a('boolean');
                      expect(data.is_optional).to.be(false);
                      expect(data.is_list).to.be.a('boolean');
                      expect(data.is_list).to.be(false);
                      expect(data.is_flag).to.be.a('boolean');
                      expect(data.is_flag).to.be(false);
                      expect(data.delay_validation).to.be.a('boolean');
                      expect(data.delay_validation).to.be(false);
                      {
                        let dataCtr = data.options;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Object);
                          expect(data).to.be();
                        }
                      }
                    }
                  }
                  {
                    let dataCtr = data.content.outputs;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1IO);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                      expect(data.iotype).to.be.a('string');
                      expect(data.iotype).to.be("");
                      expect(data.value).to.be.a(Object);
                      expect(data.value).to.be();
                      expect(data.is_optional).to.be.a('boolean');
                      expect(data.is_optional).to.be(false);
                      expect(data.is_list).to.be.a('boolean');
                      expect(data.is_list).to.be(false);
                      expect(data.is_flag).to.be.a('boolean');
                      expect(data.is_flag).to.be(false);
                      expect(data.delay_validation).to.be.a('boolean');
                      expect(data.delay_validation).to.be(false);
                      {
                        let dataCtr = data.options;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Object);
                          expect(data).to.be();
                        }
                      }
                    }
                  }
                  expect(data.content.run).to.be.a(Object);
                  expect(data.content.run).to.be();
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                {
                  let dataCtr = data.tags;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.disabled).to.be.a('boolean');
                expect(data.disabled).to.be(false);
                expect(data.deleted).to.be.a('boolean');
                expect(data.deleted).to.be(false);
                expect(data.created_at).to.be.a(Date);
                expect(data.created_at).to.be(new Date());
                expect(data.updated_at).to.be.a(Date);
                expect(data.updated_at).to.be(new Date());
              }
            }
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listHubComponents', function() {
        it('should call listHubComponents successfully', function(done) {
          // TODO: uncomment, update parameter values for listHubComponents call and complete the assertions
          /*
          var owner = "owner_example";
          var opts = {};
          opts.offset = 56;
          opts.limit = 56;
          opts.sort = "sort_example";
          opts.query = "query_example";

          instance.listHubComponents(owner, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ListHubComponentsResponse);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1HubComponent);
                expect(data.uuid).to.be.a('string');
                expect(data.uuid).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.tag).to.be.a('string');
                expect(data.tag).to.be("");
                expect(data.content).to.be.a(PolyaxonSdk.V1Component);
                      expect(data.content.version).to.be.a('number');
                  expect(data.content.version).to.be(0.0);
                  expect(data.content.kind).to.be.a('string');
                  expect(data.content.kind).to.be("");
                  expect(data.content.name).to.be.a('string');
                  expect(data.content.name).to.be("");
                  expect(data.content.tag).to.be.a('string');
                  expect(data.content.tag).to.be("");
                  expect(data.content.description).to.be.a('string');
                  expect(data.content.description).to.be("");
                  {
                    let dataCtr = data.content.tags;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.content.profile).to.be.a('string');
                  expect(data.content.profile).to.be("");
                  expect(data.content.queue).to.be.a('string');
                  expect(data.content.queue).to.be("");
                  expect(data.content.cache).to.be.a(PolyaxonSdk.V1Cache);
                        expect(data.content.cache.disable).to.be.a('boolean');
                    expect(data.content.cache.disable).to.be(false);
                    expect(data.content.cache.ttl).to.be.a('number');
                    expect(data.content.cache.ttl).to.be(0);
                    {
                      let dataCtr = data.content.cache.inputs;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                  expect(data.content.termination).to.be.a(PolyaxonSdk.V1Termination);
                        expect(data.content.termination.max_retries).to.be.a('number');
                    expect(data.content.termination.max_retries).to.be(0);
                    expect(data.content.termination.ttl).to.be.a('number');
                    expect(data.content.termination.ttl).to.be(0);
                    expect(data.content.termination.timeout).to.be.a('number');
                    expect(data.content.termination.timeout).to.be(0);
                  expect(data.content.plugins).to.be.a(PolyaxonSdk.V1Plugins);
                        expect(data.content.plugins.auth).to.be.a('boolean');
                    expect(data.content.plugins.auth).to.be(false);
                    expect(data.content.plugins.docker).to.be.a('boolean');
                    expect(data.content.plugins.docker).to.be(false);
                    expect(data.content.plugins.shm).to.be.a('boolean');
                    expect(data.content.plugins.shm).to.be(false);
                    expect(data.content.plugins.collect_artifacts).to.be.a('boolean');
                    expect(data.content.plugins.collect_artifacts).to.be(false);
                    expect(data.content.plugins.collect_logs).to.be.a('boolean');
                    expect(data.content.plugins.collect_logs).to.be(false);
                    expect(data.content.plugins.collect_resources).to.be.a('string');
                    expect(data.content.plugins.collect_resources).to.be("");
                    expect(data.content.plugins.sync_statuses).to.be.a('boolean');
                    expect(data.content.plugins.sync_statuses).to.be(false);
                    expect(data.content.plugins.log_level).to.be.a('string');
                    expect(data.content.plugins.log_level).to.be("");
                    {
                      let dataCtr = data.content.plugins.notifications;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1Notification);
                        expect(data.connection).to.be.a('string');
                        expect(data.connection).to.be("");
                        expect(data.trigger).to.be.a(PolyaxonSdk.NotificationTrigger);
                
                      }
                    }
                  {
                    let dataCtr = data.content.inputs;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1IO);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                      expect(data.iotype).to.be.a('string');
                      expect(data.iotype).to.be("");
                      expect(data.value).to.be.a(Object);
                      expect(data.value).to.be();
                      expect(data.is_optional).to.be.a('boolean');
                      expect(data.is_optional).to.be(false);
                      expect(data.is_list).to.be.a('boolean');
                      expect(data.is_list).to.be(false);
                      expect(data.is_flag).to.be.a('boolean');
                      expect(data.is_flag).to.be(false);
                      expect(data.delay_validation).to.be.a('boolean');
                      expect(data.delay_validation).to.be(false);
                      {
                        let dataCtr = data.options;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Object);
                          expect(data).to.be();
                        }
                      }
                    }
                  }
                  {
                    let dataCtr = data.content.outputs;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1IO);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.description).to.be.a('string');
                      expect(data.description).to.be("");
                      expect(data.iotype).to.be.a('string');
                      expect(data.iotype).to.be("");
                      expect(data.value).to.be.a(Object);
                      expect(data.value).to.be();
                      expect(data.is_optional).to.be.a('boolean');
                      expect(data.is_optional).to.be(false);
                      expect(data.is_list).to.be.a('boolean');
                      expect(data.is_list).to.be(false);
                      expect(data.is_flag).to.be.a('boolean');
                      expect(data.is_flag).to.be(false);
                      expect(data.delay_validation).to.be.a('boolean');
                      expect(data.delay_validation).to.be(false);
                      {
                        let dataCtr = data.options;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Object);
                          expect(data).to.be();
                        }
                      }
                    }
                  }
                  expect(data.content.run).to.be.a(Object);
                  expect(data.content.run).to.be();
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                {
                  let dataCtr = data.tags;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.disabled).to.be.a('boolean');
                expect(data.disabled).to.be(false);
                expect(data.deleted).to.be.a('boolean');
                expect(data.deleted).to.be(false);
                expect(data.created_at).to.be.a(Date);
                expect(data.created_at).to.be(new Date());
                expect(data.updated_at).to.be.a(Date);
                expect(data.updated_at).to.be(new Date());
              }
            }
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('patchHubComponent', function() {
        it('should call patchHubComponent successfully', function(done) {
          // TODO: uncomment, update parameter values for patchHubComponent call and complete the assertions
          /*
          var owner = "owner_example";
          var component_uuid = "component_uuid_example";
          var body = new PolyaxonSdk.V1HubComponent();
          body.uuid = "";
          body.name = "";
          body.tag = "";
          body.content = new PolyaxonSdk.V1Component();
          body.content.version = 0.0;
          body.content.kind = "";
          body.content.name = "";
          body.content.tag = "";
          body.content.description = "";
          body.content.tags = [""];
          body.content.profile = "";
          body.content.queue = "";
          body.content.cache = new PolyaxonSdk.V1Cache();
          body.content.cache.disable = false;
          body.content.cache.ttl = 0;
          body.content.cache.inputs = [""];
          body.content.termination = new PolyaxonSdk.V1Termination();
          body.content.termination.max_retries = 0;
          body.content.termination.ttl = 0;
          body.content.termination.timeout = 0;
          body.content.plugins = new PolyaxonSdk.V1Plugins();
          body.content.plugins.auth = false;
          body.content.plugins.docker = false;
          body.content.plugins.shm = false;
          body.content.plugins.collect_artifacts = false;
          body.content.plugins.collect_logs = false;
          body.content.plugins.collect_resources = "";
          body.content.plugins.sync_statuses = false;
          body.content.plugins.log_level = "";
          body.content.plugins.notifications = [new PolyaxonSdk.V1Notification()];
          body.content.plugins.notifications[0].connection = "";
          body.content.plugins.notifications[0].trigger = new PolyaxonSdk.NotificationTrigger();
          body.content.inputs = [new PolyaxonSdk.V1IO()];
          body.content.inputs[0].name = "";
          body.content.inputs[0].description = "";
          body.content.inputs[0].iotype = "";
          body.content.inputs[0].value = ;
          body.content.inputs[0].is_optional = false;
          body.content.inputs[0].is_list = false;
          body.content.inputs[0].is_flag = false;
          body.content.inputs[0].delay_validation = false;
          body.content.inputs[0].options = [];
          body.content.outputs = [new PolyaxonSdk.V1IO()];
          body.content.outputs[0].name = "";
          body.content.outputs[0].description = "";
          body.content.outputs[0].iotype = "";
          body.content.outputs[0].value = ;
          body.content.outputs[0].is_optional = false;
          body.content.outputs[0].is_list = false;
          body.content.outputs[0].is_flag = false;
          body.content.outputs[0].delay_validation = false;
          body.content.outputs[0].options = [];
          body.content.run = ;
          body.description = "";
          body.tags = [""];
          body.disabled = false;
          body.deleted = false;
          body.created_at = new Date();
          body.updated_at = new Date();

          instance.patchHubComponent(owner, component_uuid, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1HubComponent);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.tag).to.be.a('string');
            expect(data.tag).to.be("");
            expect(data.content).to.be.a(PolyaxonSdk.V1Component);
                  expect(data.content.version).to.be.a('number');
              expect(data.content.version).to.be(0.0);
              expect(data.content.kind).to.be.a('string');
              expect(data.content.kind).to.be("");
              expect(data.content.name).to.be.a('string');
              expect(data.content.name).to.be("");
              expect(data.content.tag).to.be.a('string');
              expect(data.content.tag).to.be("");
              expect(data.content.description).to.be.a('string');
              expect(data.content.description).to.be("");
              {
                let dataCtr = data.content.tags;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.content.profile).to.be.a('string');
              expect(data.content.profile).to.be("");
              expect(data.content.queue).to.be.a('string');
              expect(data.content.queue).to.be("");
              expect(data.content.cache).to.be.a(PolyaxonSdk.V1Cache);
                    expect(data.content.cache.disable).to.be.a('boolean');
                expect(data.content.cache.disable).to.be(false);
                expect(data.content.cache.ttl).to.be.a('number');
                expect(data.content.cache.ttl).to.be(0);
                {
                  let dataCtr = data.content.cache.inputs;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
              expect(data.content.termination).to.be.a(PolyaxonSdk.V1Termination);
                    expect(data.content.termination.max_retries).to.be.a('number');
                expect(data.content.termination.max_retries).to.be(0);
                expect(data.content.termination.ttl).to.be.a('number');
                expect(data.content.termination.ttl).to.be(0);
                expect(data.content.termination.timeout).to.be.a('number');
                expect(data.content.termination.timeout).to.be(0);
              expect(data.content.plugins).to.be.a(PolyaxonSdk.V1Plugins);
                    expect(data.content.plugins.auth).to.be.a('boolean');
                expect(data.content.plugins.auth).to.be(false);
                expect(data.content.plugins.docker).to.be.a('boolean');
                expect(data.content.plugins.docker).to.be(false);
                expect(data.content.plugins.shm).to.be.a('boolean');
                expect(data.content.plugins.shm).to.be(false);
                expect(data.content.plugins.collect_artifacts).to.be.a('boolean');
                expect(data.content.plugins.collect_artifacts).to.be(false);
                expect(data.content.plugins.collect_logs).to.be.a('boolean');
                expect(data.content.plugins.collect_logs).to.be(false);
                expect(data.content.plugins.collect_resources).to.be.a('string');
                expect(data.content.plugins.collect_resources).to.be("");
                expect(data.content.plugins.sync_statuses).to.be.a('boolean');
                expect(data.content.plugins.sync_statuses).to.be(false);
                expect(data.content.plugins.log_level).to.be.a('string');
                expect(data.content.plugins.log_level).to.be("");
                {
                  let dataCtr = data.content.plugins.notifications;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PolyaxonSdk.V1Notification);
                    expect(data.connection).to.be.a('string');
                    expect(data.connection).to.be("");
                    expect(data.trigger).to.be.a(PolyaxonSdk.NotificationTrigger);
            
                  }
                }
              {
                let dataCtr = data.content.inputs;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PolyaxonSdk.V1IO);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
                  expect(data.iotype).to.be.a('string');
                  expect(data.iotype).to.be("");
                  expect(data.value).to.be.a(Object);
                  expect(data.value).to.be();
                  expect(data.is_optional).to.be.a('boolean');
                  expect(data.is_optional).to.be(false);
                  expect(data.is_list).to.be.a('boolean');
                  expect(data.is_list).to.be(false);
                  expect(data.is_flag).to.be.a('boolean');
                  expect(data.is_flag).to.be(false);
                  expect(data.delay_validation).to.be.a('boolean');
                  expect(data.delay_validation).to.be(false);
                  {
                    let dataCtr = data.options;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Object);
                      expect(data).to.be();
                    }
                  }
                }
              }
              {
                let dataCtr = data.content.outputs;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PolyaxonSdk.V1IO);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
                  expect(data.iotype).to.be.a('string');
                  expect(data.iotype).to.be("");
                  expect(data.value).to.be.a(Object);
                  expect(data.value).to.be();
                  expect(data.is_optional).to.be.a('boolean');
                  expect(data.is_optional).to.be(false);
                  expect(data.is_list).to.be.a('boolean');
                  expect(data.is_list).to.be(false);
                  expect(data.is_flag).to.be.a('boolean');
                  expect(data.is_flag).to.be(false);
                  expect(data.delay_validation).to.be.a('boolean');
                  expect(data.delay_validation).to.be(false);
                  {
                    let dataCtr = data.options;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Object);
                      expect(data).to.be();
                    }
                  }
                }
              }
              expect(data.content.run).to.be.a(Object);
              expect(data.content.run).to.be();
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.disabled).to.be.a('boolean');
            expect(data.disabled).to.be(false);
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.created_at).to.be.a(Date);
            expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            expect(data.updated_at).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateHubComponent', function() {
        it('should call updateHubComponent successfully', function(done) {
          // TODO: uncomment, update parameter values for updateHubComponent call and complete the assertions
          /*
          var owner = "owner_example";
          var component_uuid = "component_uuid_example";
          var body = new PolyaxonSdk.V1HubComponent();
          body.uuid = "";
          body.name = "";
          body.tag = "";
          body.content = new PolyaxonSdk.V1Component();
          body.content.version = 0.0;
          body.content.kind = "";
          body.content.name = "";
          body.content.tag = "";
          body.content.description = "";
          body.content.tags = [""];
          body.content.profile = "";
          body.content.queue = "";
          body.content.cache = new PolyaxonSdk.V1Cache();
          body.content.cache.disable = false;
          body.content.cache.ttl = 0;
          body.content.cache.inputs = [""];
          body.content.termination = new PolyaxonSdk.V1Termination();
          body.content.termination.max_retries = 0;
          body.content.termination.ttl = 0;
          body.content.termination.timeout = 0;
          body.content.plugins = new PolyaxonSdk.V1Plugins();
          body.content.plugins.auth = false;
          body.content.plugins.docker = false;
          body.content.plugins.shm = false;
          body.content.plugins.collect_artifacts = false;
          body.content.plugins.collect_logs = false;
          body.content.plugins.collect_resources = "";
          body.content.plugins.sync_statuses = false;
          body.content.plugins.log_level = "";
          body.content.plugins.notifications = [new PolyaxonSdk.V1Notification()];
          body.content.plugins.notifications[0].connection = "";
          body.content.plugins.notifications[0].trigger = new PolyaxonSdk.NotificationTrigger();
          body.content.inputs = [new PolyaxonSdk.V1IO()];
          body.content.inputs[0].name = "";
          body.content.inputs[0].description = "";
          body.content.inputs[0].iotype = "";
          body.content.inputs[0].value = ;
          body.content.inputs[0].is_optional = false;
          body.content.inputs[0].is_list = false;
          body.content.inputs[0].is_flag = false;
          body.content.inputs[0].delay_validation = false;
          body.content.inputs[0].options = [];
          body.content.outputs = [new PolyaxonSdk.V1IO()];
          body.content.outputs[0].name = "";
          body.content.outputs[0].description = "";
          body.content.outputs[0].iotype = "";
          body.content.outputs[0].value = ;
          body.content.outputs[0].is_optional = false;
          body.content.outputs[0].is_list = false;
          body.content.outputs[0].is_flag = false;
          body.content.outputs[0].delay_validation = false;
          body.content.outputs[0].options = [];
          body.content.run = ;
          body.description = "";
          body.tags = [""];
          body.disabled = false;
          body.deleted = false;
          body.created_at = new Date();
          body.updated_at = new Date();

          instance.updateHubComponent(owner, component_uuid, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1HubComponent);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.tag).to.be.a('string');
            expect(data.tag).to.be("");
            expect(data.content).to.be.a(PolyaxonSdk.V1Component);
                  expect(data.content.version).to.be.a('number');
              expect(data.content.version).to.be(0.0);
              expect(data.content.kind).to.be.a('string');
              expect(data.content.kind).to.be("");
              expect(data.content.name).to.be.a('string');
              expect(data.content.name).to.be("");
              expect(data.content.tag).to.be.a('string');
              expect(data.content.tag).to.be("");
              expect(data.content.description).to.be.a('string');
              expect(data.content.description).to.be("");
              {
                let dataCtr = data.content.tags;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.content.profile).to.be.a('string');
              expect(data.content.profile).to.be("");
              expect(data.content.queue).to.be.a('string');
              expect(data.content.queue).to.be("");
              expect(data.content.cache).to.be.a(PolyaxonSdk.V1Cache);
                    expect(data.content.cache.disable).to.be.a('boolean');
                expect(data.content.cache.disable).to.be(false);
                expect(data.content.cache.ttl).to.be.a('number');
                expect(data.content.cache.ttl).to.be(0);
                {
                  let dataCtr = data.content.cache.inputs;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
              expect(data.content.termination).to.be.a(PolyaxonSdk.V1Termination);
                    expect(data.content.termination.max_retries).to.be.a('number');
                expect(data.content.termination.max_retries).to.be(0);
                expect(data.content.termination.ttl).to.be.a('number');
                expect(data.content.termination.ttl).to.be(0);
                expect(data.content.termination.timeout).to.be.a('number');
                expect(data.content.termination.timeout).to.be(0);
              expect(data.content.plugins).to.be.a(PolyaxonSdk.V1Plugins);
                    expect(data.content.plugins.auth).to.be.a('boolean');
                expect(data.content.plugins.auth).to.be(false);
                expect(data.content.plugins.docker).to.be.a('boolean');
                expect(data.content.plugins.docker).to.be(false);
                expect(data.content.plugins.shm).to.be.a('boolean');
                expect(data.content.plugins.shm).to.be(false);
                expect(data.content.plugins.collect_artifacts).to.be.a('boolean');
                expect(data.content.plugins.collect_artifacts).to.be(false);
                expect(data.content.plugins.collect_logs).to.be.a('boolean');
                expect(data.content.plugins.collect_logs).to.be(false);
                expect(data.content.plugins.collect_resources).to.be.a('string');
                expect(data.content.plugins.collect_resources).to.be("");
                expect(data.content.plugins.sync_statuses).to.be.a('boolean');
                expect(data.content.plugins.sync_statuses).to.be(false);
                expect(data.content.plugins.log_level).to.be.a('string');
                expect(data.content.plugins.log_level).to.be("");
                {
                  let dataCtr = data.content.plugins.notifications;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PolyaxonSdk.V1Notification);
                    expect(data.connection).to.be.a('string');
                    expect(data.connection).to.be("");
                    expect(data.trigger).to.be.a(PolyaxonSdk.NotificationTrigger);
            
                  }
                }
              {
                let dataCtr = data.content.inputs;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PolyaxonSdk.V1IO);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
                  expect(data.iotype).to.be.a('string');
                  expect(data.iotype).to.be("");
                  expect(data.value).to.be.a(Object);
                  expect(data.value).to.be();
                  expect(data.is_optional).to.be.a('boolean');
                  expect(data.is_optional).to.be(false);
                  expect(data.is_list).to.be.a('boolean');
                  expect(data.is_list).to.be(false);
                  expect(data.is_flag).to.be.a('boolean');
                  expect(data.is_flag).to.be(false);
                  expect(data.delay_validation).to.be.a('boolean');
                  expect(data.delay_validation).to.be(false);
                  {
                    let dataCtr = data.options;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Object);
                      expect(data).to.be();
                    }
                  }
                }
              }
              {
                let dataCtr = data.content.outputs;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PolyaxonSdk.V1IO);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.description).to.be.a('string');
                  expect(data.description).to.be("");
                  expect(data.iotype).to.be.a('string');
                  expect(data.iotype).to.be("");
                  expect(data.value).to.be.a(Object);
                  expect(data.value).to.be();
                  expect(data.is_optional).to.be.a('boolean');
                  expect(data.is_optional).to.be(false);
                  expect(data.is_list).to.be.a('boolean');
                  expect(data.is_list).to.be(false);
                  expect(data.is_flag).to.be.a('boolean');
                  expect(data.is_flag).to.be(false);
                  expect(data.delay_validation).to.be.a('boolean');
                  expect(data.delay_validation).to.be(false);
                  {
                    let dataCtr = data.options;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Object);
                      expect(data).to.be();
                    }
                  }
                }
              }
              expect(data.content.run).to.be.a(Object);
              expect(data.content.run).to.be();
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.disabled).to.be.a('boolean');
            expect(data.disabled).to.be(false);
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.created_at).to.be.a(Date);
            expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            expect(data.updated_at).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
