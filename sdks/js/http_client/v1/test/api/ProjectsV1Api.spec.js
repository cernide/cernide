// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
 * Polyaxon SDKs and REST API specification.
 * Polyaxon SDKs and REST API specification.
 *
 * OpenAPI spec version: 1.0.5
 * Contact: contact@polyaxon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PolyaxonSdk);
  }
}(this, function(expect, PolyaxonSdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PolyaxonSdk.ProjectsV1Api();
  });

  describe('(package)', function() {
    describe('ProjectsV1Api', function() {
      describe('archiveProject', function() {
        it('should call archiveProject successfully', function(done) {
          // TODO: uncomment, update parameter values for archiveProject call
          /*
          var owner = "owner_example";
          var project = "project_example";

          instance.archiveProject(owner, project, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('bookmarkProject', function() {
        it('should call bookmarkProject successfully', function(done) {
          // TODO: uncomment, update parameter values for bookmarkProject call
          /*
          var owner = "owner_example";
          var project = "project_example";

          instance.bookmarkProject(owner, project, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createProject', function() {
        it('should call createProject successfully', function(done) {
          // TODO: uncomment, update parameter values for createProject call and complete the assertions
          /*
          var owner = "owner_example";
          var body = new PolyaxonSdk.V1Project();
          body.uuid = "";
          body.user = "";
          body.user_email = "";
          body.owner = "";
          body.name = "";
          body.description = "";
          body.tags = [""];
          body.created_at = new Date();
          body.updated_at = new Date();
          body.is_public = "";
          body.deleted = false;
          body.bookmarked = false;
          body.readme = "";
          body.settings = new PolyaxonSdk.V1ProjectSettings();
          body.settings.artifacts_store = "";
          body.settings.connections = [""];
          body.settings.run_profile = "";
          body.settings.run_profiles = [""];
          body.teams = [""];

          instance.createProject(owner, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Project);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.user_email).to.be.a('string');
            expect(data.user_email).to.be("");
            expect(data.owner).to.be.a('string');
            expect(data.owner).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.created_at).to.be.a(Date);
            expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            expect(data.updated_at).to.be(new Date());
            expect(data.is_public).to.be.a('string');
            expect(data.is_public).to.be("");
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.bookmarked).to.be.a('boolean');
            expect(data.bookmarked).to.be(false);
            expect(data.readme).to.be.a('string');
            expect(data.readme).to.be("");
            expect(data.settings).to.be.a(PolyaxonSdk.V1ProjectSettings);
                  expect(data.settings.artifacts_store).to.be.a('string');
              expect(data.settings.artifacts_store).to.be("");
              {
                let dataCtr = data.settings.connections;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.settings.run_profile).to.be.a('string');
              expect(data.settings.run_profile).to.be("");
              {
                let dataCtr = data.settings.run_profiles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
            {
              let dataCtr = data.teams;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteProject', function() {
        it('should call deleteProject successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteProject call
          /*
          var owner = "owner_example";
          var project = "project_example";

          instance.deleteProject(owner, project, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('disableProjectCI', function() {
        it('should call disableProjectCI successfully', function(done) {
          // TODO: uncomment, update parameter values for disableProjectCI call
          /*
          var owner = "owner_example";
          var project = "project_example";

          instance.disableProjectCI(owner, project, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('enableProjectCI', function() {
        it('should call enableProjectCI successfully', function(done) {
          // TODO: uncomment, update parameter values for enableProjectCI call
          /*
          var owner = "owner_example";
          var project = "project_example";

          instance.enableProjectCI(owner, project, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('fetchProjectTeams', function() {
        it('should call fetchProjectTeams successfully', function(done) {
          // TODO: uncomment, update parameter values for fetchProjectTeams call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";

          instance.fetchProjectTeams(owner, project, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ProjectTeams);
            {
              let dataCtr = data.teams;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getProject', function() {
        it('should call getProject successfully', function(done) {
          // TODO: uncomment, update parameter values for getProject call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";

          instance.getProject(owner, project, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Project);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.user_email).to.be.a('string');
            expect(data.user_email).to.be("");
            expect(data.owner).to.be.a('string');
            expect(data.owner).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.created_at).to.be.a(Date);
            expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            expect(data.updated_at).to.be(new Date());
            expect(data.is_public).to.be.a('string');
            expect(data.is_public).to.be("");
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.bookmarked).to.be.a('boolean');
            expect(data.bookmarked).to.be(false);
            expect(data.readme).to.be.a('string');
            expect(data.readme).to.be("");
            expect(data.settings).to.be.a(PolyaxonSdk.V1ProjectSettings);
                  expect(data.settings.artifacts_store).to.be.a('string');
              expect(data.settings.artifacts_store).to.be("");
              {
                let dataCtr = data.settings.connections;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.settings.run_profile).to.be.a('string');
              expect(data.settings.run_profile).to.be("");
              {
                let dataCtr = data.settings.run_profiles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
            {
              let dataCtr = data.teams;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getProjectSettings', function() {
        it('should call getProjectSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for getProjectSettings call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";

          instance.getProjectSettings(owner, project, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ProjectSettings);
            expect(data.artifacts_store).to.be.a('string');
            expect(data.artifacts_store).to.be("");
            {
              let dataCtr = data.connections;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.run_profile).to.be.a('string');
            expect(data.run_profile).to.be("");
            {
              let dataCtr = data.run_profiles;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listArchivedProjects', function() {
        it('should call listArchivedProjects successfully', function(done) {
          // TODO: uncomment, update parameter values for listArchivedProjects call and complete the assertions
          /*
          var user = "user_example";
          var opts = {};
          opts.offset = 56;
          opts.limit = 56;
          opts.sort = "sort_example";
          opts.query = "query_example";

          instance.listArchivedProjects(user, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ListProjectsResponse);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1Project);
                expect(data.uuid).to.be.a('string');
                expect(data.uuid).to.be("");
                expect(data.user).to.be.a('string');
                expect(data.user).to.be("");
                expect(data.user_email).to.be.a('string');
                expect(data.user_email).to.be("");
                expect(data.owner).to.be.a('string');
                expect(data.owner).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                {
                  let dataCtr = data.tags;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.created_at).to.be.a(Date);
                expect(data.created_at).to.be(new Date());
                expect(data.updated_at).to.be.a(Date);
                expect(data.updated_at).to.be(new Date());
                expect(data.is_public).to.be.a('string');
                expect(data.is_public).to.be("");
                expect(data.deleted).to.be.a('boolean');
                expect(data.deleted).to.be(false);
                expect(data.bookmarked).to.be.a('boolean');
                expect(data.bookmarked).to.be(false);
                expect(data.readme).to.be.a('string');
                expect(data.readme).to.be("");
                expect(data.settings).to.be.a(PolyaxonSdk.V1ProjectSettings);
                      expect(data.settings.artifacts_store).to.be.a('string');
                  expect(data.settings.artifacts_store).to.be("");
                  {
                    let dataCtr = data.settings.connections;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.settings.run_profile).to.be.a('string');
                  expect(data.settings.run_profile).to.be("");
                  {
                    let dataCtr = data.settings.run_profiles;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                {
                  let dataCtr = data.teams;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
              }
            }
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listBookmarkedProjects', function() {
        it('should call listBookmarkedProjects successfully', function(done) {
          // TODO: uncomment, update parameter values for listBookmarkedProjects call and complete the assertions
          /*
          var user = "user_example";
          var opts = {};
          opts.offset = 56;
          opts.limit = 56;
          opts.sort = "sort_example";
          opts.query = "query_example";

          instance.listBookmarkedProjects(user, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ListProjectsResponse);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1Project);
                expect(data.uuid).to.be.a('string');
                expect(data.uuid).to.be("");
                expect(data.user).to.be.a('string');
                expect(data.user).to.be("");
                expect(data.user_email).to.be.a('string');
                expect(data.user_email).to.be("");
                expect(data.owner).to.be.a('string');
                expect(data.owner).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                {
                  let dataCtr = data.tags;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.created_at).to.be.a(Date);
                expect(data.created_at).to.be(new Date());
                expect(data.updated_at).to.be.a(Date);
                expect(data.updated_at).to.be(new Date());
                expect(data.is_public).to.be.a('string');
                expect(data.is_public).to.be("");
                expect(data.deleted).to.be.a('boolean');
                expect(data.deleted).to.be(false);
                expect(data.bookmarked).to.be.a('boolean');
                expect(data.bookmarked).to.be(false);
                expect(data.readme).to.be.a('string');
                expect(data.readme).to.be("");
                expect(data.settings).to.be.a(PolyaxonSdk.V1ProjectSettings);
                      expect(data.settings.artifacts_store).to.be.a('string');
                  expect(data.settings.artifacts_store).to.be("");
                  {
                    let dataCtr = data.settings.connections;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.settings.run_profile).to.be.a('string');
                  expect(data.settings.run_profile).to.be("");
                  {
                    let dataCtr = data.settings.run_profiles;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                {
                  let dataCtr = data.teams;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
              }
            }
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listProjectNames', function() {
        it('should call listProjectNames successfully', function(done) {
          // TODO: uncomment, update parameter values for listProjectNames call and complete the assertions
          /*
          var owner = "owner_example";
          var opts = {};
          opts.offset = 56;
          opts.limit = 56;
          opts.sort = "sort_example";
          opts.query = "query_example";

          instance.listProjectNames(owner, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ListProjectsResponse);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1Project);
                expect(data.uuid).to.be.a('string');
                expect(data.uuid).to.be("");
                expect(data.user).to.be.a('string');
                expect(data.user).to.be("");
                expect(data.user_email).to.be.a('string');
                expect(data.user_email).to.be("");
                expect(data.owner).to.be.a('string');
                expect(data.owner).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                {
                  let dataCtr = data.tags;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.created_at).to.be.a(Date);
                expect(data.created_at).to.be(new Date());
                expect(data.updated_at).to.be.a(Date);
                expect(data.updated_at).to.be(new Date());
                expect(data.is_public).to.be.a('string');
                expect(data.is_public).to.be("");
                expect(data.deleted).to.be.a('boolean');
                expect(data.deleted).to.be(false);
                expect(data.bookmarked).to.be.a('boolean');
                expect(data.bookmarked).to.be(false);
                expect(data.readme).to.be.a('string');
                expect(data.readme).to.be("");
                expect(data.settings).to.be.a(PolyaxonSdk.V1ProjectSettings);
                      expect(data.settings.artifacts_store).to.be.a('string');
                  expect(data.settings.artifacts_store).to.be("");
                  {
                    let dataCtr = data.settings.connections;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.settings.run_profile).to.be.a('string');
                  expect(data.settings.run_profile).to.be("");
                  {
                    let dataCtr = data.settings.run_profiles;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                {
                  let dataCtr = data.teams;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
              }
            }
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listProjects', function() {
        it('should call listProjects successfully', function(done) {
          // TODO: uncomment, update parameter values for listProjects call and complete the assertions
          /*
          var owner = "owner_example";
          var opts = {};
          opts.offset = 56;
          opts.limit = 56;
          opts.sort = "sort_example";
          opts.query = "query_example";

          instance.listProjects(owner, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ListProjectsResponse);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1Project);
                expect(data.uuid).to.be.a('string');
                expect(data.uuid).to.be("");
                expect(data.user).to.be.a('string');
                expect(data.user).to.be("");
                expect(data.user_email).to.be.a('string');
                expect(data.user_email).to.be("");
                expect(data.owner).to.be.a('string');
                expect(data.owner).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                {
                  let dataCtr = data.tags;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.created_at).to.be.a(Date);
                expect(data.created_at).to.be(new Date());
                expect(data.updated_at).to.be.a(Date);
                expect(data.updated_at).to.be(new Date());
                expect(data.is_public).to.be.a('string');
                expect(data.is_public).to.be("");
                expect(data.deleted).to.be.a('boolean');
                expect(data.deleted).to.be(false);
                expect(data.bookmarked).to.be.a('boolean');
                expect(data.bookmarked).to.be(false);
                expect(data.readme).to.be.a('string');
                expect(data.readme).to.be("");
                expect(data.settings).to.be.a(PolyaxonSdk.V1ProjectSettings);
                      expect(data.settings.artifacts_store).to.be.a('string');
                  expect(data.settings.artifacts_store).to.be("");
                  {
                    let dataCtr = data.settings.connections;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.settings.run_profile).to.be.a('string');
                  expect(data.settings.run_profile).to.be("");
                  {
                    let dataCtr = data.settings.run_profiles;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                {
                  let dataCtr = data.teams;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
              }
            }
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('patchProject', function() {
        it('should call patchProject successfully', function(done) {
          // TODO: uncomment, update parameter values for patchProject call and complete the assertions
          /*
          var owner = "owner_example";
          var project_name = "project_name_example";
          var body = new PolyaxonSdk.V1Project();
          body.uuid = "";
          body.user = "";
          body.user_email = "";
          body.owner = "";
          body.name = "";
          body.description = "";
          body.tags = [""];
          body.created_at = new Date();
          body.updated_at = new Date();
          body.is_public = "";
          body.deleted = false;
          body.bookmarked = false;
          body.readme = "";
          body.settings = new PolyaxonSdk.V1ProjectSettings();
          body.settings.artifacts_store = "";
          body.settings.connections = [""];
          body.settings.run_profile = "";
          body.settings.run_profiles = [""];
          body.teams = [""];

          instance.patchProject(owner, project_name, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Project);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.user_email).to.be.a('string');
            expect(data.user_email).to.be("");
            expect(data.owner).to.be.a('string');
            expect(data.owner).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.created_at).to.be.a(Date);
            expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            expect(data.updated_at).to.be(new Date());
            expect(data.is_public).to.be.a('string');
            expect(data.is_public).to.be("");
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.bookmarked).to.be.a('boolean');
            expect(data.bookmarked).to.be(false);
            expect(data.readme).to.be.a('string');
            expect(data.readme).to.be("");
            expect(data.settings).to.be.a(PolyaxonSdk.V1ProjectSettings);
                  expect(data.settings.artifacts_store).to.be.a('string');
              expect(data.settings.artifacts_store).to.be("");
              {
                let dataCtr = data.settings.connections;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.settings.run_profile).to.be.a('string');
              expect(data.settings.run_profile).to.be("");
              {
                let dataCtr = data.settings.run_profiles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
            {
              let dataCtr = data.teams;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('patchProjectSettings', function() {
        it('should call patchProjectSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for patchProjectSettings call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var body = new PolyaxonSdk.V1ProjectSettings();
          body.artifacts_store = "";
          body.connections = [""];
          body.run_profile = "";
          body.run_profiles = [""];

          instance.patchProjectSettings(owner, project, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ProjectSettings);
            expect(data.artifacts_store).to.be.a('string');
            expect(data.artifacts_store).to.be("");
            {
              let dataCtr = data.connections;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.run_profile).to.be.a('string');
            expect(data.run_profile).to.be("");
            {
              let dataCtr = data.run_profiles;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('patchProjectTeams', function() {
        it('should call patchProjectTeams successfully', function(done) {
          // TODO: uncomment, update parameter values for patchProjectTeams call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var body = new PolyaxonSdk.V1ProjectTeams();
          body.teams = [""];

          instance.patchProjectTeams(owner, project, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ProjectTeams);
            {
              let dataCtr = data.teams;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('restoreProject', function() {
        it('should call restoreProject successfully', function(done) {
          // TODO: uncomment, update parameter values for restoreProject call
          /*
          var owner = "owner_example";
          var project = "project_example";

          instance.restoreProject(owner, project, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('unbookmarkProject', function() {
        it('should call unbookmarkProject successfully', function(done) {
          // TODO: uncomment, update parameter values for unbookmarkProject call
          /*
          var owner = "owner_example";
          var project = "project_example";

          instance.unbookmarkProject(owner, project, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateProject', function() {
        it('should call updateProject successfully', function(done) {
          // TODO: uncomment, update parameter values for updateProject call and complete the assertions
          /*
          var owner = "owner_example";
          var project_name = "project_name_example";
          var body = new PolyaxonSdk.V1Project();
          body.uuid = "";
          body.user = "";
          body.user_email = "";
          body.owner = "";
          body.name = "";
          body.description = "";
          body.tags = [""];
          body.created_at = new Date();
          body.updated_at = new Date();
          body.is_public = "";
          body.deleted = false;
          body.bookmarked = false;
          body.readme = "";
          body.settings = new PolyaxonSdk.V1ProjectSettings();
          body.settings.artifacts_store = "";
          body.settings.connections = [""];
          body.settings.run_profile = "";
          body.settings.run_profiles = [""];
          body.teams = [""];

          instance.updateProject(owner, project_name, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Project);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.user_email).to.be.a('string');
            expect(data.user_email).to.be("");
            expect(data.owner).to.be.a('string');
            expect(data.owner).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.created_at).to.be.a(Date);
            expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            expect(data.updated_at).to.be(new Date());
            expect(data.is_public).to.be.a('string');
            expect(data.is_public).to.be("");
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.bookmarked).to.be.a('boolean');
            expect(data.bookmarked).to.be(false);
            expect(data.readme).to.be.a('string');
            expect(data.readme).to.be("");
            expect(data.settings).to.be.a(PolyaxonSdk.V1ProjectSettings);
                  expect(data.settings.artifacts_store).to.be.a('string');
              expect(data.settings.artifacts_store).to.be("");
              {
                let dataCtr = data.settings.connections;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.settings.run_profile).to.be.a('string');
              expect(data.settings.run_profile).to.be("");
              {
                let dataCtr = data.settings.run_profiles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
            {
              let dataCtr = data.teams;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateProjectSettings', function() {
        it('should call updateProjectSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for updateProjectSettings call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var body = new PolyaxonSdk.V1ProjectSettings();
          body.artifacts_store = "";
          body.connections = [""];
          body.run_profile = "";
          body.run_profiles = [""];

          instance.updateProjectSettings(owner, project, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ProjectSettings);
            expect(data.artifacts_store).to.be.a('string');
            expect(data.artifacts_store).to.be("");
            {
              let dataCtr = data.connections;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.run_profile).to.be.a('string');
            expect(data.run_profile).to.be("");
            {
              let dataCtr = data.run_profiles;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateProjectTeams', function() {
        it('should call updateProjectTeams successfully', function(done) {
          // TODO: uncomment, update parameter values for updateProjectTeams call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var body = new PolyaxonSdk.V1ProjectTeams();
          body.teams = [""];

          instance.updateProjectTeams(owner, project, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ProjectTeams);
            {
              let dataCtr = data.teams;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('uploadProjectArtifact', function() {
        it('should call uploadProjectArtifact successfully', function(done) {
          // TODO: uncomment, update parameter values for uploadProjectArtifact call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";
          var uploadfile = "/path/to/file.txt";
          var opts = {};
          opts.path = "path_example";
          opts.overwrite = true;

          instance.uploadProjectArtifact(owner, project, uuid, uploadfile, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
