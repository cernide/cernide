// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
 * Polyaxon SDKs and REST API specification.
 * Polyaxon SDKs and REST API specification.
 *
 * OpenAPI spec version: 1.0.5
 * Contact: contact@polyaxon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PolyaxonSdk);
  }
}(this, function(expect, PolyaxonSdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PolyaxonSdk.RunsV1Api();
  });

  describe('(package)', function() {
    describe('RunsV1Api', function() {
      describe('archiveRun', function() {
        it('should call archiveRun successfully', function(done) {
          // TODO: uncomment, update parameter values for archiveRun call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";

          instance.archiveRun(owner, project, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('bookmarkRun', function() {
        it('should call bookmarkRun successfully', function(done) {
          // TODO: uncomment, update parameter values for bookmarkRun call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";

          instance.bookmarkRun(owner, project, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('collectRunLogs', function() {
        it('should call collectRunLogs successfully', function(done) {
          // TODO: uncomment, update parameter values for collectRunLogs call
          /*
          var namespace = "namespace_example";
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";

          instance.collectRunLogs(namespace, owner, project, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('copyRun', function() {
        it('should call copyRun successfully', function(done) {
          // TODO: uncomment, update parameter values for copyRun call and complete the assertions
          /*
          var entity_owner = "entity_owner_example";
          var entity_project = "entity_project_example";
          var entity_uuid = "entity_uuid_example";
          var body = new PolyaxonSdk.V1Run();
          body.uuid = "";
          body.name = "";
          body.description = "";
          body.tags = [""];
          body.deleted = false;
          body.user = "";
          body.owner = "";
          body.project = "";
          body.created_at = new Date();
          body.updated_at = new Date();
          body.started_at = new Date();
          body.finished_at = new Date();
          body.is_managed = "";
          body.content = "";
          body.status = new PolyaxonSdk.V1Statuses();
          body.bookmarked = false;
          body.meta_info = ;
          body.is_helper = false;
          body.kind = new PolyaxonSdk.V1RunKind();
          body.meta_kind = new PolyaxonSdk.V1RunKind();
          body.hub = "";
          body.inputs = ;
          body.outputs = ;
          body.is_resume = false;
          body.is_clone = false;
          body.cloning_strategy = new PolyaxonSdk.V1CloningStrategy();
          body.pipeline = "";
          body.original = "";
          body.pipeline_name = "";
          body.original_name = "";
          body.status_conditions = [new PolyaxonSdk.V1StatusCondition()];
          body.status_conditions[0].type = new PolyaxonSdk.V1Statuses();
          body.status_conditions[0].status = "";
          body.status_conditions[0].reason = "";
          body.status_conditions[0].message = "";
          body.status_conditions[0].last_update_time = new Date();
          body.status_conditions[0].last_transition_time = new Date();

          instance.copyRun(entity_owner, entity_project, entity_uuid, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Run);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.owner).to.be.a('string');
            expect(data.owner).to.be("");
            expect(data.project).to.be.a('string');
            expect(data.project).to.be("");
            expect(data.created_at).to.be.a(Date);
            expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            expect(data.updated_at).to.be(new Date());
            expect(data.started_at).to.be.a(Date);
            expect(data.started_at).to.be(new Date());
            expect(data.finished_at).to.be.a(Date);
            expect(data.finished_at).to.be(new Date());
            expect(data.is_managed).to.be.a('string');
            expect(data.is_managed).to.be("");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.status).to.be.a(PolyaxonSdk.V1Statuses);
                expect(data.bookmarked).to.be.a('boolean');
            expect(data.bookmarked).to.be(false);
            expect(data.meta_info).to.be.a(Object);
            expect(data.meta_info).to.be();
            expect(data.is_helper).to.be.a('boolean');
            expect(data.is_helper).to.be(false);
            expect(data.kind).to.be.a(PolyaxonSdk.V1RunKind);
                expect(data.meta_kind).to.be.a(PolyaxonSdk.V1RunKind);
                expect(data.hub).to.be.a('string');
            expect(data.hub).to.be("");
            expect(data.inputs).to.be.a(Object);
            expect(data.inputs).to.be();
            expect(data.outputs).to.be.a(Object);
            expect(data.outputs).to.be();
            expect(data.is_resume).to.be.a('boolean');
            expect(data.is_resume).to.be(false);
            expect(data.is_clone).to.be.a('boolean');
            expect(data.is_clone).to.be(false);
            expect(data.cloning_strategy).to.be.a(PolyaxonSdk.V1CloningStrategy);
                expect(data.pipeline).to.be.a('string');
            expect(data.pipeline).to.be("");
            expect(data.original).to.be.a('string');
            expect(data.original).to.be("");
            expect(data.pipeline_name).to.be.a('string');
            expect(data.pipeline_name).to.be("");
            expect(data.original_name).to.be.a('string');
            expect(data.original_name).to.be("");
            {
              let dataCtr = data.status_conditions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1StatusCondition);
                expect(data.type).to.be.a(PolyaxonSdk.V1Statuses);
                    expect(data.status).to.be.a('string');
                expect(data.status).to.be("");
                expect(data.reason).to.be.a('string');
                expect(data.reason).to.be("");
                expect(data.message).to.be.a('string');
                expect(data.message).to.be("");
                expect(data.last_update_time).to.be.a(Date);
                expect(data.last_update_time).to.be(new Date());
                expect(data.last_transition_time).to.be.a(Date);
                expect(data.last_transition_time).to.be(new Date());
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createRun', function() {
        it('should call createRun successfully', function(done) {
          // TODO: uncomment, update parameter values for createRun call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var body = new PolyaxonSdk.V1OperationBody();
          body.content = new PolyaxonSdk.V1Operation();
          body.content.version = 0.0;
          body.content.kind = "";
          body.content.name = "";
          body.content.tag = "";
          body.content.description = "";
          body.content.tags = [""];
          body.content.profile = "";
          body.content.queue = "";
          body.content.cache = new PolyaxonSdk.V1Cache();
          body.content.cache.disable = false;
          body.content.cache.ttl = 0;
          body.content.cache.inputs = [""];
          body.content.schedule = ;
          body.content.parallel = ;
          body.content.dependencies = [""];
          body.content.trigger = new PolyaxonSdk.V1TriggerPolicy();
          body.content.conditions = [];
          body.content.skip_on_upstream_skip = false;
          body.content.termination = new PolyaxonSdk.V1Termination();
          body.content.termination.max_retries = 0;
          body.content.termination.ttl = 0;
          body.content.termination.timeout = 0;
          body.content.plugins = new PolyaxonSdk.V1Plugins();
          body.content.plugins.auth = false;
          body.content.plugins.docker = false;
          body.content.plugins.shm = false;
          body.content.plugins.collect_artifacts = false;
          body.content.plugins.collect_logs = false;
          body.content.plugins.collect_resources = "";
          body.content.plugins.sync_statuses = false;
          body.content.plugins.log_level = "";
          body.content.plugins.notifications = [new PolyaxonSdk.V1Notification()];
          body.content.plugins.notifications[0].connection = "";
          body.content.plugins.notifications[0].trigger = new PolyaxonSdk.NotificationTrigger();
          body.content.params = {key: new PolyaxonSdk.V1Param()}new PolyaxonSdk.V1Param();
          body.content.params.key.value = ;
          body.content.params.key.ref = "";
          body.content.params.key.search = new PolyaxonSdk.V1ParamSearch();
          body.content.params.key.search.query = "";
          body.content.params.key.search.sort = "";
          body.content.params.key.search.limit = "";
          body.content.run_patch = ;
          body.content.dag_ref = "";
          body.content.url_ref = "";
          body.content.path_ref = "";
          body.content.hub_ref = "";
          body.content.component = new PolyaxonSdk.V1Component();
          body.content.component.version = 0.0;
          body.content.component.kind = "";
          body.content.component.name = "";
          body.content.component.tag = "";
          body.content.component.description = "";
          body.content.component.tags = [""];
          body.content.component.profile = "";
          body.content.component.queue = "";
          body.content.component.cache = new PolyaxonSdk.V1Cache();
          body.content.component.cache.disable = false;
          body.content.component.cache.ttl = 0;
          body.content.component.cache.inputs = [""];
          body.content.component.termination = new PolyaxonSdk.V1Termination();
          body.content.component.termination.max_retries = 0;
          body.content.component.termination.ttl = 0;
          body.content.component.termination.timeout = 0;
          body.content.component.plugins = new PolyaxonSdk.V1Plugins();
          body.content.component.plugins.auth = false;
          body.content.component.plugins.docker = false;
          body.content.component.plugins.shm = false;
          body.content.component.plugins.collect_artifacts = false;
          body.content.component.plugins.collect_logs = false;
          body.content.component.plugins.collect_resources = "";
          body.content.component.plugins.sync_statuses = false;
          body.content.component.plugins.log_level = "";
          body.content.component.plugins.notifications = [new PolyaxonSdk.V1Notification()];
          body.content.component.plugins.notifications[0].connection = "";
          body.content.component.plugins.notifications[0].trigger = new PolyaxonSdk.NotificationTrigger();
          body.content.component.inputs = [new PolyaxonSdk.V1IO()];
          body.content.component.inputs[0].name = "";
          body.content.component.inputs[0].description = "";
          body.content.component.inputs[0].iotype = "";
          body.content.component.inputs[0].value = ;
          body.content.component.inputs[0].is_optional = false;
          body.content.component.inputs[0].is_list = false;
          body.content.component.inputs[0].is_flag = false;
          body.content.component.inputs[0].delay_validation = false;
          body.content.component.inputs[0].options = [];
          body.content.component.outputs = [new PolyaxonSdk.V1IO()];
          body.content.component.outputs[0].name = "";
          body.content.component.outputs[0].description = "";
          body.content.component.outputs[0].iotype = "";
          body.content.component.outputs[0].value = ;
          body.content.component.outputs[0].is_optional = false;
          body.content.component.outputs[0].is_list = false;
          body.content.component.outputs[0].is_flag = false;
          body.content.component.outputs[0].delay_validation = false;
          body.content.component.outputs[0].options = [];
          body.content.component.run = ;
          body.is_managed = false;
          body.name = "";
          body.description = "";
          body.tags = [""];

          instance.createRun(owner, project, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Run);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.owner).to.be.a('string');
            expect(data.owner).to.be("");
            expect(data.project).to.be.a('string');
            expect(data.project).to.be("");
            expect(data.created_at).to.be.a(Date);
            expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            expect(data.updated_at).to.be(new Date());
            expect(data.started_at).to.be.a(Date);
            expect(data.started_at).to.be(new Date());
            expect(data.finished_at).to.be.a(Date);
            expect(data.finished_at).to.be(new Date());
            expect(data.is_managed).to.be.a('string');
            expect(data.is_managed).to.be("");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.status).to.be.a(PolyaxonSdk.V1Statuses);
                expect(data.bookmarked).to.be.a('boolean');
            expect(data.bookmarked).to.be(false);
            expect(data.meta_info).to.be.a(Object);
            expect(data.meta_info).to.be();
            expect(data.is_helper).to.be.a('boolean');
            expect(data.is_helper).to.be(false);
            expect(data.kind).to.be.a(PolyaxonSdk.V1RunKind);
                expect(data.meta_kind).to.be.a(PolyaxonSdk.V1RunKind);
                expect(data.hub).to.be.a('string');
            expect(data.hub).to.be("");
            expect(data.inputs).to.be.a(Object);
            expect(data.inputs).to.be();
            expect(data.outputs).to.be.a(Object);
            expect(data.outputs).to.be();
            expect(data.is_resume).to.be.a('boolean');
            expect(data.is_resume).to.be(false);
            expect(data.is_clone).to.be.a('boolean');
            expect(data.is_clone).to.be(false);
            expect(data.cloning_strategy).to.be.a(PolyaxonSdk.V1CloningStrategy);
                expect(data.pipeline).to.be.a('string');
            expect(data.pipeline).to.be("");
            expect(data.original).to.be.a('string');
            expect(data.original).to.be("");
            expect(data.pipeline_name).to.be.a('string');
            expect(data.pipeline_name).to.be("");
            expect(data.original_name).to.be.a('string');
            expect(data.original_name).to.be("");
            {
              let dataCtr = data.status_conditions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1StatusCondition);
                expect(data.type).to.be.a(PolyaxonSdk.V1Statuses);
                    expect(data.status).to.be.a('string');
                expect(data.status).to.be("");
                expect(data.reason).to.be.a('string');
                expect(data.reason).to.be("");
                expect(data.message).to.be.a('string');
                expect(data.message).to.be("");
                expect(data.last_update_time).to.be.a(Date);
                expect(data.last_update_time).to.be(new Date());
                expect(data.last_transition_time).to.be.a(Date);
                expect(data.last_transition_time).to.be(new Date());
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createRunArtifactsLineage', function() {
        it('should call createRunArtifactsLineage successfully', function(done) {
          // TODO: uncomment, update parameter values for createRunArtifactsLineage call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";
          var body = new PolyaxonSdk.V1RunArtifacts();
          body.artifacts = [new PolyaxonSdk.V1RunArtifact()];
          body.artifacts[0].name = "";
          body.artifacts[0].state = "";
          body.artifacts[0].kind = new PolyaxonSdk.V1ArtifactKind();
          body.artifacts[0].path = "";
          body.artifacts[0].connection = "";
          body.artifacts[0].summary = ;
          body.artifacts[0].is_input = false;

          instance.createRunArtifactsLineage(owner, project, uuid, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createRunStatus', function() {
        it('should call createRunStatus successfully', function(done) {
          // TODO: uncomment, update parameter values for createRunStatus call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";
          var body = new PolyaxonSdk.V1EntityStatusBodyRequest();
          body.owner = "";
          body.project = "";
          body.uuid = "";
          body.condition = new PolyaxonSdk.V1StatusCondition();
          body.condition.type = new PolyaxonSdk.V1Statuses();
          body.condition.status = "";
          body.condition.reason = "";
          body.condition.message = "";
          body.condition.last_update_time = new Date();
          body.condition.last_transition_time = new Date();

          instance.createRunStatus(owner, project, uuid, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Status);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.status).to.be.a(PolyaxonSdk.V1Statuses);
                {
              let dataCtr = data.status_conditions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1StatusCondition);
                expect(data.type).to.be.a(PolyaxonSdk.V1Statuses);
                    expect(data.status).to.be.a('string');
                expect(data.status).to.be("");
                expect(data.reason).to.be.a('string');
                expect(data.reason).to.be("");
                expect(data.message).to.be.a('string');
                expect(data.message).to.be("");
                expect(data.last_update_time).to.be.a(Date);
                expect(data.last_update_time).to.be(new Date());
                expect(data.last_transition_time).to.be.a(Date);
                expect(data.last_transition_time).to.be(new Date());
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteRun', function() {
        it('should call deleteRun successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteRun call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";

          instance.deleteRun(owner, project, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteRunArtifactLineage', function() {
        it('should call deleteRunArtifactLineage successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteRunArtifactLineage call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";
          var name = "name_example";
          var opts = {};
          opts.namespace = "namespace_example";
          opts.kind = "model";
          opts.names = "names_example";
          opts.runs = "runs_example";
          opts.orient = "orient_example";
          opts.path = "path_example";

          instance.deleteRunArtifactLineage(owner, project, uuid, name, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteRuns', function() {
        it('should call deleteRuns successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteRuns call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var body = new PolyaxonSdk.V1Uuids();
          body.uuids = [""];

          instance.deleteRuns(owner, project, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMultiRunEvents', function() {
        it('should call getMultiRunEvents successfully', function(done) {
          // TODO: uncomment, update parameter values for getMultiRunEvents call and complete the assertions
          /*
          var namespace = "namespace_example";
          var owner = "owner_example";
          var project = "project_example";
          var kind = "kind_example";
          var opts = {};
          opts.uuid = "uuid_example";
          opts.name = "name_example";
          opts.names = "names_example";
          opts.runs = "runs_example";
          opts.orient = "orient_example";
          opts.path = "path_example";

          instance.getMultiRunEvents(namespace, owner, project, kind, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1EventsResponse);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRun', function() {
        it('should call getRun successfully', function(done) {
          // TODO: uncomment, update parameter values for getRun call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";

          instance.getRun(owner, project, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Run);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.owner).to.be.a('string');
            expect(data.owner).to.be("");
            expect(data.project).to.be.a('string');
            expect(data.project).to.be("");
            expect(data.created_at).to.be.a(Date);
            expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            expect(data.updated_at).to.be(new Date());
            expect(data.started_at).to.be.a(Date);
            expect(data.started_at).to.be(new Date());
            expect(data.finished_at).to.be.a(Date);
            expect(data.finished_at).to.be(new Date());
            expect(data.is_managed).to.be.a('string');
            expect(data.is_managed).to.be("");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.status).to.be.a(PolyaxonSdk.V1Statuses);
                expect(data.bookmarked).to.be.a('boolean');
            expect(data.bookmarked).to.be(false);
            expect(data.meta_info).to.be.a(Object);
            expect(data.meta_info).to.be();
            expect(data.is_helper).to.be.a('boolean');
            expect(data.is_helper).to.be(false);
            expect(data.kind).to.be.a(PolyaxonSdk.V1RunKind);
                expect(data.meta_kind).to.be.a(PolyaxonSdk.V1RunKind);
                expect(data.hub).to.be.a('string');
            expect(data.hub).to.be("");
            expect(data.inputs).to.be.a(Object);
            expect(data.inputs).to.be();
            expect(data.outputs).to.be.a(Object);
            expect(data.outputs).to.be();
            expect(data.is_resume).to.be.a('boolean');
            expect(data.is_resume).to.be(false);
            expect(data.is_clone).to.be.a('boolean');
            expect(data.is_clone).to.be(false);
            expect(data.cloning_strategy).to.be.a(PolyaxonSdk.V1CloningStrategy);
                expect(data.pipeline).to.be.a('string');
            expect(data.pipeline).to.be("");
            expect(data.original).to.be.a('string');
            expect(data.original).to.be("");
            expect(data.pipeline_name).to.be.a('string');
            expect(data.pipeline_name).to.be("");
            expect(data.original_name).to.be.a('string');
            expect(data.original_name).to.be("");
            {
              let dataCtr = data.status_conditions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1StatusCondition);
                expect(data.type).to.be.a(PolyaxonSdk.V1Statuses);
                    expect(data.status).to.be.a('string');
                expect(data.status).to.be("");
                expect(data.reason).to.be.a('string');
                expect(data.reason).to.be("");
                expect(data.message).to.be.a('string');
                expect(data.message).to.be("");
                expect(data.last_update_time).to.be.a(Date);
                expect(data.last_update_time).to.be(new Date());
                expect(data.last_transition_time).to.be.a(Date);
                expect(data.last_transition_time).to.be(new Date());
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRunArtifact', function() {
        it('should call getRunArtifact successfully', function(done) {
          // TODO: uncomment, update parameter values for getRunArtifact call and complete the assertions
          /*
          var namespace = "namespace_example";
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";
          var opts = {};
          opts.path = "path_example";
          opts.stream = true;

          instance.getRunArtifact(namespace, owner, project, uuid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('string');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRunArtifactLineage', function() {
        it('should call getRunArtifactLineage successfully', function(done) {
          // TODO: uncomment, update parameter values for getRunArtifactLineage call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";
          var name = "name_example";
          var opts = {};
          opts.namespace = "namespace_example";
          opts.kind = "model";
          opts.names = "names_example";
          opts.runs = "runs_example";
          opts.orient = "orient_example";
          opts.path = "path_example";

          instance.getRunArtifactLineage(owner, project, uuid, name, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1RunArtifact);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.state).to.be.a('string');
            expect(data.state).to.be("");
            expect(data.kind).to.be.a(PolyaxonSdk.V1ArtifactKind);
                expect(data.path).to.be.a('string');
            expect(data.path).to.be("");
            expect(data.connection).to.be.a('string');
            expect(data.connection).to.be("");
            expect(data.summary).to.be.a(Object);
            expect(data.summary).to.be();
            expect(data.is_input).to.be.a('boolean');
            expect(data.is_input).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRunArtifacts', function() {
        it('should call getRunArtifacts successfully', function(done) {
          // TODO: uncomment, update parameter values for getRunArtifacts call and complete the assertions
          /*
          var namespace = "namespace_example";
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";
          var opts = {};
          opts.path = "path_example";

          instance.getRunArtifacts(namespace, owner, project, uuid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('string');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRunArtifactsLineage', function() {
        it('should call getRunArtifactsLineage successfully', function(done) {
          // TODO: uncomment, update parameter values for getRunArtifactsLineage call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";
          var opts = {};
          opts.limit = 56;
          opts.sort = "sort_example";
          opts.query = "query_example";

          instance.getRunArtifactsLineage(owner, project, uuid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ListRunArtifactsResponse);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1RunArtifact);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.state).to.be.a('string');
                expect(data.state).to.be("");
                expect(data.kind).to.be.a(PolyaxonSdk.V1ArtifactKind);
                    expect(data.path).to.be.a('string');
                expect(data.path).to.be("");
                expect(data.connection).to.be.a('string');
                expect(data.connection).to.be("");
                expect(data.summary).to.be.a(Object);
                expect(data.summary).to.be();
                expect(data.is_input).to.be.a('boolean');
                expect(data.is_input).to.be(false);
              }
            }
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRunArtifactsLineageNames', function() {
        it('should call getRunArtifactsLineageNames successfully', function(done) {
          // TODO: uncomment, update parameter values for getRunArtifactsLineageNames call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";
          var opts = {};
          opts.limit = 56;
          opts.sort = "sort_example";
          opts.query = "query_example";

          instance.getRunArtifactsLineageNames(owner, project, uuid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ListRunArtifactsResponse);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1RunArtifact);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.state).to.be.a('string');
                expect(data.state).to.be("");
                expect(data.kind).to.be.a(PolyaxonSdk.V1ArtifactKind);
                    expect(data.path).to.be.a('string');
                expect(data.path).to.be("");
                expect(data.connection).to.be.a('string');
                expect(data.connection).to.be("");
                expect(data.summary).to.be.a(Object);
                expect(data.summary).to.be();
                expect(data.is_input).to.be.a('boolean');
                expect(data.is_input).to.be(false);
              }
            }
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRunArtifactsTree', function() {
        it('should call getRunArtifactsTree successfully', function(done) {
          // TODO: uncomment, update parameter values for getRunArtifactsTree call and complete the assertions
          /*
          var namespace = "namespace_example";
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";
          var opts = {};
          opts.name = "name_example";
          opts.kind = "model";
          opts.names = "names_example";
          opts.runs = "runs_example";
          opts.orient = "orient_example";
          opts.path = "path_example";

          instance.getRunArtifactsTree(namespace, owner, project, uuid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ArtifactTreeResponse);
            {
              let dataCtr = data.files;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.dirs;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.is_done).to.be.a('boolean');
            expect(data.is_done).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRunEvents', function() {
        it('should call getRunEvents successfully', function(done) {
          // TODO: uncomment, update parameter values for getRunEvents call and complete the assertions
          /*
          var namespace = "namespace_example";
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";
          var kind = "kind_example";
          var opts = {};
          opts.name = "name_example";
          opts.names = "names_example";
          opts.runs = "runs_example";
          opts.orient = "orient_example";
          opts.path = "path_example";

          instance.getRunEvents(namespace, owner, project, uuid, kind, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1EventsResponse);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRunLogs', function() {
        it('should call getRunLogs successfully', function(done) {
          // TODO: uncomment, update parameter values for getRunLogs call and complete the assertions
          /*
          var namespace = "namespace_example";
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";
          var opts = {};
          opts.last_time = new Date("2013-10-20T19:20:30+01:00");
          opts.last_file = "last_file_example";

          instance.getRunLogs(namespace, owner, project, uuid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Logs);
            {
              let dataCtr = data.logs;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1Log);
                expect(data.timestamp).to.be.a(Date);
                expect(data.timestamp).to.be(new Date());
                expect(data.node).to.be.a('string');
                expect(data.node).to.be("");
                expect(data.pod).to.be.a('string');
                expect(data.pod).to.be("");
                expect(data.container).to.be.a('string');
                expect(data.container).to.be("");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("");
              }
            }
            expect(data.last_time).to.be.a(Date);
            expect(data.last_time).to.be(new Date());
            expect(data.last_file).to.be.a('string');
            expect(data.last_file).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRunNamespace', function() {
        it('should call getRunNamespace successfully', function(done) {
          // TODO: uncomment, update parameter values for getRunNamespace call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";

          instance.getRunNamespace(owner, project, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1RunSettings);
            expect(data.namespace).to.be.a('string');
            expect(data.namespace).to.be("");
            expect(data.agent).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                  expect(data.agent.uuid).to.be.a('string');
              expect(data.agent.uuid).to.be("");
              expect(data.agent.name).to.be.a('string');
              expect(data.agent.name).to.be("");
            expect(data.queue).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                  expect(data.queue.uuid).to.be.a('string');
              expect(data.queue.uuid).to.be("");
              expect(data.queue.name).to.be.a('string');
              expect(data.queue.name).to.be("");
            expect(data.artifacts_store).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                  expect(data.artifacts_store.uuid).to.be.a('string');
              expect(data.artifacts_store.uuid).to.be("");
              expect(data.artifacts_store.name).to.be.a('string');
              expect(data.artifacts_store.name).to.be("");
            {
              let dataCtr = data.connections;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                expect(data.uuid).to.be.a('string');
                expect(data.uuid).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRunSettings', function() {
        it('should call getRunSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for getRunSettings call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";

          instance.getRunSettings(owner, project, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1RunSettings);
            expect(data.namespace).to.be.a('string');
            expect(data.namespace).to.be("");
            expect(data.agent).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                  expect(data.agent.uuid).to.be.a('string');
              expect(data.agent.uuid).to.be("");
              expect(data.agent.name).to.be.a('string');
              expect(data.agent.name).to.be("");
            expect(data.queue).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                  expect(data.queue.uuid).to.be.a('string');
              expect(data.queue.uuid).to.be("");
              expect(data.queue.name).to.be.a('string');
              expect(data.queue.name).to.be("");
            expect(data.artifacts_store).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                  expect(data.artifacts_store.uuid).to.be.a('string');
              expect(data.artifacts_store.uuid).to.be("");
              expect(data.artifacts_store.name).to.be.a('string');
              expect(data.artifacts_store.name).to.be("");
            {
              let dataCtr = data.connections;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                expect(data.uuid).to.be.a('string');
                expect(data.uuid).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRunStatuses', function() {
        it('should call getRunStatuses successfully', function(done) {
          // TODO: uncomment, update parameter values for getRunStatuses call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";

          instance.getRunStatuses(owner, project, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Status);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.status).to.be.a(PolyaxonSdk.V1Statuses);
                {
              let dataCtr = data.status_conditions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1StatusCondition);
                expect(data.type).to.be.a(PolyaxonSdk.V1Statuses);
                    expect(data.status).to.be.a('string');
                expect(data.status).to.be("");
                expect(data.reason).to.be.a('string');
                expect(data.reason).to.be("");
                expect(data.message).to.be.a('string');
                expect(data.message).to.be("");
                expect(data.last_update_time).to.be.a(Date);
                expect(data.last_update_time).to.be(new Date());
                expect(data.last_transition_time).to.be.a(Date);
                expect(data.last_transition_time).to.be(new Date());
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('impersonateToken', function() {
        it('should call impersonateToken successfully', function(done) {
          // TODO: uncomment, update parameter values for impersonateToken call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";

          instance.impersonateToken(owner, project, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Auth);
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('invalidateRun', function() {
        it('should call invalidateRun successfully', function(done) {
          // TODO: uncomment, update parameter values for invalidateRun call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";
          var body = new PolyaxonSdk.V1ProjectEntityResourceRequest();
          body.owner = "";
          body.project = "";
          body.uuid = "";

          instance.invalidateRun(owner, project, uuid, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('invalidateRuns', function() {
        it('should call invalidateRuns successfully', function(done) {
          // TODO: uncomment, update parameter values for invalidateRuns call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var body = new PolyaxonSdk.V1Uuids();
          body.uuids = [""];

          instance.invalidateRuns(owner, project, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listArchivedRuns', function() {
        it('should call listArchivedRuns successfully', function(done) {
          // TODO: uncomment, update parameter values for listArchivedRuns call and complete the assertions
          /*
          var user = "user_example";
          var opts = {};
          opts.offset = 56;
          opts.limit = 56;
          opts.sort = "sort_example";
          opts.query = "query_example";

          instance.listArchivedRuns(user, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ListRunsResponse);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1Run);
                expect(data.uuid).to.be.a('string');
                expect(data.uuid).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                {
                  let dataCtr = data.tags;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.deleted).to.be.a('boolean');
                expect(data.deleted).to.be(false);
                expect(data.user).to.be.a('string');
                expect(data.user).to.be("");
                expect(data.owner).to.be.a('string');
                expect(data.owner).to.be("");
                expect(data.project).to.be.a('string');
                expect(data.project).to.be("");
                expect(data.created_at).to.be.a(Date);
                expect(data.created_at).to.be(new Date());
                expect(data.updated_at).to.be.a(Date);
                expect(data.updated_at).to.be(new Date());
                expect(data.started_at).to.be.a(Date);
                expect(data.started_at).to.be(new Date());
                expect(data.finished_at).to.be.a(Date);
                expect(data.finished_at).to.be(new Date());
                expect(data.is_managed).to.be.a('string');
                expect(data.is_managed).to.be("");
                expect(data.content).to.be.a('string');
                expect(data.content).to.be("");
                expect(data.status).to.be.a(PolyaxonSdk.V1Statuses);
                    expect(data.bookmarked).to.be.a('boolean');
                expect(data.bookmarked).to.be(false);
                expect(data.meta_info).to.be.a(Object);
                expect(data.meta_info).to.be();
                expect(data.is_helper).to.be.a('boolean');
                expect(data.is_helper).to.be(false);
                expect(data.kind).to.be.a(PolyaxonSdk.V1RunKind);
                    expect(data.meta_kind).to.be.a(PolyaxonSdk.V1RunKind);
                    expect(data.hub).to.be.a('string');
                expect(data.hub).to.be("");
                expect(data.inputs).to.be.a(Object);
                expect(data.inputs).to.be();
                expect(data.outputs).to.be.a(Object);
                expect(data.outputs).to.be();
                expect(data.is_resume).to.be.a('boolean');
                expect(data.is_resume).to.be(false);
                expect(data.is_clone).to.be.a('boolean');
                expect(data.is_clone).to.be(false);
                expect(data.cloning_strategy).to.be.a(PolyaxonSdk.V1CloningStrategy);
                    expect(data.pipeline).to.be.a('string');
                expect(data.pipeline).to.be("");
                expect(data.original).to.be.a('string');
                expect(data.original).to.be("");
                expect(data.pipeline_name).to.be.a('string');
                expect(data.pipeline_name).to.be("");
                expect(data.original_name).to.be.a('string');
                expect(data.original_name).to.be("");
                {
                  let dataCtr = data.status_conditions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PolyaxonSdk.V1StatusCondition);
                    expect(data.type).to.be.a(PolyaxonSdk.V1Statuses);
                        expect(data.status).to.be.a('string');
                    expect(data.status).to.be("");
                    expect(data.reason).to.be.a('string');
                    expect(data.reason).to.be("");
                    expect(data.message).to.be.a('string');
                    expect(data.message).to.be("");
                    expect(data.last_update_time).to.be.a(Date);
                    expect(data.last_update_time).to.be(new Date());
                    expect(data.last_transition_time).to.be.a(Date);
                    expect(data.last_transition_time).to.be(new Date());
                  }
                }
              }
            }
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listBookmarkedRuns', function() {
        it('should call listBookmarkedRuns successfully', function(done) {
          // TODO: uncomment, update parameter values for listBookmarkedRuns call and complete the assertions
          /*
          var user = "user_example";
          var opts = {};
          opts.offset = 56;
          opts.limit = 56;
          opts.sort = "sort_example";
          opts.query = "query_example";

          instance.listBookmarkedRuns(user, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ListRunsResponse);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1Run);
                expect(data.uuid).to.be.a('string');
                expect(data.uuid).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                {
                  let dataCtr = data.tags;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.deleted).to.be.a('boolean');
                expect(data.deleted).to.be(false);
                expect(data.user).to.be.a('string');
                expect(data.user).to.be("");
                expect(data.owner).to.be.a('string');
                expect(data.owner).to.be("");
                expect(data.project).to.be.a('string');
                expect(data.project).to.be("");
                expect(data.created_at).to.be.a(Date);
                expect(data.created_at).to.be(new Date());
                expect(data.updated_at).to.be.a(Date);
                expect(data.updated_at).to.be(new Date());
                expect(data.started_at).to.be.a(Date);
                expect(data.started_at).to.be(new Date());
                expect(data.finished_at).to.be.a(Date);
                expect(data.finished_at).to.be(new Date());
                expect(data.is_managed).to.be.a('string');
                expect(data.is_managed).to.be("");
                expect(data.content).to.be.a('string');
                expect(data.content).to.be("");
                expect(data.status).to.be.a(PolyaxonSdk.V1Statuses);
                    expect(data.bookmarked).to.be.a('boolean');
                expect(data.bookmarked).to.be(false);
                expect(data.meta_info).to.be.a(Object);
                expect(data.meta_info).to.be();
                expect(data.is_helper).to.be.a('boolean');
                expect(data.is_helper).to.be(false);
                expect(data.kind).to.be.a(PolyaxonSdk.V1RunKind);
                    expect(data.meta_kind).to.be.a(PolyaxonSdk.V1RunKind);
                    expect(data.hub).to.be.a('string');
                expect(data.hub).to.be("");
                expect(data.inputs).to.be.a(Object);
                expect(data.inputs).to.be();
                expect(data.outputs).to.be.a(Object);
                expect(data.outputs).to.be();
                expect(data.is_resume).to.be.a('boolean');
                expect(data.is_resume).to.be(false);
                expect(data.is_clone).to.be.a('boolean');
                expect(data.is_clone).to.be(false);
                expect(data.cloning_strategy).to.be.a(PolyaxonSdk.V1CloningStrategy);
                    expect(data.pipeline).to.be.a('string');
                expect(data.pipeline).to.be("");
                expect(data.original).to.be.a('string');
                expect(data.original).to.be("");
                expect(data.pipeline_name).to.be.a('string');
                expect(data.pipeline_name).to.be("");
                expect(data.original_name).to.be.a('string');
                expect(data.original_name).to.be("");
                {
                  let dataCtr = data.status_conditions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PolyaxonSdk.V1StatusCondition);
                    expect(data.type).to.be.a(PolyaxonSdk.V1Statuses);
                        expect(data.status).to.be.a('string');
                    expect(data.status).to.be("");
                    expect(data.reason).to.be.a('string');
                    expect(data.reason).to.be("");
                    expect(data.message).to.be.a('string');
                    expect(data.message).to.be("");
                    expect(data.last_update_time).to.be.a(Date);
                    expect(data.last_update_time).to.be(new Date());
                    expect(data.last_transition_time).to.be.a(Date);
                    expect(data.last_transition_time).to.be(new Date());
                  }
                }
              }
            }
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listRuns', function() {
        it('should call listRuns successfully', function(done) {
          // TODO: uncomment, update parameter values for listRuns call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var opts = {};
          opts.offset = 56;
          opts.limit = 56;
          opts.sort = "sort_example";
          opts.query = "query_example";

          instance.listRuns(owner, project, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ListRunsResponse);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1Run);
                expect(data.uuid).to.be.a('string');
                expect(data.uuid).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                {
                  let dataCtr = data.tags;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.deleted).to.be.a('boolean');
                expect(data.deleted).to.be(false);
                expect(data.user).to.be.a('string');
                expect(data.user).to.be("");
                expect(data.owner).to.be.a('string');
                expect(data.owner).to.be("");
                expect(data.project).to.be.a('string');
                expect(data.project).to.be("");
                expect(data.created_at).to.be.a(Date);
                expect(data.created_at).to.be(new Date());
                expect(data.updated_at).to.be.a(Date);
                expect(data.updated_at).to.be(new Date());
                expect(data.started_at).to.be.a(Date);
                expect(data.started_at).to.be(new Date());
                expect(data.finished_at).to.be.a(Date);
                expect(data.finished_at).to.be(new Date());
                expect(data.is_managed).to.be.a('string');
                expect(data.is_managed).to.be("");
                expect(data.content).to.be.a('string');
                expect(data.content).to.be("");
                expect(data.status).to.be.a(PolyaxonSdk.V1Statuses);
                    expect(data.bookmarked).to.be.a('boolean');
                expect(data.bookmarked).to.be(false);
                expect(data.meta_info).to.be.a(Object);
                expect(data.meta_info).to.be();
                expect(data.is_helper).to.be.a('boolean');
                expect(data.is_helper).to.be(false);
                expect(data.kind).to.be.a(PolyaxonSdk.V1RunKind);
                    expect(data.meta_kind).to.be.a(PolyaxonSdk.V1RunKind);
                    expect(data.hub).to.be.a('string');
                expect(data.hub).to.be("");
                expect(data.inputs).to.be.a(Object);
                expect(data.inputs).to.be();
                expect(data.outputs).to.be.a(Object);
                expect(data.outputs).to.be();
                expect(data.is_resume).to.be.a('boolean');
                expect(data.is_resume).to.be(false);
                expect(data.is_clone).to.be.a('boolean');
                expect(data.is_clone).to.be(false);
                expect(data.cloning_strategy).to.be.a(PolyaxonSdk.V1CloningStrategy);
                    expect(data.pipeline).to.be.a('string');
                expect(data.pipeline).to.be("");
                expect(data.original).to.be.a('string');
                expect(data.original).to.be("");
                expect(data.pipeline_name).to.be.a('string');
                expect(data.pipeline_name).to.be("");
                expect(data.original_name).to.be.a('string');
                expect(data.original_name).to.be("");
                {
                  let dataCtr = data.status_conditions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PolyaxonSdk.V1StatusCondition);
                    expect(data.type).to.be.a(PolyaxonSdk.V1Statuses);
                        expect(data.status).to.be.a('string');
                    expect(data.status).to.be("");
                    expect(data.reason).to.be.a('string');
                    expect(data.reason).to.be("");
                    expect(data.message).to.be.a('string');
                    expect(data.message).to.be("");
                    expect(data.last_update_time).to.be.a(Date);
                    expect(data.last_update_time).to.be(new Date());
                    expect(data.last_transition_time).to.be.a(Date);
                    expect(data.last_transition_time).to.be(new Date());
                  }
                }
              }
            }
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listRunsIo', function() {
        it('should call listRunsIo successfully', function(done) {
          // TODO: uncomment, update parameter values for listRunsIo call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var opts = {};
          opts.offset = 56;
          opts.limit = 56;
          opts.sort = "sort_example";
          opts.query = "query_example";

          instance.listRunsIo(owner, project, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ListRunsResponse);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1Run);
                expect(data.uuid).to.be.a('string');
                expect(data.uuid).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                {
                  let dataCtr = data.tags;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.deleted).to.be.a('boolean');
                expect(data.deleted).to.be(false);
                expect(data.user).to.be.a('string');
                expect(data.user).to.be("");
                expect(data.owner).to.be.a('string');
                expect(data.owner).to.be("");
                expect(data.project).to.be.a('string');
                expect(data.project).to.be("");
                expect(data.created_at).to.be.a(Date);
                expect(data.created_at).to.be(new Date());
                expect(data.updated_at).to.be.a(Date);
                expect(data.updated_at).to.be(new Date());
                expect(data.started_at).to.be.a(Date);
                expect(data.started_at).to.be(new Date());
                expect(data.finished_at).to.be.a(Date);
                expect(data.finished_at).to.be(new Date());
                expect(data.is_managed).to.be.a('string');
                expect(data.is_managed).to.be("");
                expect(data.content).to.be.a('string');
                expect(data.content).to.be("");
                expect(data.status).to.be.a(PolyaxonSdk.V1Statuses);
                    expect(data.bookmarked).to.be.a('boolean');
                expect(data.bookmarked).to.be(false);
                expect(data.meta_info).to.be.a(Object);
                expect(data.meta_info).to.be();
                expect(data.is_helper).to.be.a('boolean');
                expect(data.is_helper).to.be(false);
                expect(data.kind).to.be.a(PolyaxonSdk.V1RunKind);
                    expect(data.meta_kind).to.be.a(PolyaxonSdk.V1RunKind);
                    expect(data.hub).to.be.a('string');
                expect(data.hub).to.be("");
                expect(data.inputs).to.be.a(Object);
                expect(data.inputs).to.be();
                expect(data.outputs).to.be.a(Object);
                expect(data.outputs).to.be();
                expect(data.is_resume).to.be.a('boolean');
                expect(data.is_resume).to.be(false);
                expect(data.is_clone).to.be.a('boolean');
                expect(data.is_clone).to.be(false);
                expect(data.cloning_strategy).to.be.a(PolyaxonSdk.V1CloningStrategy);
                    expect(data.pipeline).to.be.a('string');
                expect(data.pipeline).to.be("");
                expect(data.original).to.be.a('string');
                expect(data.original).to.be("");
                expect(data.pipeline_name).to.be.a('string');
                expect(data.pipeline_name).to.be("");
                expect(data.original_name).to.be.a('string');
                expect(data.original_name).to.be("");
                {
                  let dataCtr = data.status_conditions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PolyaxonSdk.V1StatusCondition);
                    expect(data.type).to.be.a(PolyaxonSdk.V1Statuses);
                        expect(data.status).to.be.a('string');
                    expect(data.status).to.be("");
                    expect(data.reason).to.be.a('string');
                    expect(data.reason).to.be("");
                    expect(data.message).to.be.a('string');
                    expect(data.message).to.be("");
                    expect(data.last_update_time).to.be.a(Date);
                    expect(data.last_update_time).to.be(new Date());
                    expect(data.last_transition_time).to.be.a(Date);
                    expect(data.last_transition_time).to.be(new Date());
                  }
                }
              }
            }
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('notifyRunStatus', function() {
        it('should call notifyRunStatus successfully', function(done) {
          // TODO: uncomment, update parameter values for notifyRunStatus call
          /*
          var namespace = "namespace_example";
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";
          var body = new PolyaxonSdk.V1EntityNotificationBody();
          body.namespace = "";
          body.owner = "";
          body.project = "";
          body.uuid = "";
          body.name = "";
          body.condition = new PolyaxonSdk.V1StatusCondition();
          body.condition.type = new PolyaxonSdk.V1Statuses();
          body.condition.status = "";
          body.condition.reason = "";
          body.condition.message = "";
          body.condition.last_update_time = new Date();
          body.condition.last_transition_time = new Date();
          body.connections = [""];

          instance.notifyRunStatus(namespace, owner, project, uuid, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('patchRun', function() {
        it('should call patchRun successfully', function(done) {
          // TODO: uncomment, update parameter values for patchRun call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var run_uuid = "run_uuid_example";
          var body = new PolyaxonSdk.V1Run();
          body.uuid = "";
          body.name = "";
          body.description = "";
          body.tags = [""];
          body.deleted = false;
          body.user = "";
          body.owner = "";
          body.project = "";
          body.created_at = new Date();
          body.updated_at = new Date();
          body.started_at = new Date();
          body.finished_at = new Date();
          body.is_managed = "";
          body.content = "";
          body.status = new PolyaxonSdk.V1Statuses();
          body.bookmarked = false;
          body.meta_info = ;
          body.is_helper = false;
          body.kind = new PolyaxonSdk.V1RunKind();
          body.meta_kind = new PolyaxonSdk.V1RunKind();
          body.hub = "";
          body.inputs = ;
          body.outputs = ;
          body.is_resume = false;
          body.is_clone = false;
          body.cloning_strategy = new PolyaxonSdk.V1CloningStrategy();
          body.pipeline = "";
          body.original = "";
          body.pipeline_name = "";
          body.original_name = "";
          body.status_conditions = [new PolyaxonSdk.V1StatusCondition()];
          body.status_conditions[0].type = new PolyaxonSdk.V1Statuses();
          body.status_conditions[0].status = "";
          body.status_conditions[0].reason = "";
          body.status_conditions[0].message = "";
          body.status_conditions[0].last_update_time = new Date();
          body.status_conditions[0].last_transition_time = new Date();

          instance.patchRun(owner, project, run_uuid, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Run);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.owner).to.be.a('string');
            expect(data.owner).to.be("");
            expect(data.project).to.be.a('string');
            expect(data.project).to.be("");
            expect(data.created_at).to.be.a(Date);
            expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            expect(data.updated_at).to.be(new Date());
            expect(data.started_at).to.be.a(Date);
            expect(data.started_at).to.be(new Date());
            expect(data.finished_at).to.be.a(Date);
            expect(data.finished_at).to.be(new Date());
            expect(data.is_managed).to.be.a('string');
            expect(data.is_managed).to.be("");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.status).to.be.a(PolyaxonSdk.V1Statuses);
                expect(data.bookmarked).to.be.a('boolean');
            expect(data.bookmarked).to.be(false);
            expect(data.meta_info).to.be.a(Object);
            expect(data.meta_info).to.be();
            expect(data.is_helper).to.be.a('boolean');
            expect(data.is_helper).to.be(false);
            expect(data.kind).to.be.a(PolyaxonSdk.V1RunKind);
                expect(data.meta_kind).to.be.a(PolyaxonSdk.V1RunKind);
                expect(data.hub).to.be.a('string');
            expect(data.hub).to.be("");
            expect(data.inputs).to.be.a(Object);
            expect(data.inputs).to.be();
            expect(data.outputs).to.be.a(Object);
            expect(data.outputs).to.be();
            expect(data.is_resume).to.be.a('boolean');
            expect(data.is_resume).to.be(false);
            expect(data.is_clone).to.be.a('boolean');
            expect(data.is_clone).to.be(false);
            expect(data.cloning_strategy).to.be.a(PolyaxonSdk.V1CloningStrategy);
                expect(data.pipeline).to.be.a('string');
            expect(data.pipeline).to.be("");
            expect(data.original).to.be.a('string');
            expect(data.original).to.be("");
            expect(data.pipeline_name).to.be.a('string');
            expect(data.pipeline_name).to.be("");
            expect(data.original_name).to.be.a('string');
            expect(data.original_name).to.be("");
            {
              let dataCtr = data.status_conditions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1StatusCondition);
                expect(data.type).to.be.a(PolyaxonSdk.V1Statuses);
                    expect(data.status).to.be.a('string');
                expect(data.status).to.be("");
                expect(data.reason).to.be.a('string');
                expect(data.reason).to.be("");
                expect(data.message).to.be.a('string');
                expect(data.message).to.be("");
                expect(data.last_update_time).to.be.a(Date);
                expect(data.last_update_time).to.be(new Date());
                expect(data.last_transition_time).to.be.a(Date);
                expect(data.last_transition_time).to.be(new Date());
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('restartRun', function() {
        it('should call restartRun successfully', function(done) {
          // TODO: uncomment, update parameter values for restartRun call and complete the assertions
          /*
          var entity_owner = "entity_owner_example";
          var entity_project = "entity_project_example";
          var entity_uuid = "entity_uuid_example";
          var body = new PolyaxonSdk.V1Run();
          body.uuid = "";
          body.name = "";
          body.description = "";
          body.tags = [""];
          body.deleted = false;
          body.user = "";
          body.owner = "";
          body.project = "";
          body.created_at = new Date();
          body.updated_at = new Date();
          body.started_at = new Date();
          body.finished_at = new Date();
          body.is_managed = "";
          body.content = "";
          body.status = new PolyaxonSdk.V1Statuses();
          body.bookmarked = false;
          body.meta_info = ;
          body.is_helper = false;
          body.kind = new PolyaxonSdk.V1RunKind();
          body.meta_kind = new PolyaxonSdk.V1RunKind();
          body.hub = "";
          body.inputs = ;
          body.outputs = ;
          body.is_resume = false;
          body.is_clone = false;
          body.cloning_strategy = new PolyaxonSdk.V1CloningStrategy();
          body.pipeline = "";
          body.original = "";
          body.pipeline_name = "";
          body.original_name = "";
          body.status_conditions = [new PolyaxonSdk.V1StatusCondition()];
          body.status_conditions[0].type = new PolyaxonSdk.V1Statuses();
          body.status_conditions[0].status = "";
          body.status_conditions[0].reason = "";
          body.status_conditions[0].message = "";
          body.status_conditions[0].last_update_time = new Date();
          body.status_conditions[0].last_transition_time = new Date();

          instance.restartRun(entity_owner, entity_project, entity_uuid, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Run);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.owner).to.be.a('string');
            expect(data.owner).to.be("");
            expect(data.project).to.be.a('string');
            expect(data.project).to.be("");
            expect(data.created_at).to.be.a(Date);
            expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            expect(data.updated_at).to.be(new Date());
            expect(data.started_at).to.be.a(Date);
            expect(data.started_at).to.be(new Date());
            expect(data.finished_at).to.be.a(Date);
            expect(data.finished_at).to.be(new Date());
            expect(data.is_managed).to.be.a('string');
            expect(data.is_managed).to.be("");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.status).to.be.a(PolyaxonSdk.V1Statuses);
                expect(data.bookmarked).to.be.a('boolean');
            expect(data.bookmarked).to.be(false);
            expect(data.meta_info).to.be.a(Object);
            expect(data.meta_info).to.be();
            expect(data.is_helper).to.be.a('boolean');
            expect(data.is_helper).to.be(false);
            expect(data.kind).to.be.a(PolyaxonSdk.V1RunKind);
                expect(data.meta_kind).to.be.a(PolyaxonSdk.V1RunKind);
                expect(data.hub).to.be.a('string');
            expect(data.hub).to.be("");
            expect(data.inputs).to.be.a(Object);
            expect(data.inputs).to.be();
            expect(data.outputs).to.be.a(Object);
            expect(data.outputs).to.be();
            expect(data.is_resume).to.be.a('boolean');
            expect(data.is_resume).to.be(false);
            expect(data.is_clone).to.be.a('boolean');
            expect(data.is_clone).to.be(false);
            expect(data.cloning_strategy).to.be.a(PolyaxonSdk.V1CloningStrategy);
                expect(data.pipeline).to.be.a('string');
            expect(data.pipeline).to.be("");
            expect(data.original).to.be.a('string');
            expect(data.original).to.be("");
            expect(data.pipeline_name).to.be.a('string');
            expect(data.pipeline_name).to.be("");
            expect(data.original_name).to.be.a('string');
            expect(data.original_name).to.be("");
            {
              let dataCtr = data.status_conditions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1StatusCondition);
                expect(data.type).to.be.a(PolyaxonSdk.V1Statuses);
                    expect(data.status).to.be.a('string');
                expect(data.status).to.be("");
                expect(data.reason).to.be.a('string');
                expect(data.reason).to.be("");
                expect(data.message).to.be.a('string');
                expect(data.message).to.be("");
                expect(data.last_update_time).to.be.a(Date);
                expect(data.last_update_time).to.be(new Date());
                expect(data.last_transition_time).to.be.a(Date);
                expect(data.last_transition_time).to.be(new Date());
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('restoreRun', function() {
        it('should call restoreRun successfully', function(done) {
          // TODO: uncomment, update parameter values for restoreRun call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";

          instance.restoreRun(owner, project, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('resumeRun', function() {
        it('should call resumeRun successfully', function(done) {
          // TODO: uncomment, update parameter values for resumeRun call and complete the assertions
          /*
          var entity_owner = "entity_owner_example";
          var entity_project = "entity_project_example";
          var entity_uuid = "entity_uuid_example";
          var body = new PolyaxonSdk.V1Run();
          body.uuid = "";
          body.name = "";
          body.description = "";
          body.tags = [""];
          body.deleted = false;
          body.user = "";
          body.owner = "";
          body.project = "";
          body.created_at = new Date();
          body.updated_at = new Date();
          body.started_at = new Date();
          body.finished_at = new Date();
          body.is_managed = "";
          body.content = "";
          body.status = new PolyaxonSdk.V1Statuses();
          body.bookmarked = false;
          body.meta_info = ;
          body.is_helper = false;
          body.kind = new PolyaxonSdk.V1RunKind();
          body.meta_kind = new PolyaxonSdk.V1RunKind();
          body.hub = "";
          body.inputs = ;
          body.outputs = ;
          body.is_resume = false;
          body.is_clone = false;
          body.cloning_strategy = new PolyaxonSdk.V1CloningStrategy();
          body.pipeline = "";
          body.original = "";
          body.pipeline_name = "";
          body.original_name = "";
          body.status_conditions = [new PolyaxonSdk.V1StatusCondition()];
          body.status_conditions[0].type = new PolyaxonSdk.V1Statuses();
          body.status_conditions[0].status = "";
          body.status_conditions[0].reason = "";
          body.status_conditions[0].message = "";
          body.status_conditions[0].last_update_time = new Date();
          body.status_conditions[0].last_transition_time = new Date();

          instance.resumeRun(entity_owner, entity_project, entity_uuid, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Run);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.owner).to.be.a('string');
            expect(data.owner).to.be("");
            expect(data.project).to.be.a('string');
            expect(data.project).to.be("");
            expect(data.created_at).to.be.a(Date);
            expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            expect(data.updated_at).to.be(new Date());
            expect(data.started_at).to.be.a(Date);
            expect(data.started_at).to.be(new Date());
            expect(data.finished_at).to.be.a(Date);
            expect(data.finished_at).to.be(new Date());
            expect(data.is_managed).to.be.a('string');
            expect(data.is_managed).to.be("");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.status).to.be.a(PolyaxonSdk.V1Statuses);
                expect(data.bookmarked).to.be.a('boolean');
            expect(data.bookmarked).to.be(false);
            expect(data.meta_info).to.be.a(Object);
            expect(data.meta_info).to.be();
            expect(data.is_helper).to.be.a('boolean');
            expect(data.is_helper).to.be(false);
            expect(data.kind).to.be.a(PolyaxonSdk.V1RunKind);
                expect(data.meta_kind).to.be.a(PolyaxonSdk.V1RunKind);
                expect(data.hub).to.be.a('string');
            expect(data.hub).to.be("");
            expect(data.inputs).to.be.a(Object);
            expect(data.inputs).to.be();
            expect(data.outputs).to.be.a(Object);
            expect(data.outputs).to.be();
            expect(data.is_resume).to.be.a('boolean');
            expect(data.is_resume).to.be(false);
            expect(data.is_clone).to.be.a('boolean');
            expect(data.is_clone).to.be(false);
            expect(data.cloning_strategy).to.be.a(PolyaxonSdk.V1CloningStrategy);
                expect(data.pipeline).to.be.a('string');
            expect(data.pipeline).to.be("");
            expect(data.original).to.be.a('string');
            expect(data.original).to.be("");
            expect(data.pipeline_name).to.be.a('string');
            expect(data.pipeline_name).to.be("");
            expect(data.original_name).to.be.a('string');
            expect(data.original_name).to.be("");
            {
              let dataCtr = data.status_conditions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1StatusCondition);
                expect(data.type).to.be.a(PolyaxonSdk.V1Statuses);
                    expect(data.status).to.be.a('string');
                expect(data.status).to.be("");
                expect(data.reason).to.be.a('string');
                expect(data.reason).to.be("");
                expect(data.message).to.be.a('string');
                expect(data.message).to.be("");
                expect(data.last_update_time).to.be.a(Date);
                expect(data.last_update_time).to.be(new Date());
                expect(data.last_transition_time).to.be.a(Date);
                expect(data.last_transition_time).to.be(new Date());
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('startRunTensorboard', function() {
        it('should call startRunTensorboard successfully', function(done) {
          // TODO: uncomment, update parameter values for startRunTensorboard call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";
          var body = new PolyaxonSdk.V1ProjectEntityResourceRequest();
          body.owner = "";
          body.project = "";
          body.uuid = "";

          instance.startRunTensorboard(owner, project, uuid, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('stopRun', function() {
        it('should call stopRun successfully', function(done) {
          // TODO: uncomment, update parameter values for stopRun call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";

          instance.stopRun(owner, project, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('stopRunTensorboard', function() {
        it('should call stopRunTensorboard successfully', function(done) {
          // TODO: uncomment, update parameter values for stopRunTensorboard call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";

          instance.stopRunTensorboard(owner, project, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('stopRuns', function() {
        it('should call stopRuns successfully', function(done) {
          // TODO: uncomment, update parameter values for stopRuns call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var body = new PolyaxonSdk.V1Uuids();
          body.uuids = [""];

          instance.stopRuns(owner, project, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('unbookmarkRun', function() {
        it('should call unbookmarkRun successfully', function(done) {
          // TODO: uncomment, update parameter values for unbookmarkRun call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";

          instance.unbookmarkRun(owner, project, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateRun', function() {
        it('should call updateRun successfully', function(done) {
          // TODO: uncomment, update parameter values for updateRun call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var run_uuid = "run_uuid_example";
          var body = new PolyaxonSdk.V1Run();
          body.uuid = "";
          body.name = "";
          body.description = "";
          body.tags = [""];
          body.deleted = false;
          body.user = "";
          body.owner = "";
          body.project = "";
          body.created_at = new Date();
          body.updated_at = new Date();
          body.started_at = new Date();
          body.finished_at = new Date();
          body.is_managed = "";
          body.content = "";
          body.status = new PolyaxonSdk.V1Statuses();
          body.bookmarked = false;
          body.meta_info = ;
          body.is_helper = false;
          body.kind = new PolyaxonSdk.V1RunKind();
          body.meta_kind = new PolyaxonSdk.V1RunKind();
          body.hub = "";
          body.inputs = ;
          body.outputs = ;
          body.is_resume = false;
          body.is_clone = false;
          body.cloning_strategy = new PolyaxonSdk.V1CloningStrategy();
          body.pipeline = "";
          body.original = "";
          body.pipeline_name = "";
          body.original_name = "";
          body.status_conditions = [new PolyaxonSdk.V1StatusCondition()];
          body.status_conditions[0].type = new PolyaxonSdk.V1Statuses();
          body.status_conditions[0].status = "";
          body.status_conditions[0].reason = "";
          body.status_conditions[0].message = "";
          body.status_conditions[0].last_update_time = new Date();
          body.status_conditions[0].last_transition_time = new Date();

          instance.updateRun(owner, project, run_uuid, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Run);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.owner).to.be.a('string');
            expect(data.owner).to.be("");
            expect(data.project).to.be.a('string');
            expect(data.project).to.be("");
            expect(data.created_at).to.be.a(Date);
            expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            expect(data.updated_at).to.be(new Date());
            expect(data.started_at).to.be.a(Date);
            expect(data.started_at).to.be(new Date());
            expect(data.finished_at).to.be.a(Date);
            expect(data.finished_at).to.be(new Date());
            expect(data.is_managed).to.be.a('string');
            expect(data.is_managed).to.be("");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.status).to.be.a(PolyaxonSdk.V1Statuses);
                expect(data.bookmarked).to.be.a('boolean');
            expect(data.bookmarked).to.be(false);
            expect(data.meta_info).to.be.a(Object);
            expect(data.meta_info).to.be();
            expect(data.is_helper).to.be.a('boolean');
            expect(data.is_helper).to.be(false);
            expect(data.kind).to.be.a(PolyaxonSdk.V1RunKind);
                expect(data.meta_kind).to.be.a(PolyaxonSdk.V1RunKind);
                expect(data.hub).to.be.a('string');
            expect(data.hub).to.be("");
            expect(data.inputs).to.be.a(Object);
            expect(data.inputs).to.be();
            expect(data.outputs).to.be.a(Object);
            expect(data.outputs).to.be();
            expect(data.is_resume).to.be.a('boolean');
            expect(data.is_resume).to.be(false);
            expect(data.is_clone).to.be.a('boolean');
            expect(data.is_clone).to.be(false);
            expect(data.cloning_strategy).to.be.a(PolyaxonSdk.V1CloningStrategy);
                expect(data.pipeline).to.be.a('string');
            expect(data.pipeline).to.be("");
            expect(data.original).to.be.a('string');
            expect(data.original).to.be("");
            expect(data.pipeline_name).to.be.a('string');
            expect(data.pipeline_name).to.be("");
            expect(data.original_name).to.be.a('string');
            expect(data.original_name).to.be("");
            {
              let dataCtr = data.status_conditions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1StatusCondition);
                expect(data.type).to.be.a(PolyaxonSdk.V1Statuses);
                    expect(data.status).to.be.a('string');
                expect(data.status).to.be("");
                expect(data.reason).to.be.a('string');
                expect(data.reason).to.be("");
                expect(data.message).to.be.a('string');
                expect(data.message).to.be("");
                expect(data.last_update_time).to.be.a(Date);
                expect(data.last_update_time).to.be(new Date());
                expect(data.last_transition_time).to.be.a(Date);
                expect(data.last_transition_time).to.be(new Date());
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('uploadRunArtifact', function() {
        it('should call uploadRunArtifact successfully', function(done) {
          // TODO: uncomment, update parameter values for uploadRunArtifact call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";
          var uploadfile = "/path/to/file.txt";
          var opts = {};
          opts.path = "path_example";
          opts.overwrite = true;

          instance.uploadRunArtifact(owner, project, uuid, uploadfile, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('uploadRunLogs', function() {
        it('should call uploadRunLogs successfully', function(done) {
          // TODO: uncomment, update parameter values for uploadRunLogs call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";
          var uploadfile = "/path/to/file.txt";
          var opts = {};
          opts.path = "path_example";
          opts.overwrite = true;

          instance.uploadRunLogs(owner, project, uuid, uploadfile, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
