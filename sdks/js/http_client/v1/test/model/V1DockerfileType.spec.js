// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
 * Polyaxon SDKs and REST API specification.
 * Polyaxon SDKs and REST API specification.
 *
 * OpenAPI spec version: 1.0.5
 * Contact: contact@polyaxon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PolyaxonSdk);
  }
}(this, function(expect, PolyaxonSdk) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('V1DockerfileType', function() {
      beforeEach(function() {
        instance = new PolyaxonSdk.V1DockerfileType();
      });

      it('should create an instance of V1DockerfileType', function() {
        // TODO: update the code to test V1DockerfileType
        expect(instance).to.be.a(PolyaxonSdk.V1DockerfileType);
      });

      it('should have the property image (base name: "image")', function() {
        // TODO: update the code to test the property image
        expect(instance).to.have.property('image');
        // expect(instance.image).to.be(expectedValueLiteral);
      });

      it('should have the property env (base name: "env")', function() {
        // TODO: update the code to test the property env
        expect(instance).to.have.property('env');
        // expect(instance.env).to.be(expectedValueLiteral);
      });

      it('should have the property path (base name: "path")', function() {
        // TODO: update the code to test the property path
        expect(instance).to.have.property('path');
        // expect(instance.path).to.be(expectedValueLiteral);
      });

      it('should have the property copy (base name: "copy")', function() {
        // TODO: update the code to test the property copy
        expect(instance).to.have.property('copy');
        // expect(instance.copy).to.be(expectedValueLiteral);
      });

      it('should have the property run (base name: "run")', function() {
        // TODO: update the code to test the property run
        expect(instance).to.have.property('run');
        // expect(instance.run).to.be(expectedValueLiteral);
      });

      it('should have the property lang_env (base name: "lang_env")', function() {
        // TODO: update the code to test the property lang_env
        expect(instance).to.have.property('lang_env');
        // expect(instance.lang_env).to.be(expectedValueLiteral);
      });

      it('should have the property uid (base name: "uid")', function() {
        // TODO: update the code to test the property uid
        expect(instance).to.have.property('uid');
        // expect(instance.uid).to.be(expectedValueLiteral);
      });

      it('should have the property gid (base name: "gid")', function() {
        // TODO: update the code to test the property gid
        expect(instance).to.have.property('gid');
        // expect(instance.gid).to.be(expectedValueLiteral);
      });

      it('should have the property filename (base name: "filename")', function() {
        // TODO: update the code to test the property filename
        expect(instance).to.have.property('filename');
        // expect(instance.filename).to.be(expectedValueLiteral);
      });

      it('should have the property workdir (base name: "workdir")', function() {
        // TODO: update the code to test the property workdir
        expect(instance).to.have.property('workdir');
        // expect(instance.workdir).to.be(expectedValueLiteral);
      });

      it('should have the property workdir_path (base name: "workdir_path")', function() {
        // TODO: update the code to test the property workdir_path
        expect(instance).to.have.property('workdir_path');
        // expect(instance.workdir_path).to.be(expectedValueLiteral);
      });

      it('should have the property shell (base name: "shell")', function() {
        // TODO: update the code to test the property shell
        expect(instance).to.have.property('shell');
        // expect(instance.shell).to.be(expectedValueLiteral);
      });

    });
  });

}));
