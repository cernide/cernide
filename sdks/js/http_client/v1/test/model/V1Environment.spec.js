// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
 * Polyaxon SDKs and REST API specification.
 * Polyaxon SDKs and REST API specification.
 *
 * OpenAPI spec version: 1.0.5
 * Contact: contact@polyaxon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PolyaxonSdk);
  }
}(this, function(expect, PolyaxonSdk) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('V1Environment', function() {
      beforeEach(function() {
        instance = new PolyaxonSdk.V1Environment();
      });

      it('should create an instance of V1Environment', function() {
        // TODO: update the code to test V1Environment
        expect(instance).to.be.a(PolyaxonSdk.V1Environment);
      });

      it('should have the property labels (base name: "labels")', function() {
        // TODO: update the code to test the property labels
        expect(instance).to.have.property('labels');
        // expect(instance.labels).to.be(expectedValueLiteral);
      });

      it('should have the property annotations (base name: "annotations")', function() {
        // TODO: update the code to test the property annotations
        expect(instance).to.have.property('annotations');
        // expect(instance.annotations).to.be(expectedValueLiteral);
      });

      it('should have the property node_selector (base name: "node_selector")', function() {
        // TODO: update the code to test the property node_selector
        expect(instance).to.have.property('node_selector');
        // expect(instance.node_selector).to.be(expectedValueLiteral);
      });

      it('should have the property affinity (base name: "affinity")', function() {
        // TODO: update the code to test the property affinity
        expect(instance).to.have.property('affinity');
        // expect(instance.affinity).to.be(expectedValueLiteral);
      });

      it('should have the property tolerations (base name: "tolerations")', function() {
        // TODO: update the code to test the property tolerations
        expect(instance).to.have.property('tolerations');
        // expect(instance.tolerations).to.be(expectedValueLiteral);
      });

      it('should have the property node_name (base name: "node_name")', function() {
        // TODO: update the code to test the property node_name
        expect(instance).to.have.property('node_name');
        // expect(instance.node_name).to.be(expectedValueLiteral);
      });

      it('should have the property service_account_name (base name: "service_account_name")', function() {
        // TODO: update the code to test the property service_account_name
        expect(instance).to.have.property('service_account_name');
        // expect(instance.service_account_name).to.be(expectedValueLiteral);
      });

      it('should have the property host_aliases (base name: "host_aliases")', function() {
        // TODO: update the code to test the property host_aliases
        expect(instance).to.have.property('host_aliases');
        // expect(instance.host_aliases).to.be(expectedValueLiteral);
      });

      it('should have the property security_context (base name: "security_context")', function() {
        // TODO: update the code to test the property security_context
        expect(instance).to.have.property('security_context');
        // expect(instance.security_context).to.be(expectedValueLiteral);
      });

      it('should have the property image_pull_secrets (base name: "image_pull_secrets")', function() {
        // TODO: update the code to test the property image_pull_secrets
        expect(instance).to.have.property('image_pull_secrets');
        // expect(instance.image_pull_secrets).to.be(expectedValueLiteral);
      });

      it('should have the property host_network (base name: "host_network")', function() {
        // TODO: update the code to test the property host_network
        expect(instance).to.have.property('host_network');
        // expect(instance.host_network).to.be(expectedValueLiteral);
      });

      it('should have the property dns_policy (base name: "dns_policy")', function() {
        // TODO: update the code to test the property dns_policy
        expect(instance).to.have.property('dns_policy');
        // expect(instance.dns_policy).to.be(expectedValueLiteral);
      });

      it('should have the property dns_config (base name: "dns_config")', function() {
        // TODO: update the code to test the property dns_config
        expect(instance).to.have.property('dns_config');
        // expect(instance.dns_config).to.be(expectedValueLiteral);
      });

      it('should have the property scheduler_name (base name: "scheduler_name")', function() {
        // TODO: update the code to test the property scheduler_name
        expect(instance).to.have.property('scheduler_name');
        // expect(instance.scheduler_name).to.be(expectedValueLiteral);
      });

      it('should have the property priority_class_name (base name: "priority_class_name")', function() {
        // TODO: update the code to test the property priority_class_name
        expect(instance).to.have.property('priority_class_name');
        // expect(instance.priority_class_name).to.be(expectedValueLiteral);
      });

      it('should have the property priority (base name: "priority")', function() {
        // TODO: update the code to test the property priority
        expect(instance).to.have.property('priority');
        // expect(instance.priority).to.be(expectedValueLiteral);
      });

      it('should have the property restart_policy (base name: "restart_policy")', function() {
        // TODO: update the code to test the property restart_policy
        expect(instance).to.have.property('restart_policy');
        // expect(instance.restart_policy).to.be(expectedValueLiteral);
      });

    });
  });

}));
