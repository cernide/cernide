// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
 * Polyaxon SDKs and REST API specification.
 * Polyaxon SDKs and REST API specification.
 *
 * OpenAPI spec version: 1.0.5
 * Contact: contact@polyaxon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/V1ArtifactsType', 'model/V1Container', 'model/V1DockerfileType', 'model/V1GitType'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./V1ArtifactsType'), require('./V1Container'), require('./V1DockerfileType'), require('./V1GitType'));
  } else {
    // Browser globals (root is window)
    if (!root.PolyaxonSdk) {
      root.PolyaxonSdk = {};
    }
    root.PolyaxonSdk.V1Init = factory(root.PolyaxonSdk.ApiClient, root.PolyaxonSdk.V1ArtifactsType, root.PolyaxonSdk.V1Container, root.PolyaxonSdk.V1DockerfileType, root.PolyaxonSdk.V1GitType);
  }
}(this, function(ApiClient, V1ArtifactsType, V1Container, V1DockerfileType, V1GitType) {
  'use strict';

  /**
   * The V1Init model module.
   * @module model/V1Init
   * @version 1.0.5
   */

  /**
   * Constructs a new <code>V1Init</code>.
   * @alias module:model/V1Init
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>V1Init</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/V1Init} obj Optional instance to populate.
   * @return {module:model/V1Init} The populated <code>V1Init</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('artifacts'))
        obj.artifacts = V1ArtifactsType.constructFromObject(data['artifacts']);
      if (data.hasOwnProperty('git'))
        obj.git = V1GitType.constructFromObject(data['git']);
      if (data.hasOwnProperty('dockerfile'))
        obj.dockerfile = V1DockerfileType.constructFromObject(data['dockerfile']);
      if (data.hasOwnProperty('connection'))
        obj.connection = ApiClient.convertToType(data['connection'], 'String');
      if (data.hasOwnProperty('path'))
        obj.path = ApiClient.convertToType(data['path'], 'String');
      if (data.hasOwnProperty('container'))
        obj.container = V1Container.constructFromObject(data['container']);
    }
    return obj;
  }

  /**
   * @member {module:model/V1ArtifactsType} artifacts
   */
  exports.prototype.artifacts = undefined;

  /**
   * @member {module:model/V1GitType} git
   */
  exports.prototype.git = undefined;

  /**
   * @member {module:model/V1DockerfileType} dockerfile
   */
  exports.prototype.dockerfile = undefined;

  /**
   * @member {String} connection
   */
  exports.prototype.connection = undefined;

  /**
   * @member {String} path
   */
  exports.prototype.path = undefined;

  /**
   * @member {module:model/V1Container} container
   */
  exports.prototype.container = undefined;

  return exports;

}));
