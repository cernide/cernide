// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package service_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1Statuses v1 statuses
//
// swagger:model v1Statuses
type V1Statuses string

const (

	// V1StatusesCreated captures enum value "created"
	V1StatusesCreated V1Statuses = "created"

	// V1StatusesResuming captures enum value "resuming"
	V1StatusesResuming V1Statuses = "resuming"

	// V1StatusesWarning captures enum value "warning"
	V1StatusesWarning V1Statuses = "warning"

	// V1StatusesUnschedulable captures enum value "unschedulable"
	V1StatusesUnschedulable V1Statuses = "unschedulable"

	// V1StatusesQueued captures enum value "queued"
	V1StatusesQueued V1Statuses = "queued"

	// V1StatusesScheduled captures enum value "scheduled"
	V1StatusesScheduled V1Statuses = "scheduled"

	// V1StatusesStarting captures enum value "starting"
	V1StatusesStarting V1Statuses = "starting"

	// V1StatusesRunning captures enum value "running"
	V1StatusesRunning V1Statuses = "running"

	// V1StatusesSucceeded captures enum value "succeeded"
	V1StatusesSucceeded V1Statuses = "succeeded"

	// V1StatusesFailed captures enum value "failed"
	V1StatusesFailed V1Statuses = "failed"

	// V1StatusesUpstreamFailed captures enum value "upstream_failed"
	V1StatusesUpstreamFailed V1Statuses = "upstream_failed"

	// V1StatusesStopping captures enum value "stopping"
	V1StatusesStopping V1Statuses = "stopping"

	// V1StatusesStopped captures enum value "stopped"
	V1StatusesStopped V1Statuses = "stopped"

	// V1StatusesSkipped captures enum value "skipped"
	V1StatusesSkipped V1Statuses = "skipped"

	// V1StatusesRetrying captures enum value "retrying"
	V1StatusesRetrying V1Statuses = "retrying"

	// V1StatusesUnknown captures enum value "unknown"
	V1StatusesUnknown V1Statuses = "unknown"
)

// for schema
var v1StatusesEnum []interface{}

func init() {
	var res []V1Statuses
	if err := json.Unmarshal([]byte(`["created","resuming","warning","unschedulable","queued","scheduled","starting","running","succeeded","failed","upstream_failed","stopping","stopped","skipped","retrying","unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1StatusesEnum = append(v1StatusesEnum, v)
	}
}

func (m V1Statuses) validateV1StatusesEnum(path, location string, value V1Statuses) error {
	if err := validate.Enum(path, location, value, v1StatusesEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 statuses
func (m V1Statuses) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1StatusesEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
