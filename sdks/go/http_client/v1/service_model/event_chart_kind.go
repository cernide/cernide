// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package service_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EventChartKind Chart kind
//
// - plotly: Plotly chart
//  - bokeh: Bokeh chart
//  - vega: Vega chart
//  - roc: ROC chart
//  - auc: AUC chart
//  - confusion: Confusion chart
//
// swagger:model EventChartKind
type EventChartKind string

const (

	// EventChartKindPlotly captures enum value "plotly"
	EventChartKindPlotly EventChartKind = "plotly"

	// EventChartKindBokeh captures enum value "bokeh"
	EventChartKindBokeh EventChartKind = "bokeh"

	// EventChartKindVega captures enum value "vega"
	EventChartKindVega EventChartKind = "vega"

	// EventChartKindRoc captures enum value "roc"
	EventChartKindRoc EventChartKind = "roc"

	// EventChartKindAuc captures enum value "auc"
	EventChartKindAuc EventChartKind = "auc"

	// EventChartKindConfusion captures enum value "confusion"
	EventChartKindConfusion EventChartKind = "confusion"
)

// for schema
var eventChartKindEnum []interface{}

func init() {
	var res []EventChartKind
	if err := json.Unmarshal([]byte(`["plotly","bokeh","vega","roc","auc","confusion"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eventChartKindEnum = append(eventChartKindEnum, v)
	}
}

func (m EventChartKind) validateEventChartKindEnum(path, location string, value EventChartKind) error {
	if err := validate.Enum(path, location, value, eventChartKindEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this event chart kind
func (m EventChartKind) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEventChartKindEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
