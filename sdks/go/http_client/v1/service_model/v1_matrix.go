// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package service_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1Matrix Hp Matrix specification
//
// swagger:model v1Matrix
type V1Matrix struct {

	// choice
	Choice *V1HpChoice `json:"choice,omitempty"`

	// geomspace
	Geomspace *V1HpGeomSpace `json:"geomspace,omitempty"`

	// linspace
	Linspace *V1HpLinSpace `json:"linspace,omitempty"`

	// lognormal
	Lognormal *V1HpLogNormal `json:"lognormal,omitempty"`

	// logspace
	Logspace *V1HpLogSpace `json:"logspace,omitempty"`

	// loguniform
	Loguniform *V1HpLogUniform `json:"loguniform,omitempty"`

	// normal
	Normal *V1HpNormal `json:"normal,omitempty"`

	// pchoice
	Pchoice *V1HpPChoice `json:"pchoice,omitempty"`

	// qlognormal
	Qlognormal *V1HpQLogNormal `json:"qlognormal,omitempty"`

	// qloguniform
	Qloguniform *V1HpQLogUniform `json:"qloguniform,omitempty"`

	// qnormal
	Qnormal *V1HpQNormal `json:"qnormal,omitempty"`

	// quniform
	Quniform *V1HpQUniform `json:"quniform,omitempty"`

	// range
	Range *V1HpRange `json:"range,omitempty"`

	// uniform
	Uniform *V1HpUniform `json:"uniform,omitempty"`
}

// Validate validates this v1 matrix
func (m *V1Matrix) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChoice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeomspace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinspace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLognormal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogspace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoguniform(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNormal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePchoice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQlognormal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQloguniform(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQnormal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuniform(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUniform(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Matrix) validateChoice(formats strfmt.Registry) error {

	if swag.IsZero(m.Choice) { // not required
		return nil
	}

	if m.Choice != nil {
		if err := m.Choice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("choice")
			}
			return err
		}
	}

	return nil
}

func (m *V1Matrix) validateGeomspace(formats strfmt.Registry) error {

	if swag.IsZero(m.Geomspace) { // not required
		return nil
	}

	if m.Geomspace != nil {
		if err := m.Geomspace.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("geomspace")
			}
			return err
		}
	}

	return nil
}

func (m *V1Matrix) validateLinspace(formats strfmt.Registry) error {

	if swag.IsZero(m.Linspace) { // not required
		return nil
	}

	if m.Linspace != nil {
		if err := m.Linspace.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("linspace")
			}
			return err
		}
	}

	return nil
}

func (m *V1Matrix) validateLognormal(formats strfmt.Registry) error {

	if swag.IsZero(m.Lognormal) { // not required
		return nil
	}

	if m.Lognormal != nil {
		if err := m.Lognormal.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lognormal")
			}
			return err
		}
	}

	return nil
}

func (m *V1Matrix) validateLogspace(formats strfmt.Registry) error {

	if swag.IsZero(m.Logspace) { // not required
		return nil
	}

	if m.Logspace != nil {
		if err := m.Logspace.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logspace")
			}
			return err
		}
	}

	return nil
}

func (m *V1Matrix) validateLoguniform(formats strfmt.Registry) error {

	if swag.IsZero(m.Loguniform) { // not required
		return nil
	}

	if m.Loguniform != nil {
		if err := m.Loguniform.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("loguniform")
			}
			return err
		}
	}

	return nil
}

func (m *V1Matrix) validateNormal(formats strfmt.Registry) error {

	if swag.IsZero(m.Normal) { // not required
		return nil
	}

	if m.Normal != nil {
		if err := m.Normal.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("normal")
			}
			return err
		}
	}

	return nil
}

func (m *V1Matrix) validatePchoice(formats strfmt.Registry) error {

	if swag.IsZero(m.Pchoice) { // not required
		return nil
	}

	if m.Pchoice != nil {
		if err := m.Pchoice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pchoice")
			}
			return err
		}
	}

	return nil
}

func (m *V1Matrix) validateQlognormal(formats strfmt.Registry) error {

	if swag.IsZero(m.Qlognormal) { // not required
		return nil
	}

	if m.Qlognormal != nil {
		if err := m.Qlognormal.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("qlognormal")
			}
			return err
		}
	}

	return nil
}

func (m *V1Matrix) validateQloguniform(formats strfmt.Registry) error {

	if swag.IsZero(m.Qloguniform) { // not required
		return nil
	}

	if m.Qloguniform != nil {
		if err := m.Qloguniform.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("qloguniform")
			}
			return err
		}
	}

	return nil
}

func (m *V1Matrix) validateQnormal(formats strfmt.Registry) error {

	if swag.IsZero(m.Qnormal) { // not required
		return nil
	}

	if m.Qnormal != nil {
		if err := m.Qnormal.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("qnormal")
			}
			return err
		}
	}

	return nil
}

func (m *V1Matrix) validateQuniform(formats strfmt.Registry) error {

	if swag.IsZero(m.Quniform) { // not required
		return nil
	}

	if m.Quniform != nil {
		if err := m.Quniform.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quniform")
			}
			return err
		}
	}

	return nil
}

func (m *V1Matrix) validateRange(formats strfmt.Registry) error {

	if swag.IsZero(m.Range) { // not required
		return nil
	}

	if m.Range != nil {
		if err := m.Range.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("range")
			}
			return err
		}
	}

	return nil
}

func (m *V1Matrix) validateUniform(formats strfmt.Registry) error {

	if swag.IsZero(m.Uniform) { // not required
		return nil
	}

	if m.Uniform != nil {
		if err := m.Uniform.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("uniform")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1Matrix) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Matrix) UnmarshalBinary(b []byte) error {
	var res V1Matrix
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
