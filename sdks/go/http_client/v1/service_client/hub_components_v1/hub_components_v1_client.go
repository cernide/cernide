// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package hub_components_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new hub components v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for hub components v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateHubComponent(params *CreateHubComponentParams, authInfo runtime.ClientAuthInfoWriter) (*CreateHubComponentOK, *CreateHubComponentNoContent, error)

	DeleteHubComponent(params *DeleteHubComponentParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteHubComponentOK, *DeleteHubComponentNoContent, error)

	GetHubComponent(params *GetHubComponentParams, authInfo runtime.ClientAuthInfoWriter) (*GetHubComponentOK, *GetHubComponentNoContent, error)

	ListHubComponebtNames(params *ListHubComponebtNamesParams, authInfo runtime.ClientAuthInfoWriter) (*ListHubComponebtNamesOK, *ListHubComponebtNamesNoContent, error)

	ListHubComponents(params *ListHubComponentsParams, authInfo runtime.ClientAuthInfoWriter) (*ListHubComponentsOK, *ListHubComponentsNoContent, error)

	PatchHubComponent(params *PatchHubComponentParams, authInfo runtime.ClientAuthInfoWriter) (*PatchHubComponentOK, *PatchHubComponentNoContent, error)

	UpdateHubComponent(params *UpdateHubComponentParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateHubComponentOK, *UpdateHubComponentNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateHubComponent creates hub component
*/
func (a *Client) CreateHubComponent(params *CreateHubComponentParams, authInfo runtime.ClientAuthInfoWriter) (*CreateHubComponentOK, *CreateHubComponentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateHubComponentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateHubComponent",
		Method:             "POST",
		PathPattern:        "/api/v1/orgs/{owner}/components",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateHubComponentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateHubComponentOK:
		return value, nil, nil
	case *CreateHubComponentNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateHubComponentDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteHubComponent deletes hub component
*/
func (a *Client) DeleteHubComponent(params *DeleteHubComponentParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteHubComponentOK, *DeleteHubComponentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteHubComponentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteHubComponent",
		Method:             "DELETE",
		PathPattern:        "/api/v1/orgs/{owner}/components/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteHubComponentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteHubComponentOK:
		return value, nil, nil
	case *DeleteHubComponentNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteHubComponentDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetHubComponent gets hub component
*/
func (a *Client) GetHubComponent(params *GetHubComponentParams, authInfo runtime.ClientAuthInfoWriter) (*GetHubComponentOK, *GetHubComponentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHubComponentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetHubComponent",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/components/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetHubComponentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetHubComponentOK:
		return value, nil, nil
	case *GetHubComponentNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetHubComponentDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListHubComponebtNames lists hub component names
*/
func (a *Client) ListHubComponebtNames(params *ListHubComponebtNamesParams, authInfo runtime.ClientAuthInfoWriter) (*ListHubComponebtNamesOK, *ListHubComponebtNamesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListHubComponebtNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListHubComponebtNames",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/components/names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListHubComponebtNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListHubComponebtNamesOK:
		return value, nil, nil
	case *ListHubComponebtNamesNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListHubComponebtNamesDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListHubComponents lists hub components
*/
func (a *Client) ListHubComponents(params *ListHubComponentsParams, authInfo runtime.ClientAuthInfoWriter) (*ListHubComponentsOK, *ListHubComponentsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListHubComponentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListHubComponents",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/components",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListHubComponentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListHubComponentsOK:
		return value, nil, nil
	case *ListHubComponentsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListHubComponentsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PatchHubComponent patches hub component
*/
func (a *Client) PatchHubComponent(params *PatchHubComponentParams, authInfo runtime.ClientAuthInfoWriter) (*PatchHubComponentOK, *PatchHubComponentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchHubComponentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchHubComponent",
		Method:             "PATCH",
		PathPattern:        "/api/v1/orgs/{owner}/components/{component.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchHubComponentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PatchHubComponentOK:
		return value, nil, nil
	case *PatchHubComponentNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchHubComponentDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateHubComponent updates hub component
*/
func (a *Client) UpdateHubComponent(params *UpdateHubComponentParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateHubComponentOK, *UpdateHubComponentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateHubComponentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateHubComponent",
		Method:             "PUT",
		PathPattern:        "/api/v1/orgs/{owner}/components/{component.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateHubComponentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateHubComponentOK:
		return value, nil, nil
	case *UpdateHubComponentNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateHubComponentDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
