// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package access_resources_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/polyaxon/sdks/go/http_client/v1/service_model"
)

// UpdateAccessResourceReader is a Reader for the UpdateAccessResource structure.
type UpdateAccessResourceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAccessResourceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateAccessResourceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewUpdateAccessResourceNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewUpdateAccessResourceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateAccessResourceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateAccessResourceDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateAccessResourceOK creates a UpdateAccessResourceOK with default headers values
func NewUpdateAccessResourceOK() *UpdateAccessResourceOK {
	return &UpdateAccessResourceOK{}
}

/*UpdateAccessResourceOK handles this case with default header values.

A successful response.
*/
type UpdateAccessResourceOK struct {
	Payload *service_model.V1AccessResource
}

func (o *UpdateAccessResourceOK) Error() string {
	return fmt.Sprintf("[PUT /api/v1/orgs/{owner}/access_resources/{access_resource.uuid}][%d] updateAccessResourceOK  %+v", 200, o.Payload)
}

func (o *UpdateAccessResourceOK) GetPayload() *service_model.V1AccessResource {
	return o.Payload
}

func (o *UpdateAccessResourceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.V1AccessResource)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAccessResourceNoContent creates a UpdateAccessResourceNoContent with default headers values
func NewUpdateAccessResourceNoContent() *UpdateAccessResourceNoContent {
	return &UpdateAccessResourceNoContent{}
}

/*UpdateAccessResourceNoContent handles this case with default header values.

No content.
*/
type UpdateAccessResourceNoContent struct {
	Payload interface{}
}

func (o *UpdateAccessResourceNoContent) Error() string {
	return fmt.Sprintf("[PUT /api/v1/orgs/{owner}/access_resources/{access_resource.uuid}][%d] updateAccessResourceNoContent  %+v", 204, o.Payload)
}

func (o *UpdateAccessResourceNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateAccessResourceNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAccessResourceForbidden creates a UpdateAccessResourceForbidden with default headers values
func NewUpdateAccessResourceForbidden() *UpdateAccessResourceForbidden {
	return &UpdateAccessResourceForbidden{}
}

/*UpdateAccessResourceForbidden handles this case with default header values.

You don't have permission to access the resource.
*/
type UpdateAccessResourceForbidden struct {
	Payload interface{}
}

func (o *UpdateAccessResourceForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v1/orgs/{owner}/access_resources/{access_resource.uuid}][%d] updateAccessResourceForbidden  %+v", 403, o.Payload)
}

func (o *UpdateAccessResourceForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateAccessResourceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAccessResourceNotFound creates a UpdateAccessResourceNotFound with default headers values
func NewUpdateAccessResourceNotFound() *UpdateAccessResourceNotFound {
	return &UpdateAccessResourceNotFound{}
}

/*UpdateAccessResourceNotFound handles this case with default header values.

Resource does not exist.
*/
type UpdateAccessResourceNotFound struct {
	Payload interface{}
}

func (o *UpdateAccessResourceNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v1/orgs/{owner}/access_resources/{access_resource.uuid}][%d] updateAccessResourceNotFound  %+v", 404, o.Payload)
}

func (o *UpdateAccessResourceNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateAccessResourceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAccessResourceDefault creates a UpdateAccessResourceDefault with default headers values
func NewUpdateAccessResourceDefault(code int) *UpdateAccessResourceDefault {
	return &UpdateAccessResourceDefault{
		_statusCode: code,
	}
}

/*UpdateAccessResourceDefault handles this case with default header values.

An unexpected error response
*/
type UpdateAccessResourceDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// Code gets the status code for the update access resource default response
func (o *UpdateAccessResourceDefault) Code() int {
	return o._statusCode
}

func (o *UpdateAccessResourceDefault) Error() string {
	return fmt.Sprintf("[PUT /api/v1/orgs/{owner}/access_resources/{access_resource.uuid}][%d] UpdateAccessResource default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateAccessResourceDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *UpdateAccessResourceDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
