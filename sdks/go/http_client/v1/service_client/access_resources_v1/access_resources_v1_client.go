// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package access_resources_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new access resources v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for access resources v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateAccessResource(params *CreateAccessResourceParams, authInfo runtime.ClientAuthInfoWriter) (*CreateAccessResourceOK, *CreateAccessResourceNoContent, error)

	DeleteAccessResource(params *DeleteAccessResourceParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAccessResourceOK, *DeleteAccessResourceNoContent, error)

	GetAccessResource(params *GetAccessResourceParams, authInfo runtime.ClientAuthInfoWriter) (*GetAccessResourceOK, *GetAccessResourceNoContent, error)

	ListAccessResourceNames(params *ListAccessResourceNamesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAccessResourceNamesOK, *ListAccessResourceNamesNoContent, error)

	ListAccessResources(params *ListAccessResourcesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAccessResourcesOK, *ListAccessResourcesNoContent, error)

	PatchAccessResource(params *PatchAccessResourceParams, authInfo runtime.ClientAuthInfoWriter) (*PatchAccessResourceOK, *PatchAccessResourceNoContent, error)

	UpdateAccessResource(params *UpdateAccessResourceParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAccessResourceOK, *UpdateAccessResourceNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateAccessResource creates access resource
*/
func (a *Client) CreateAccessResource(params *CreateAccessResourceParams, authInfo runtime.ClientAuthInfoWriter) (*CreateAccessResourceOK, *CreateAccessResourceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAccessResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateAccessResource",
		Method:             "POST",
		PathPattern:        "/api/v1/orgs/{owner}/access_resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateAccessResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateAccessResourceOK:
		return value, nil, nil
	case *CreateAccessResourceNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateAccessResourceDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteAccessResource deletes access resource
*/
func (a *Client) DeleteAccessResource(params *DeleteAccessResourceParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAccessResourceOK, *DeleteAccessResourceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAccessResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAccessResource",
		Method:             "DELETE",
		PathPattern:        "/api/v1/orgs/{owner}/access_resources/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteAccessResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteAccessResourceOK:
		return value, nil, nil
	case *DeleteAccessResourceNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteAccessResourceDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetAccessResource gets access resource
*/
func (a *Client) GetAccessResource(params *GetAccessResourceParams, authInfo runtime.ClientAuthInfoWriter) (*GetAccessResourceOK, *GetAccessResourceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccessResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAccessResource",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/access_resources/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAccessResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetAccessResourceOK:
		return value, nil, nil
	case *GetAccessResourceNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAccessResourceDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListAccessResourceNames lists access resource names
*/
func (a *Client) ListAccessResourceNames(params *ListAccessResourceNamesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAccessResourceNamesOK, *ListAccessResourceNamesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAccessResourceNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListAccessResourceNames",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/access_resources/names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListAccessResourceNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListAccessResourceNamesOK:
		return value, nil, nil
	case *ListAccessResourceNamesNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListAccessResourceNamesDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListAccessResources lists access resources
*/
func (a *Client) ListAccessResources(params *ListAccessResourcesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAccessResourcesOK, *ListAccessResourcesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAccessResourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListAccessResources",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/access_resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListAccessResourcesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListAccessResourcesOK:
		return value, nil, nil
	case *ListAccessResourcesNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListAccessResourcesDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PatchAccessResource patches access resource
*/
func (a *Client) PatchAccessResource(params *PatchAccessResourceParams, authInfo runtime.ClientAuthInfoWriter) (*PatchAccessResourceOK, *PatchAccessResourceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAccessResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchAccessResource",
		Method:             "PATCH",
		PathPattern:        "/api/v1/orgs/{owner}/access_resources/{access_resource.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchAccessResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PatchAccessResourceOK:
		return value, nil, nil
	case *PatchAccessResourceNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchAccessResourceDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateAccessResource updates access resource
*/
func (a *Client) UpdateAccessResource(params *UpdateAccessResourceParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAccessResourceOK, *UpdateAccessResourceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAccessResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateAccessResource",
		Method:             "PUT",
		PathPattern:        "/api/v1/orgs/{owner}/access_resources/{access_resource.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateAccessResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateAccessResourceOK:
		return value, nil, nil
	case *UpdateAccessResourceNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateAccessResourceDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
