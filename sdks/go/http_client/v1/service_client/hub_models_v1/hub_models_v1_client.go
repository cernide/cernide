// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package hub_models_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new hub models v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for hub models v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateHubModel(params *CreateHubModelParams, authInfo runtime.ClientAuthInfoWriter) (*CreateHubModelOK, *CreateHubModelNoContent, error)

	DeleteHubModel(params *DeleteHubModelParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteHubModelOK, *DeleteHubModelNoContent, error)

	GetHubModel(params *GetHubModelParams, authInfo runtime.ClientAuthInfoWriter) (*GetHubModelOK, *GetHubModelNoContent, error)

	ListHubModelNames(params *ListHubModelNamesParams, authInfo runtime.ClientAuthInfoWriter) (*ListHubModelNamesOK, *ListHubModelNamesNoContent, error)

	ListHubModels(params *ListHubModelsParams, authInfo runtime.ClientAuthInfoWriter) (*ListHubModelsOK, *ListHubModelsNoContent, error)

	PatchHubModel(params *PatchHubModelParams, authInfo runtime.ClientAuthInfoWriter) (*PatchHubModelOK, *PatchHubModelNoContent, error)

	UpdateHubModel(params *UpdateHubModelParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateHubModelOK, *UpdateHubModelNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateHubModel creates hub model
*/
func (a *Client) CreateHubModel(params *CreateHubModelParams, authInfo runtime.ClientAuthInfoWriter) (*CreateHubModelOK, *CreateHubModelNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateHubModelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateHubModel",
		Method:             "POST",
		PathPattern:        "/api/v1/orgs/{owner}/models",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateHubModelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateHubModelOK:
		return value, nil, nil
	case *CreateHubModelNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateHubModelDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteHubModel deletes hub model
*/
func (a *Client) DeleteHubModel(params *DeleteHubModelParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteHubModelOK, *DeleteHubModelNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteHubModelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteHubModel",
		Method:             "DELETE",
		PathPattern:        "/api/v1/orgs/{owner}/models/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteHubModelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteHubModelOK:
		return value, nil, nil
	case *DeleteHubModelNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteHubModelDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetHubModel gets hub model
*/
func (a *Client) GetHubModel(params *GetHubModelParams, authInfo runtime.ClientAuthInfoWriter) (*GetHubModelOK, *GetHubModelNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHubModelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetHubModel",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/models/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetHubModelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetHubModelOK:
		return value, nil, nil
	case *GetHubModelNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetHubModelDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListHubModelNames lists hub model names
*/
func (a *Client) ListHubModelNames(params *ListHubModelNamesParams, authInfo runtime.ClientAuthInfoWriter) (*ListHubModelNamesOK, *ListHubModelNamesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListHubModelNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListHubModelNames",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/models/names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListHubModelNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListHubModelNamesOK:
		return value, nil, nil
	case *ListHubModelNamesNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListHubModelNamesDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListHubModels lists hub models
*/
func (a *Client) ListHubModels(params *ListHubModelsParams, authInfo runtime.ClientAuthInfoWriter) (*ListHubModelsOK, *ListHubModelsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListHubModelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListHubModels",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/models",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListHubModelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListHubModelsOK:
		return value, nil, nil
	case *ListHubModelsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListHubModelsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PatchHubModel patches hub model
*/
func (a *Client) PatchHubModel(params *PatchHubModelParams, authInfo runtime.ClientAuthInfoWriter) (*PatchHubModelOK, *PatchHubModelNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchHubModelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchHubModel",
		Method:             "PATCH",
		PathPattern:        "/api/v1/orgs/{owner}/models/{model.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchHubModelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PatchHubModelOK:
		return value, nil, nil
	case *PatchHubModelNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchHubModelDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateHubModel updates hub model
*/
func (a *Client) UpdateHubModel(params *UpdateHubModelParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateHubModelOK, *UpdateHubModelNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateHubModelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateHubModel",
		Method:             "PUT",
		PathPattern:        "/api/v1/orgs/{owner}/models/{model.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateHubModelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateHubModelOK:
		return value, nil, nil
	case *UpdateHubModelNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateHubModelDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
