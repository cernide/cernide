// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package versions_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/polyaxon/sdks/go/http_client/v1/service_model"
)

// GetVersionsReader is a Reader for the GetVersions structure.
type GetVersionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVersionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVersionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewGetVersionsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetVersionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetVersionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetVersionsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetVersionsOK creates a GetVersionsOK with default headers values
func NewGetVersionsOK() *GetVersionsOK {
	return &GetVersionsOK{}
}

/*GetVersionsOK handles this case with default header values.

A successful response.
*/
type GetVersionsOK struct {
	Payload *service_model.V1Versions
}

func (o *GetVersionsOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/version][%d] getVersionsOK  %+v", 200, o.Payload)
}

func (o *GetVersionsOK) GetPayload() *service_model.V1Versions {
	return o.Payload
}

func (o *GetVersionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.V1Versions)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVersionsNoContent creates a GetVersionsNoContent with default headers values
func NewGetVersionsNoContent() *GetVersionsNoContent {
	return &GetVersionsNoContent{}
}

/*GetVersionsNoContent handles this case with default header values.

No content.
*/
type GetVersionsNoContent struct {
	Payload interface{}
}

func (o *GetVersionsNoContent) Error() string {
	return fmt.Sprintf("[GET /api/v1/version][%d] getVersionsNoContent  %+v", 204, o.Payload)
}

func (o *GetVersionsNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *GetVersionsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVersionsForbidden creates a GetVersionsForbidden with default headers values
func NewGetVersionsForbidden() *GetVersionsForbidden {
	return &GetVersionsForbidden{}
}

/*GetVersionsForbidden handles this case with default header values.

You don't have permission to access the resource.
*/
type GetVersionsForbidden struct {
	Payload interface{}
}

func (o *GetVersionsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/version][%d] getVersionsForbidden  %+v", 403, o.Payload)
}

func (o *GetVersionsForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *GetVersionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVersionsNotFound creates a GetVersionsNotFound with default headers values
func NewGetVersionsNotFound() *GetVersionsNotFound {
	return &GetVersionsNotFound{}
}

/*GetVersionsNotFound handles this case with default header values.

Resource does not exist.
*/
type GetVersionsNotFound struct {
	Payload interface{}
}

func (o *GetVersionsNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/version][%d] getVersionsNotFound  %+v", 404, o.Payload)
}

func (o *GetVersionsNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *GetVersionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVersionsDefault creates a GetVersionsDefault with default headers values
func NewGetVersionsDefault(code int) *GetVersionsDefault {
	return &GetVersionsDefault{
		_statusCode: code,
	}
}

/*GetVersionsDefault handles this case with default header values.

An unexpected error response
*/
type GetVersionsDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// Code gets the status code for the get versions default response
func (o *GetVersionsDefault) Code() int {
	return o._statusCode
}

func (o *GetVersionsDefault) Error() string {
	return fmt.Sprintf("[GET /api/v1/version][%d] GetVersions default  %+v", o._statusCode, o.Payload)
}

func (o *GetVersionsDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *GetVersionsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
